#!/usr/bin/perl -w
#

use XML::Twig;
use FindBin;

my $deg_home = "$FindBin::Bin";

# Xml nodes names.
my $xml_cmd_basedir = 'basedir';
my $xml_cmd_stream = 'cmdstream';
my $xml_cmd_attr_id = 'id';
my $xml_cmd_attr_check = 'check';
my $xml_cmd_entry_point = 'main';
my $xml_cmd_cc = 'cc';
my $xml_cmd_cwd = 'cwd';
my $xml_cmd_in = 'in';
my $xml_cmd_ld = 'ld';
my $xml_cmd_opt = 'opt';
my $xml_cmd_out = 'out';
my $xml_reports_cc = 'cc';
my $xml_reports_ld = 'ld';
my $xml_reports_attr_ref = 'ref';
my $xml_reports_verdict = 'verdict';
my $xml_reports = 'reports';

my $verdict_unknown = 'UNKNOWN';
my $verdict_ok = 'OK';

my $xml_instrument_deg = 'cmd-stream-divider';
my $xml_instrument_status = 'status';
my $xml_instrument_time = 'time';
my $xml_instrument_desc = 'desc';

#####################################################
# log options
#####################################################
my $psuffix="deg-reporter";
my $log_level=10;

my $cmdfile = "";
my $report_out = "";
my $report_in = "";
my $reports_in = "";
my $state_file = "";
my @reports;

# 0. get options.
get_ldv_opts();
# 0.1 read all report files ant cut its to one temp report file
$report_in="$report_out.tmp";

my $twig_inreport = XML::Twig->new();
$twig_inreport->set_xml_version( '1.0');
my $twig_inroot = XML::Twig::Elt->new($xml_reports);
$twig_inreport->set_root($twig_inroot);

foreach my $file (@reports) { 
	echo "FILE: $file\n";
	my $ctwig=new XML::Twig();
	$ctwig->parsefile($file);
	my $croot=$ctwig->root;
	my @childrens = $croot->children();
	foreach my $section (@childrens) {
		$section->move($twig_inroot);
	}
};

# 1. read state file;
open(FIL,$state_file); 
my @states = <FIL>; 
close(FIL);

# 5. open input command stream
my $twig_handlers = {   "$xml_cmd_stream/$xml_cmd_cc"      => \&hxml_cmdstream,
			"$xml_cmd_stream/$xml_cmd_ld"      => \&hxml_cmdstream };
my $twig_icmd= new XML::Twig(TwigHandlers => $twig_handlers);
$twig_icmd->parsefile($cmdfile);

$twig_inreport->set_pretty_print('indented');
$twig_inreport->print_to_file($report_out);


#####################################################
# xml-functions
#####################################################

#
# find command-tag in input report file by id
#
sub get_cmd_tag_from_report_by_id {
	my $lroot = $twig_inreport->root;
	my @commands = ();
	foreach my $command ($lroot->children($xml_reports_cc)) {
		if($command->att($xml_reports_attr_ref) == $_[0]) { push(@commands, $command); };
	};
	foreach my $command ( $lroot->children($xml_reports_ld) ) {
		if($command->att($xml_reports_attr_ref) == $_[0]) { push(@commands, $command); };
	};
	return @commands;
}

#####################################################
# twig  handlers
#####################################################

sub hxml_cmdstream {
	my $id=$_[1]->att($xml_cmd_attr_id);
	my @commands = get_cmd_tag_from_report_by_id($id);
	#
	# TODO: test - if @command is empty, then create command 
	#
	if(scalar @commands == 0) {
		my $lcommmand;
		if ($_[1]->name == $xml_cmd_cc) { 
			$lcommand = XML::Twig::Elt->new($xml_cmd_cc);
		} elsif ($_[1]->name == $xml_cmd_ld) {
			$lcommand = XML::Twig::Elt->new($xml_cmd_cc);
			foreach my $section ( $_[1]->children('out') ) {
				if($section->has_atts && $section->att($xml_cmd_attr_check) eq 'true') {
					XML::Twig::Elt->new($xml_reports_verdict,$verdict_unknown)->paste($lcommand);
					next;
				}
			}
		};
		$lcommand->set_att($xml_reports_attr_ref => $id);
		push(@commands,$lcommand);		
	}
	foreach my $command (@commands) {
		my $instrument = XML::Twig::Elt->new($xml_instrument_deg);
		XML::Twig::Elt->new($xml_instrument_desc,"")->paste($instrument);
		XML::Twig::Elt->new($xml_instrument_time,get_state($id))->paste($instrument);
		XML::Twig::Elt->new($xml_instrument_status,"OK")->paste($instrument);
		$instrument->paste('last_child',$command);
	}
}	

sub get_state() {
	foreach my $state (@states) {
		if($state =~ m/^(\d+):(.*)$/ && $1 == $_[0]) {
			return $2;
		}
	}
}

######################################################
# option test
######################################################
sub get_ldv_opts
{
	$log_level = $ENV{'LDV_DEBUG'};

	# get all options
	foreach $opt(@ARGV)
	{
		if($opt =~ s/--cmdfile=(.*)/$1/)
		{
			$cmdfile = $opt;
		} 
		elsif($opt =~ s/--state-file=(.*)/$1/)
		{
			$state_file = $opt;
		}
		elsif($opt =~ s/--reports-in=(.*)/$1/)
		{
			$reports_in = $opt;
		}
		elsif($opt =~ s/--report-out=(.*)/$1/)
		{
			$report_out = $opt;
		}
		else
		{
			ldv_eprint("Unknown option:\"$opt\".");
			exit 1;
		}
	}
	# test all options
	if(!$cmdfile) {
		ldv_eprint("You must setup input command stream file in option: \"--cmdfile\".");
		print_usage();
		exit 1;
	} elsif(! -f $cmdfile) {
		ldv_eprint("Can not find input command stream file: \"$cmdfile\".");
		print_usage();
		exit 1;
	}
	if(!$state_file) {
		ldv_eprint("You must setup file with state: \"--state-file\".");
		print_usage();
		exit 1;
	} elsif(! -f $state_file) {
		ldv_eprint("Can not find file with state: \"$state_file\".");
		print_usage();
		exit 1;
	}
	if(!$reports_in) {
		ldv_eprint("You must setup input report files: \"--reports-in\".");
		print_usage();
		exit 1;
	} else
	{
		@reports=split('/,/',$reports_in);
	}
	if(!$report_out) {
		ldv_eprint("You must setup output report file in option: \"--reoport-out\".");
		print_usage();
		exit 1;
	} elsif( -f $report_out) {
		ldv_eprint("Output report file already exists: \"$report_out\".");
		print_usage();
		exit 1;
	}
}

sub print_usage
{
	ldv_print("USAGE: $psuffix --cmdfile=cmdfile --report-out=reportfile --report-in=reportin --state-file=statefile ");
}

#######################################################
# ldv print functions
#######################################################
sub ldv_print
{
	print "$psuffix: $_[0]\n";
}

sub ldv_eprint
{
	ldv_print "ERROR: $_[0]";
}

sub ldv_sprint
{
	if($log_level>=10) {
		ldv_print("$_[0]");
	}
}

sub ldv_iprint
{
	if($log_level>=20) {
		ldv_print("INFO: $_[0]");
	}
}

sub ldv_dprint
{
	if($log_level>=30) {
		ldv_print("DEBUG: $_[0]");
	}
}

sub ldv_tprint
{
	if($log_level>=40) {
		ldv_print("TRACE: $_[0]");
	}
}

sub ldv_aprint
{
	if($log_level==100) {
		ldv_print("$_[0]");
	}
}
