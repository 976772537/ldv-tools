#!/usr/bin/perl -w
#

use strict;

use XML::Twig;
use FindBin;
use File::Find;

my $deg_home = "$FindBin::Bin";

# Xml nodes names.
my $xml_cmd_basedir = 'basedir';
my $xml_cmd_stream = 'cmdstream';
my $xml_cmd_attr_id = 'id';
my $xml_cmd_attr_check = 'check';
my $xml_cmd_entry_point = 'main';
my $xml_cmd_cc = 'cc';
my $xml_cmd_cwd = 'cwd';
my $xml_cmd_in = 'in';
my $xml_cmd_ld = 'ld';
my $xml_cmd_opt = 'opt';
my $xml_cmd_out = 'out';
my $xml_reports_cc = 'cc';
my $xml_reports_ld = 'ld';
my $xml_reports_attr_ref = 'ref';
my $xml_reports_verdict = 'verdict';
my $xml_reports = 'reports';

my $verdict_unknown = 'UNKNOWN';
my $verdict_ok = 'OK';

my $xml_instrument = 'cmd-stream-divider';
my $xml_instrument_status = 'status';
my $xml_instrument_time = 'time';
my $xml_instrument_desc = 'desc';

#####################################################
# log options
#####################################################
my $psuffix="csd-reporter";
my $log_level=10;

my $cmdfile = "";
my $report_out = "";
my $report_name = "";
my $state_file = "";
my $reports_list = "";
my @reports;

# Whether the input files are non-valid XMLs for faster concatenation
my $batch = '';

# 0. get options.
get_ldv_opts();

# This reporter just concatenates all reports after DEG to one big report.
# We will do it the quick way, without parsing at all (to save time).

use File::Cat qw(cat);

# All CSD report file names are stored in the special file
@reports = get_reports();

# Start printing xml
open OUT_REP, ">", $report_out;
print OUT_REP "<?xml version=\"1.0\"?>\n<reports>\n";

if ($batch) {
	ldv_dprint("Printing the report in BATCH mode!");
	# Catenate all other reports right here
	cat($_,\*OUT_REP) for @reports;
}else{
	# Parse each file, and extract the children of <reports> root tag out of it.
	# An exception "More than one root tag" will be thrown if "batch" files are passed as an input.
	for my $report_fname (@reports){
		my $twig_inreport = new XML::Twig();
		$twig_inreport->set_pretty_print('indented');
		$twig_inreport->parsefile($report_fname);
		# 'indented' does not work on the following line (makes <cc> and <ld> tags disappear.  A bug in XML::Twig?)
		$_->print(\*OUT_REP) for $twig_inreport->root->children;
	}
}

# Now close the tag
print OUT_REP "\n</reports>\n";
close OUT_REP;

ldv_dprint("Report created successfully.");


#####################################################
# xml-functions
#####################################################
sub get_reports {
	local $_;
	open RLIST, $reports_list or die"$!";
	my @reports_after_deg = map {chomp; $_} (<RLIST>);
	close RLIST;
	return @reports_after_deg;
}


######################################################
# option test
######################################################
sub get_ldv_opts
{
	$log_level = $ENV{'LDV_DEBUG'};

	# get all options
	for my $opt (@ARGV)
	{
		if($opt =~ s/--cmdfile=(.*)/$1/)
		{
			$cmdfile = $opt;
		} 
		elsif($opt =~ s/--state-file=(.*)/$1/)
		{
			$state_file = $opt;
		}
		elsif($opt =~ s/--report-list=(.*)/$1/)
		{
			$reports_list = $opt;
		}
		elsif($opt =~ s/--report-name=(.*)/$1/)
		{
			$report_name = $opt;
		}
		elsif($opt =~ s/--report-out=(.*)/$1/)
		{
			$report_out = $opt;
		}
		elsif($opt =~ /--batch/)
		{
			$batch = 1;
		}
		else
		{
			ldv_eprint("Unknown option:\"$opt\".");
			exit 1;
		}
	}
	# test all options
	if(!$cmdfile) {
		ldv_eprint("You must setup input command stream file in option: \"--cmdfile\".");
		print_usage();
		exit 1;
	} elsif(! -f $cmdfile) {
		ldv_eprint("Can not find input command stream file: \"$cmdfile\".");
		print_usage();
		exit 1;
	}
	if(!$state_file) {
		ldv_eprint("You must setup file with state: \"--state-file\".");
		print_usage();
		exit 1;
	} elsif(! -f $state_file) {
		ldv_eprint("Can not find file with state: \"$state_file\".");
		print_usage();
		exit 1;
	}
	if(!$report_name) {
		ldv_eprint("You must setup input report filename: \"--report-name\".");
		print_usage();
		exit 1;
	}
	if(!$reports_list) {
		ldv_eprint("You must setup DEG reports list in option: \"--reoports-list\".");
		print_usage();
		exit 1;
	} elsif(! -f $reports_list) {
		ldv_eprint("File with reports list not exists: \"$reports_list\".");
		print_usage();
		exit 1;
	} 
	if(!$report_out) {
		ldv_eprint("You must setup output report file in option: \"--reoport-out\".");
		print_usage();
		exit 1;
	} elsif( -f $report_out) {
		ldv_eprint("Output report file already exists: \"$report_out\".");
		print_usage();
		exit 1;
	}
}

sub print_usage
{
	ldv_print("USAGE: $psuffix --reports-dir=reportsdir --cmdfile=cmdfile --report-out=reportfile --report-name=reportname --state-file=statefile [--batch]");
}

#######################################################
# ldv print functions
#######################################################
sub ldv_print
{
	print "$psuffix: $_[0]\n";
}

sub ldv_eprint
{
	ldv_print "ERROR: $_[0]";
}

sub ldv_sprint
{
	if($log_level>=10) {
		ldv_print("$_[0]");
	}
}

sub ldv_iprint
{
	if($log_level>=20) {
		ldv_print("INFO: $_[0]");
	}
}

sub ldv_dprint
{
	if($log_level>=30) {
		ldv_print("DEBUG: $_[0]");
	}
}

sub ldv_tprint
{
	if($log_level>=40) {
		ldv_print("TRACE: $_[0]");
	}
}

sub ldv_aprint
{
	if($log_level==100) {
		ldv_print("$_[0]");
	}
}
