#!/usr/bin/perl

################################################################################
# Copyright (C) 2010-2012
# Institute for System Programming, Russian Academy of Sciences (ISPRAS).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

use FindBin;
use Env;
use SOAP::Lite;
use Cwd;

BEGIN {
        $ENV{'LDV_HOME'} ||= "$FindBin::Bin/..";
        push @INC,"$ENV{'LDV_HOME'}/shared/perl";
}

use LDV::QueueUtils qw(post_message);

my $as_gcc = "$FindBin::Bin/../cmd-utils/as_gcc";
if(!$as_gcc || !(-f $as_gcc)) {
        print "bce_gcc: ERROR: Can't find as_gcc: \"$as_gcc\".\n";
        exit 1;
}


# search and replace .ko with .o extension
#
my $module_file = $ARGV[0];
if(!($module_file =~ s/\.ko$/\.o/)) 
{
	if(!($module_file =~ s/\.ko.unsigned$/\.o/)) {
		print "bce_gcc: ERROR: Can't replace .ko with .o in module_file.\n";
		exit 1;
	}
}

# Send within file queue
if($ENV{INTERACT_WITHIN_FILES}) {
	my $workdir = getcwd();

	my $expected_command_file;
	my $file = $module_file;
	if($file =~ /driver_unpacked\//){
		# External driver
		$expected_command_file = $ENV{COMMANDS_DIR} . q{/} . $' . q{.ld.xml};
	}
	else{
		# Kernel driver
		$expected_command_file = $file . q{.ld.xml};
		$expected_command_file =~ s/^$workdir/$ENV{COMMANDS_DIR}/;
	}

	if( !-e $expected_command_file ) {
		# Create artificial command
		@as_gcc_out = `$as_gcc $module_file -o $ARGV[0]`;
		$file = $ARGV[0];
	}
	post_message($ENV{COMMANDS_INDEX}, "ldm", $file);
}
else{
	my $csd = SOAP::Lite -> service("$ENV{'WSDLADDR'}?wsdl");

	if($csd->isExistsLD(SOAP::Data-> type("string") -> name ("arg0") -> value ($module_file)) eq 'true') {
		$csd->marker(SOAP::Data-> type ("string") -> name ("arg0") -> value ($module_file));
	} else {
		# Else you must send artificial command !
		@as_gcc_out = `$as_gcc $module_file -o $ARGV[0]`;
	#	my $cmd_id = 0;
	#	foreach (@as_gcc_out) {
	#		/<ID>(.*)<\/ID>/ or next;
	#		
	#	}
		$csd->marker(SOAP::Data-> type ("string") -> name ("arg0") -> value ($ARGV[0]));
	}
}


