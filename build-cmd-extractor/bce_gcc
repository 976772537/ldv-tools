#!/usr/bin/perl

use FindBin;

my $buildfile = $ENV{'BUILDFILE'};
if(!$buildfile) {
	print "bce_gcc: ERROR: BUILDFILE variable not set. Setup it and try again\n";
	print "USAGE: BUILDFILE=path_to_buildfile bce_gcc kernel_module\n";
	exit 1;
};
if(! -f $buildfile) {
	print "bce_gcc: ERROR: BUILDFILE=\"$buildfile\" - should be an existing cmd-file.\n";
	exit 1;
}
my $as_gcc = "$FindBin::Bin/../cmd-utils/as_gcc";
if(!$as_gcc || !(-f $as_gcc)) {
	print "bce_gcc: ERROR: Can't find as_gcc: \"$as_gcc\".\n";
	exit 1;
}
#
# serach replace .ko with .o extension
#
my $module_file = $ARGV[0];
if(!($module_file =~ s/\.ko$/\.o/)) 
{
	print "bce_gcc: ERROR: Can't replcae .ko with .o in module_file.\n";
	exit 1;
}
#
# serach out with our object file
#
open(FIL,$buildfile);
my @strings = <FIL>;
close(FIL);
open(FIL,"> $buildfile");
my $inld = 0;
my $ismodule = 0;
foreach $line (@strings)
{
	if($inld == 0 && ($line =~ m/<ld.*>/))
	{
		$inld = 1;
	}  
	elsif($inld == 1)
	{
		if (m/<\/ld>/)
		{
			$inld = 0;
		} 
		elsif($ismodule ==0 && ($line =~ s/<out>$module_file<\/out>/<out check="true">$ARGV[0]<\/out>/))
		{ 
			$ismodule = 1;
		}
	}
#	elsif($ismodule ==0 && m/<\/cmdstream>/)
#	{
#		print `$as_gcc $module_file -o @ARGV`;
#		print "<ld id=\"0\">";
#		print "<cwd>$module_file<\/cwd>";
#		print "<in>$module_file<\/in>";
#		print "<opt>-o<\/out>";
#		print "<out>@ARGV[0]<\/out>";
#		print "<\/ld>";
#	}
	print(FIL $line);
}
if($ismodule == 0)
{
	@as_gcc_out = `$as_gcc $module_file -o $ARGV[0]`;
	foreach $line (@as_gcc_out)
	{
		$line =~ s/<out>$ARGV[0]<\/out>/<out check="true">$ARGV[0]<\/out>/;
		print(FIL $line);
	}
}
close(FIL);




