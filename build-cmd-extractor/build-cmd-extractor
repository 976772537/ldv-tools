#!/bin/bash

# timer
start_time=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`;

BCE_TEMPDIR_NAME="bce_tempdir"
DRIVER_DIR_NAME="driver"
TEMP_DRIVER_DIR_NAME="tempdir_driver"

KERNEL_ENV_PREFIX=".ldv\/ldv\/envs\/";

GLOBAL_LOG="bce_global.log";
KERNEL_COMPILE_LOG_FILENAME="ckc.log";
TRACE_FILENAME="build_trace";
XML_FILENAME="cmd.xml";
LOG_PREFIX="build-cmd-extractor: ";

KERNEL_LEVEL=0;

LDV_HOME=`readlink -f \`dirname $0\`/../`;

USAGE_STRING="...";
LOG_PREFIX="build-cmd-extractor: ";
source $LDV_HOME/shared/sh/log.sh;

BCE_DIRNAME="build-cmd-extractor";
BCE_DIR=$LDV_HOME/$BCE_DIRNAME;

CMD_FILTER_NAME="cmd-stream-mod.pl"
CMD_FILTER_RUN=$BCE_DIR/$CMD_FILTER_NAME;

CMD_REROUTER="reroute-stream";
CMD_REROUTER_RUN=$BCE_DIR/$CMD_REROUTER;

#if [ $# -eq 5 -o $# -eq 4 ]; then print_usage_and_exit; fi;
if [ ! -n "$WORK_DIR" ]; then
	ldv_print "ERROR: Please, setup WORK_DIR variable before running ldv-core.";
	exit 1;
fi;
WORK_DIR=`readlink -f $WORK_DIR`;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Failed to read abs-path for working dir: \"$WORK_DIR\".";
        exit 1;
fi;
if [ ! -d "$WORK_DIR" ]; then
        ldv_print "ERROR: Working directory does not exists: \"$WORK_DIR\".";
        exit 1;
fi;

#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --cmdfile-out=*)
                	rcmdfileout=`echo $arg | sed 's/--cmdfile-out=//g'`
			if [ ! -n "$rcmdfileout" ]; then
				ldv_print "ERROR: Parameter \"--cmdfile-out=\" - is null. Setup it.";
			        exit 1;
			fi;
			cmdfileout=$rcmdfileout;
		;;
                --cmdstream=*)
                        rcmdstream=`echo $arg | sed 's/--cmdstream=//g'`
                        if [ ! -n "$rcmdstream" ]; then
                                ldv_print "ERROR: Parameter \"--cmdstream\" - is null. Setup it.";
                                exit 1;
                        fi;
                ;;
                --basedir=*)
                	basedir=`echo $arg | sed 's/--basedir=//g'`
			if [ ! -n "$basedir" ]; then
				ldv_print "ERROR: Parameter \"--basedir\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
 	        --state=*)
                	statefile=`echo $arg | sed 's/--state=//g'`
			if [ ! -n "$statefile" ]; then
				ldv_print "ERROR: Parameter \"--state\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
                --env=*)
                	renv=`echo $arg | sed 's/--env=//g'`
			if [ ! -n "$renv" ]; then
				ldv_print "ERROR: Parameter \"--env\" - is null. Setup it.";
			        exit 1;
			fi;
			env=`readlink -f $renv`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for environment dir: \"$renv\"."
			        exit 1;
			fi;
			if [ ! -d "$env" ]; then
			        ldv_print "ERROR: Environment dir not exists: \"$env\".";
			        exit 1;
			fi;
                ;;
                --driver=*)
                	driver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$driver" ]; then
				ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
 		--kernel-driver)
                	KERNEL_LEVEL=1;
                ;;
                *)
                        ldv_print "ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done
#---------------------------------------------------------------------------

if [ -n "$rcmdstream" ]; then
        cmdstream=`echo "readlink -f $rcmdstream" | sh`;
        if [ $? -ne 0 ]; then
                ldv_print "ERROR: Failed to read abs-path for cmdstream file: \"$cmdstream\"."
                exit 1;
        fi;
        if [ ! -f "$cmdstream" ]; then
                ldv_print "ERROR: Cmdstream file not exists: \"$cmdstream\".";
                exit 1;
        fi;
else
	if [ $KERNEL_LEVEL -eq 0 ]; then
		ldv_print "NORMAL: Extern driver mode.";
	else
		ldv_print "NORMAL: In-kernel driver mode.";
	fi;

	if [ ! -n "$driver" ]; then
		ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
	        print_usage_and_exit;
	fi;
fi;
if [ ! -n $basedir ]; then
	ldv_print "ERROR: Option \"$basedir\" is empty.";
	print_usage_and_exit;	
fi;
if [ ! -n "$statefile" ]; then
	ldv_print "ERROR: Parameter \"--state\" - is null. Setup it.";
        print_usage_and_exit;
else
	statefile_data=$statefile.data;
fi;

TEMP_DIR=$WORK_DIR/$basedir;
if [ ! -d $TEMP_DIR ]; then
	mkdir $TEMP_DIR;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed to create next tempdir: \"$TEMP_DIR\".";
		exit 1;
	fi;
else
	ldv_print "WARNING: Temp directory: \"$TEMP_DIR\" - already exists. Reuse it.";
fi;

DRIVER_DIR=$TEMP_DIR/$DRIVER_DIR_NAME;

if [ -n "$cmdstream" ]; then
	cmdfileout=$cmdstream; 
else
	echo "<?xml version=\"1.0\"?>" > $cmdfileout;
	echo "<cmdstream>" >> $cmdfileout;
	if [ $KERNEL_LEVEL -ne 1 ]; then
		echo "<basedir>$driver</basedir>" >> $cmdfileout;
	else
		echo "<basedir>$env</basedir>" >> $cmdfileout;
	fi;

	KERNEL_COMPILE_LOG=$TEMP_DIR/$KERNEL_COMPILE_LOG_FILENAME;
	cd $env;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed change dir to: \"$env\".";
		let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
		echo $worktime>$statefile_data;
		exit 1;
	fi;

	#
	# find correct Makefile in driver dir...
	#
	#
	# When kernel make driver:
	#    1     It find Kbuid on top level dir
	#    1.1   If Kbuild exists - it test for obj-m...
	#    1.2   If Kbuild contains obj-m then kernel start to build this driver and exit
	#    2     It find Makefile on top level dir
	#    2.1   If Makefile exists - it test for obj-m...
	#    2.2   If Makefile contains obj-m, then kernel start to build this driver and exit
	#    3     Kernel print error
	#
	if [ $KERNEL_LEVEL -eq 0 ]; then
		ldv_print "INFO: Try to find Kbuild with obj-m...";
		FIND_KBUILD_FILE_OPERATION=`find $driver -regex '.*/Kbuild$' -type f`;
		for l in $FIND_KBUILD_FILE_OPERATION; do
			ldv_print "INFO: next Kbuild: \"$l\".";
#			if [ -n "`grep obj-m $l`" ]; then
				CORRECT_KBUILD=`readlink -f $l`;
				if [ $? -ne 0 ]; then ldv_print "ERROR: Can't get abs path for driver Kbuild file: \"$l\"."; exit 1; fi;
				ldv_print "INFO: Correct Kbuild file is: \"$l\".";
				break;
#			fi;
		done;
		ldv_print "INFO: Try to find Makefile with obj-m...";
		FIND_MAKEFILE_FILE_OPERATION=`find $driver -regex '.*/Makefile$' -type f`;
		for l in $FIND_MAKEFILE_FILE_OPERATION; do
			ldv_print "INFO: next Makefile: \"$l\".";
#			if [ -n "`grep obj-m $l`" ]; then
				ldv_print "TRACE: CORRECT_MAKEFILE=readlink -f $l;";
				CORRECT_MAKEFILE=`readlink -f $l`;
				if [ $? -ne 0 ]; then ldv_print "ERROR: Can't get abs path for driver Makefile: \"$l\"."; exit 1; fi;
		       	        ldv_print "INFO: Correct Makefile is: \"$l\".";
				break;
#			fi;
		done;
		if [ ! -n "$CORRECT_MAKEFILE" -a ! -n "$CORRECT_KBUILD" ]; then
			ldv_print "ERROR: Can't find correct Makefile or Kbuild file.";
			echo "Can't find correct Makefile or Kbuild file." > $statefile;
			let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
			echo $worktime>$statefile_data;
			exit 1;
		fi;
		
		if [ -n "$CORRECT_MAKEFILE" ]; then
			DRIVER_MAKEFILE_DIR=`dirname $CORRECT_MAKEFILE`;
	                if [ $? -ne 0 ]; then
	                        let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
	                        echo $worktime>$statefile_data;
	                        ldv_print "ERROR: Can't get dirname for correct makefile: \"$CORRECT_MAKEFILE\".";
	                        exit 1;
	                fi;
		fi;
		if [ -n "$CORRECT_KBUILD" ]; then
			DRIVER_KBUILD_DIR=`dirname $CORRECT_KBUILD`;
	                if [ $? -ne 0 ]; then
	                        let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
	                        echo $worktime>$statefile_data;
	                        ldv_print "ERROR: Can't get dirname for correct Kbuild: \"$CORRECT_KBUILD\".";
	                        exit 1;
	                fi;
		fi;



	fi;

	ldv_print "NORMAL: Make driver."
	if [ $KERNEL_LEVEL -eq 0 ]; then
		if [ -n "$CORRECT_KBUILD" ]; then
			ldv_print "DEBUG: Save cmdstream file.";
			cp $cmdfileout $cmdfileout.backup;
			ldv_print "DEBUG: BUILDFILE=$cmdfileout make V=1 M=$DRIVER_KBUILD_DIR/ modules > $statefile 2>&1";
			BUILDFILE=$cmdfileout make V=1 M=$DRIVER_KBUILD_DIR/ modules > $KERNEL_COMPILE_LOG 2>$statefile;
			# only if it ldv-online !!!
			if [ $? -ne 0 -a -n "$CORRECT_MAKEFILE" ]; then
				ldv_print "DEBUG: Restore cmd stream \"$cmdfileout\" over previously Kbuild compilation.";
				mv $cmdfileout.backup $cmdfileout;
				ldv_print "DEBUG: Remove previous symbolic link \"/lib/modules/`uname -r`/build\".";
				rm -f /lib/modules/`uname -r`/build; 
				ldv_print "DEBUG: Create new symlink...";
				ldv_print "TRACE: ln -s `readlink -f .` /lib/modules/`uname -r`/build";
				ln -s `readlink -f .` /lib/modules/`uname -r`/build;
				if [ $? -eq 0 ]; then								
					ldv_print "DEBUG: BUILDFILE=$cmdfileout make -C $DRIVER_MAKEFILE_DIR V=1 > $KERNEL_COMPILE_LOG 2>$statefile;";
					BUILDFILE=$cmdfileout make -C $DRIVER_MAKEFILE_DIR > $KERNEL_COMPILE_LOG 2>$statefile;
					# remove symlink !!!
				fi;
			fi;
		else
			ldv_print "DEBUG: BUILDFILE=$cmdfileout make V=1 M=$DRIVER_MAKEFILE_DIR/ modules > $statefile 2>&1";
			BUILDFILE=$cmdfileout make V=1 M=$DRIVER_MAKEFILE_DIR/ modules > $KERNEL_COMPILE_LOG 2>$statefile;
		fi;
	else
		# TODO: replace this hack!
		# prepare kernel for external driver
		make clean 2>$statefile;
		if [ $? -ne 0 ]; then 
			shield_xml $statefile;
			ldv_print "ERROR: Can't clean kernel.";
		        if [ -f "$statefile" ]; then
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't configure kernel." >>$statefile;
		        else
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't configure kernel." >$statefile;
		        fi;
			exit 1;
		fi;

		make allmodconfig 2>$statefile;
		if [ $? -ne 0 ]; then 
			shield_xml $statefile;
			ldv_print "ERROR: Can't configure kernel.";
		        if [ -f "$statefile" ]; then
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't configure kernel." >>$statefile;
		        else
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't configure kernel." >$statefile;
		        fi;
			exit 1;
		fi;

		make init 2>$statefile;
		if [ $? -ne 0 ]; then 
			shield_xml $statefile;
			ldv_print "ERROR: Can't init kernel.";
		        if [ -f "$statefile" ]; then
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't init kernel." >>$statefile;
	       		else
				let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
				echo $worktime>$statefile_data;
		                echo "Can't init kernel." >$statefile;
		        fi;
			exit 1;
		fi;
	
		# test for root of kernel
		# abs_driver=`readlink -f $driver`;

		#
		# test if driver - single file extensions .ko or .o
		#
		is_single_driver=`echo $driver | grep -E '\.(o|ko)$'`;
		if [ -n "$is_single_driver" ]; then
			ldv_print "INFO: Single driver compile mode.";
			ldv_print "DEBUG: Replace \"&\" symbols with whitespaces. It needs for more than one targets!";
			driver=`echo $driver | tr '&' ' '`;
			ldv_print "DEBUG: BUILDFILE=$cmdfileout make $driver > $KERNEL_COMPILE_LOG 2>$statefile;";
			BUILDFILE=$cmdfileout make $driver > $KERNEL_COMPILE_LOG 2>$statefile;
		else 
			ldv_print "INFO: Kernel folder compile mode.";
#			for i in `find . -depth -type d | sed "s/\.\///g"`; do if [ "$i" != "." ]; then i="$i/"; fi;
			for i in `find $driver -depth -type d | grep -v tmp_versions |sed "s/\.\///g"`; do if [ "$i" != "." ]; then i="$i/"; else continue; fi;
				ldv_print "BUILDFILE=$cmdfileout make V=1 M=$i modules >> $KERNEL_COMPILE_LOG 2>>$statefile;";
				BUILDFILE=$cmdfileout make V=1 M=$i modules >> $KERNEL_COMPILE_LOG 2>>$statefile;
			done;
#			if [ "$driver" == "." -o "$driver" == "./" ]; then mdriver=" "; else mdriver="M=$driver/"; fi;
#			ldv_print "DEBUG: BUILDFILE=$cmdfileout make V=1 $mdriver modules > $KERNEL_COMPILE_LOG 2>$statefile;";
#			BUILDFILE=$cmdfileout make V=1 $mdriver modules > $KERNEL_COMPILE_LOG 2>$statefile;
		fi;
	fi;
	if [ $? -ne 0 ]; then
		shield_xml $statefile;
		ldv_print "ERROR: Error during driver compile. See compile log for more details: \"$KERNEL_COMPILE_LOG\".";
       		if [ -f "$statefile" ]; then
			let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
			echo $worktime>$statefile_data;
       	        	echo "Compile error." >>$statefile;
	        else
			let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
			echo $worktime>$statefile_data;
       		        echo "Compile error." >$statefile;
       		fi;
		exit 1;
	fi;

	echo "</cmdstream>" >> $cmdfileout;
#	cmdfileout_tmp=$cmdfileout"_tmp";
#	touch $cmdfileout_tmp;
#	if [ $? -ne 0 ] ; then 
#		ldv_print "ERROR: Can't create temp cmdfile.";
#		exit 1;
#	fi;

	#	
	# create numbers
	#
	perl -e 'open(FIL,"'$cmdfileout'"); my @strings = <FIL>; close(FIL); open FIL, ">'$cmdfileout'"; my $counter=1; foreach $line (@strings) { if ($line =~ s/<(cc|ld) id="\d+">/<$1 id="$counter">/) { $counter++}; print (FIL $line); }; close FIL;';
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Can't create normal id numbers in command stream out file.";
       		exit 1;
	fi;

fi;
	#
	# TODO: find autoconf.h
	#
	perl -e 'open(FIL,"'$cmdfileout'") || die;  my @strings = <FIL>; close(FIL); open FIL, ">'$cmdfileout'" || die; my $isitinclude=0; foreach $line (@strings) { if ($line =~ m/<opt>-include<\/opt>/) { $isitinclude=1; } elsif($isitinclude == 1) { $line =~ s/<opt>(.*)/<opt config="autoconf">$1/; $isitinclude=0; } print (FIL $line); }; close FIL;';
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Can't allocate autoconf option.";
	        exit 1;
	fi;

if [ ! -n "$cmdstream" ]; then
	#
	# fix format - add one tab before <cc> and <ld> tags and...
	#
	sed -i -e 's/^<cc/\t<cc/g' $cmdfileout; 
	sed -i -e 's/^<\/cc/\t<\/cc/g' $cmdfileout; 
	sed -i -e 's/^<ld/\t<ld/g' $cmdfileout; 
	sed -i -e 's/^<\/ld/\t<\/ld/g' $cmdfileout; 
	sed -i -e 's/^<in>/\t\t<in>/g' $cmdfileout; 
	sed -i -e 's/^<cwd>/\t\t<cwd>/g' $cmdfileout; 
	sed -i -e 's/^<out>/\t\t<out>/g' $cmdfileout; 
	sed -i -e 's/^<out check="true">/\t\t<out check="true">/g' $cmdfileout; 
	sed -i -e 's/^<opt>/\t\t<opt>/g' $cmdfileout; 
	sed -i -e 's/^<module>/\t\t<module>/g' $cmdfileout; 
	sed -i -e 's/^<basedir>/\t<basedir>/g' $cmdfileout;

	#
	# Find kernel modules (i.e. ld check=true)
	# 
	if [ $KERNEL_LEVEL -eq 0 -a ! -n "`grep '<ld id=' $cmdfileout`" ]; then
		let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
		echo $worktime>$statefile_data;
		echo "Driver have no kernel modules." >$statefile;
		ldv_print "ERROR: Driver have no kernel modules.";
		exit 1;
	fi;
else
	ldv_print "WASDLADDR=$WSDLADDR $CMD_REROUTER_RUN $cmdstream;";
	$CMD_REROUTER_RUN $cmdstream;
fi;

let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
echo $worktime>$statefile_data;
#ldv_print "DEBUG: $CMD_FILTER_RUN -c $cmdfileout";
#$CMD_FILTER_RUN -c $cmdfileout;
#if [ $? -ne 0 ]; then
#	let worktime=`perl -e "use Time::HiRes qw( gettimeofday ); print int(gettimeofday*1000)"`-$start_time;
#	echo $worktime>$statefile_data;
#	echo "Filter failed." >$statefile;
#	ldv_print "ERROR: Filter failed.";
#	exit 1;
#fi;
ldv_print "NORMAL: Command stream is successfully extracted.";
exit;

