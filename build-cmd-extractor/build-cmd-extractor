#!/bin/sh

BCE_TEMPDIR_NAME="bce_tempdir"
LDV_TEMPDIR_NAME="ldv_tempdir"
DRIVER_DIR_NAME="driver"

GLOBAL_LOG="bce_global.log";
KERNEL_COMPILE_LOG_FILENAME="ckc.log";
TRACE_FILENAME="build_trace";
XML_FILENAME="cmd.xml";
LOG_PREFIX="build-cmd-extractor: ";
LOG_MIRROR_TO_CONSOLE=1;

LDV_HOME=`readlink -f \`dirname $0\`/../`;

XGCC=`echo $LDV_HOME | sed 's/\//\\\\\//g'`"\\/cmd-utils\\/as_gcc";

bce_print() {
	if [ $LOG_MIRROR_TO_CONSOLE -ne 0 ]; then echo "$LOG_PREFIX$1"; fi;
	if [ ! -f "$LDV_WORK_DIR/$GLOBAL_LOG" ];  then
		touch $LDV_WORK_DIR/$GLOBAL_LOG;
	if [ $? -ne 0 ]; then 
		echo "ERROR: can't create log file.";
	exit 1; 
		fi;
        fi;
        echo "$LOG_PREFIX$1" >> $LDV_WORK_DIR/$GLOBAL_LOG;
}
#---------------------------------------------------------------------------
#
# read and test environment variables
#
print_usage_and_exit() {
		echo "USAGE: WORK_DIR=workdir build-cmd-extractor --basedir=basedir --env=kerneldir --driver=driverpath --cmdfile-out=xmlfile";
		exit 1;
}
if [ $# -ne 4 ]; then print_usage_and_exit; fi;

if [ ! -n "$WORK_DIR" ]; then
	echo "bce: ERROR: Please, setup WORK_DIR variable before running ldv-core.";
	exit 1;
fi;
WORK_DIR=`readlink -f $WORK_DIR`;
if [ $? -ne 0 ]; then
        echo "bce: ERROR: Failed to read abs-path for working dir: \"$WORK_DIR\"."
        exit 1;
fi;
if [ ! -d "$WORK_DIR" ]; then
        echo "bce: ERROR: Working directory does not exists: \"$WORK_DIR\".";
        exit 1;
fi;

#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --cmdfile-out=*)
                	rcmdfileout=`echo $arg | sed 's/--cmdfile-out=//g'`
			if [ ! -n "$rcmdfileout" ]; then
				echo "bce: ERROR: Parameter \"--cmdfile-out=\" - is null. Setup it.";
			        exit 1;
			fi;
			cmdfileout=`readlink -f $rcmdfileout`;
			if [ $? -ne 0 ]; then
				echo "bce: ERROR: Failed to read abs-path for out cmd file: \"$cmdfileout\"."
			        exit 1;
			fi;
			if [ -f "$cmdfileout" ]; then
			        echo "bce: ERROR: Cmd file out already exists: \"$cmdfileout\".";
			        exit 1;
			fi;
		;;
                --basedir=*)
                	rbasedir=`echo $arg | sed 's/--basedir=//g'`
			if [ ! -n "$rbasedir" ]; then
				echo "bce: ERROR: Parameter \"--basedir\" - is null. Setup it.";
			        exit 1;
			fi;
			basedir=`readlink -f $rbasedir`;
			if [ $? -ne 0 ]; then
				echo "bce: ERROR: Failed to read abs-path for basedir: \"$rbasedir\"."
			        exit 1;
			fi;
			if [ ! -d "$basedir" ]; then
			        echo "bce: ERROR: Basedir not exists: \"$basedir\".";
			        exit 1;
			fi;
                ;;
                --env=*)
                	renv=`echo $arg | sed 's/--env=//g'`
			if [ ! -n "$renv" ]; then
				echo "bce: ERROR: Parameter \"--env\" - is null. Setup it.";
			        exit 1;
			fi;
			env=`readlink -f $renv`;
			if [ $? -ne 0 ]; then
				echo "bce: ERROR: Failed to read abs-path for environment dir: \"$renv\"."
			        exit 1;
			fi;
			if [ ! -d "$env" ]; then
			        echo "bce: ERROR: Environment dir not exists: \"$env\".";
			        exit 1;
			fi;
                ;;
                --driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				echo "bce: ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
			driver=`readlink -f $rdriver`;
			if [ $? -ne 0 ]; then
				echo "bce: ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
			        exit 1;
			fi;
# TODO: add for dirs	if [ ! -d "$driver" -a ! -f "$driver" ]; then
			if [ ! -d "$driver" ]; then
			        echo "bce: ERROR: Driver unpacked sources not exists: \"$driver\".";
			        exit 1;
			fi;
                ;;
                *)
                        echo "bce: ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done
#---------------------------------------------------------------------------

NEXT_BASE_DIR=$WORK_DIR/$BCE_TEMPDIR_NAME;
mkdir $NEXT_BASE_DIR;
if [ $? -ne 0 ]; then
	echo "ERROR: Failed to create next tempdir: \"$NEXT_BASE_DIR\".";
	exit 1;
fi;
NEXT_DIRVER_DIR=$NEXT_BASE_DIR/$DRIVER_DIR_NAME;
#
# copy driver sources for next instrument
#
cp -r $driver $NEXT_DIRVER_DIR;
if [ $? -ne 0 ]; then
	bce_print "ERROR: Failed to copy driver sources for next instrument to: \"$NEXT_DIRVER_DIR\"."
	exit 1;
fi;

echo "<?xml version=\"1.0\"?>" > $cmdfileout;
echo "<cmdstream>" >> $cmdfileout;
echo -e "\t<basedir>$NEXT_BASE_DIR</basedir>" >> $cmdfileout;

#
# try to find "scripts/Makefile.build" in kernel source directory
# 
KERNEL_MAKEFILE_BUILD=$env"/scripts/Makefile.build";
if [ ! -f "$KERNEL_MAKEFILE_BUILD" ]; then
	bce_print "Can't find kernel makefile: \"$KERNEL_MAKEFILE_BUILD\".";
	exit 1;
fi;

#
# copy Makefile for last recovery...
#
KERNEL_BACKUP_MAKEFILE_BUILD=$env"/scripts/Makefile.build.bcebackup";
cp $KERNEL_MAKEFILE_BUILD $KERNEL_BACKUP_MAKEFILE_BUILD;
if [ $? -ne 0 ]; then
	bce_print "Failed to copy Makefile: \"$KERNEL_MAKEFILE_BUILD\" to \"$KERNEL_BACKUP_MAKEFILE_BUILD\".";
	exit 1;
fi;
#
# test if a FILE exists and write permission is granted or not
#
if [ ! -w "$KERNEL_MAKEFILE_BUILD" ]; then
	bce_print "Kernel Makefile.build: \"$KERNEL_MAKEFILE_BUILD\" -  not writable.";
	exit 1;
fi;

#*****************************************************************************************
# hack to export trace in kernel ./scripts/Makefile.build:
#
# I. replace string
# cmd_cc_o_c = $(CC) $(c_flags) -c -o $(@D)/.tmp_$(@F) $<
# with
# cmd_cc_o_c = echo "CFLAGS_FOR_FILE = "$@ >> $(BUILDFILE); echo "CFLAGS = "'$(c_flags)' >> $(BUILDFILE); $(CC) $(c_flags) -c -o $(@D)/.tmp_$(@F) $<
#
#
# II. replace string
#                         cat $m;, echo kernel/$m;))
# with
#                         cat $m;, echo "MODULE = $m" >> $(BUILDFILE); echo kernel/$m;))
#
#
# III. replace string
# cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps) $(cmd_secanalysis)
# with
# cmd_link_multi-y = echo "LDFLAGS = $(ld_flags)" >> $(BUILDFILE); echo "DEPS = $(link_multi_deps)">> $(BUILDFILE);$(LD) $(ld_flags) -r -o $@ $(link_multi_deps) $(cmd_secanalysis)
#
#***************************************************************************************
# I.
sed -i -e "s/^cmd_cc_o_c = \$(CC) \$(c_flags) -c -o \$(@D)\/\.tmp_\$(@F) \$</cmd_cc_o_c = $XGCC \$< \$(c_flags) -c -o \$(@D)\/\$(@F) >> \$(BUILDFILE); \$(CC) \$(c_flags) -c -o \$(@D)\/.tmp_\$(@F) \$</g" $KERNEL_MAKEFILE_BUILD;
if [ $? -ne 0 ]; then
	bce_print "Failed patch (I. stage) Makefile: \"$KERNEL_MAKEFILE_BUILD\".";
	cp $KERNEL_BACKUP_MAKEFILE_BUILD $KERNEL_MAKEFILE_BUILD;
	if [ $? -ne 0 ]; then bce_print "ATTENSION: Can't recover Makefile.build !"; fi;
	exit 1;
fi;
sed -i -e "s/^cmd_link_multi-y = \$(LD) \$(ld_flags) -r -o \$@ \$(link_multi_deps) \$(cmd_secanalysis)/cmd_link_multi-y = $XGCC \$(ld_flags) \$(link_multi_deps) -r -o \$@ >> \$(BUILDFILE); \$(LD) \$(ld_flags) -r -o \$@ \$(link_multi_deps) \$(cmd_secanalysis)/g" $KERNEL_MAKEFILE_BUILD;
if [ $? -ne 0 ]; then
	bce_print "Failed patch (III. stage) Makefile: \"$KERNEL_MAKEFILE_BUILD\".";
	cp $KERNEL_BACKUP_MAKEFILE_BUILD $KERNEL_MAKEFILE_BUILD;
	if [ $? -ne 0 ]; then bce_print "ATTENSION: Can't recover Makefile.build !"; fi;
	exit 1;
fi;
#
# Ok, and now try to start make for driver (driver must be prepared for make)
#
# TRACE_FILE=$basedir/$TRACE_FILENAME;
KERNEL_COMPILE_LOG=$basedir/$KERNEL_COMPILE_LOG_FILENAME;
cd $env;
if [ $? -ne 0 ]; then
	bce_print "Failed change dir to: \"$env\".";
	cp $KERNEL_BACKUP_MAKEFILE_BUILD $KERNEL_MAKEFILE_BUILD;
	if [ $? -ne 0 ]; then bce_print "ATTENSION: Can't recover Makefile.build !"; fi;
	exit 1;
fi;

echo "make $driver/ BUILDFILE=$cmdfileout > $KERNEL_COMPILE_LOG 2>&1;"
make $driver/ BUILDFILE=$cmdfileout > $KERNEL_COMPILE_LOG 2>&1;
if [ $? -ne 0 ]; then
	bce_print "Error during driver compile. See compile log for more details: \"$KERNEL_COMPILE_LOG\".";
	cp $KERNEL_BACKUP_MAKEFILE_BUILD $KERNEL_MAKEFILE_BUILD;
	if [ $? -ne 0 ]; then bce_print "ATTENSION: Can't recover Makefile.build !"; fi;
	exit 1;
fi;
#
# !!! recover Makefile in all cases !!!
#
cp $KERNEL_BACKUP_MAKEFILE_BUILD $KERNEL_MAKEFILE_BUILD;
if [ $? -ne 0 ]; then 
	bce_print "ATTENSION: Can't recover Makefile.build !"; 
	exit 1; 
fi;

#
# fix format - add one tab before <cc> and <ld> tags and...
#
sed -i -e 's/ldv_tempdir/bce_tempdir/g' $cmdfileout; 
sed -i -e 's/^<cc/\t<cc/g' $cmdfileout; 
sed -i -e 's/^<\/cc/\t<\/cc/g' $cmdfileout; 
sed -i -e 's/^<ld/\t<ld/g' $cmdfileout; 
sed -i -e 's/^<\/ld/\t<\/ld/g' $cmdfileout; 
sed -i -e 's/^  <in>/\t\t<in>/g' $cmdfileout; 
sed -i -e 's/^  <cwd>/\t\t<cwd>/g' $cmdfileout; 
sed -i -e 's/^  <out>/\t\t<out>/g' $cmdfileout; 
sed -i -e 's/^  <opt>/\t\t<opt>/g' $cmdfileout; 

#
# Is it single-driver ?
#
# TODO: 1. find MODULE - test if LDFLAGS_FOR_FILE not exists for this module then add it
#
IS_WITHOUT_LD=`grep -E '<ld id="[0-9]+">' $cmdfileout`;
# driver single - then fix trace file - add <ld> for all cc
if [ ! -n "$IS_WITHOUT_LD" ]; then
	cat $cmdfileout | while read line; do
		CC_FILE=`echo $line | grep -E '<out>.*</out>'`;
		if [ -n "$cmdfileout" ]; then
			CC_FILE=`echo $CC_FILE | sed 's/<out>//' | sed 's/<\/out>//'`;
#
# if c-file for this not existst then we pass it
#
			if [ -f "`echo $CC_FILE | sed 's/\.o$/.c/'`" ]; then
				echo -e "\t<ld id=\"1\">" >> $cmdfileout;
				echo -e "\t\t<in>$CC_FILE</in>" >> $cmdfileout;
				echo -e "\t\t<out>"`echo $CC_FILE | sed 's/\.o$/.ko/'`"</out>" >> $cmdfileout;
				echo -e "\t</ld>" >> $cmdfileout;
			fi;
		fi;
	done;
fi;

echo -e "</cmdstream>" >> $cmdfileout;

#
# fix id numbers
#
k=1;
cat $cmdfileout | while read iline; do 
	if [ -n "`echo $iline | grep '<cc id='`" ]; then 
		sed -i -e "s/$iline/<cc id=\"$k\">/" $cmdfileout;
		k=`expr $k + 1`;
	elif [ -n "`echo $iline | grep '<ld id='`" ]; then
		sed -i -e "s/$iline/<ld id=\"$k\">/" $cmdfileout;
		k=`expr $k + 1`;
	fi; 
done;

#cat $CMD_XML;
exit;
