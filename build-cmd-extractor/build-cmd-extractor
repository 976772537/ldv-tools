#!/bin/sh

BCE_TEMPDIR_NAME="bce_tempdir"
DRIVER_DIR_NAME="driver"
TEMP_DRIVER_DIR_NAME="tempdir_driver"

KERNEL_ENV_PREFIX=".ldv\/ldv\/envs\/";

GLOBAL_LOG="bce_global.log";
KERNEL_COMPILE_LOG_FILENAME="ckc.log";
TRACE_FILENAME="build_trace";
XML_FILENAME="cmd.xml";
LOG_PREFIX="build-cmd-extractor: ";
LOG_MIRROR_TO_CONSOLE=1;

KERNEL_LEVEL=0;

LDV_HOME=`readlink -f \`dirname $0\`/../`;
BCE_DIRNAME="build-cmd-extractor";
BCE_DIR=$LDV_HOME/$BCE_DIRNAME;

ldv_print() {
	if [ $LDV_DEBUG -le 0 ]; then if [ -n "`echo $1 | grep WARNING`" -o -n "`echo $1 | grep NORMAL`" -o -n "`echo $1 | grep INFO`" -o -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 10 ]; then if [ -n "`echo $1 | grep INFO`" -o -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 20 ]; then if [ -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 30 ]; then if [ -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 40 ]; then if [ -n "`echo $1 | grep ALL`" ]; then return; fi; fi;

	if [ $LDV_DEBUG -eq 40 ]; then 
		echo $LOG_PREFIX"TRACE: Trace mode on. Press any key to cnotinue...";
		read;
	fi;
	echo "$LOG_PREFIX$1";
}
if [ ! -n "$LDV_DEBUG" ]; then LDV_DEBUG=10; fi;
#---------------------------------------------------------------------------
#
# read and test environment variables
#
print_usage_and_exit() {
		ldv_print "NORMAL: USAGE: LDV_DEBUG=level WORK_DIR=workdir build-cmd-extractor --basedir=basedir --env=kerneldir --driver=driverpath --cmdfile-out=xmlfile";
		exit 1;
}
if [ $# -ne 4 ]; then print_usage_and_exit; fi;
if [ ! -n "$WORK_DIR" ]; then
	ldv_print "ERROR: Please, setup WORK_DIR variable before running ldv-core.";
	exit 1;
fi;
WORK_DIR=`readlink -f $WORK_DIR`;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Failed to read abs-path for working dir: \"$WORK_DIR\".";
        exit 1;
fi;
if [ ! -d "$WORK_DIR" ]; then
        ldv_print "ERROR: Working directory does not exists: \"$WORK_DIR\".";
        exit 1;
fi;

#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --cmdfile-out=*)
                	rcmdfileout=`echo $arg | sed 's/--cmdfile-out=//g'`
			if [ ! -n "$rcmdfileout" ]; then
				ldv_print "ERROR: Parameter \"--cmdfile-out=\" - is null. Setup it.";
			        exit 1;
			fi;
			cmdfileout=$rcmdfileout;
		;;
                --basedir=*)
                	basedir=`echo $arg | sed 's/--basedir=//g'`
			if [ ! -n "$basedir" ]; then
				ldv_print "ERROR: Parameter \"--basedir\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
                --env=*)
                	renv=`echo $arg | sed 's/--env=//g'`
			if [ ! -n "$renv" ]; then
				ldv_print "ERROR: Parameter \"--env\" - is null. Setup it.";
			        exit 1;
			fi;
			env=`readlink -f $renv`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for environment dir: \"$renv\"."
			        exit 1;
			fi;
			if [ ! -d "$env" ]; then
			        ldv_print "ERROR: Environment dir not exists: \"$env\".";
			        exit 1;
			fi;
                ;;
                --driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
			driver=`readlink -f $rdriver`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
			        exit 1;
			fi;
			if [ ! -d "$driver" ]; then
			        ldv_print "ERROR: Driver unpacked sources not exists: \"$driver\".";
			        exit 1;
			fi;
		;;
 		--driver-kernel)
                	KERNEL_LEVEL=1;
                ;;
                *)
                        ldv_print "ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done
#---------------------------------------------------------------------------

if [ $KERNEL_LEVEL -eq 0 ]; then
	ldv_print "NORMAL: Extern driver mode.";
else
	ldv_print "NORMAL: In-kernel driver mode.";
fi;

if [ ! -n $basedir ]; then
	ldv_print "ERROR: Option \"$basedir\" is empty.";
	print_usage_and_exit;	
fi;

TEMP_DIR=$WORK_DIR/$basedir;
if [ ! -d $TEMP_DIR ]; then
	mkdir $TEMP_DIR;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed to create next tempdir: \"$TEMP_DIR\".";
		exit 1;
	fi;
else
	ldv_print "WARNING: Temp directory: \"$TEMP_DIR\" - already exists. Reuse it.";
fi;
DRIVER_DIR=$TEMP_DIR/$DRIVER_DIR_NAME;
#
# copy driver sources
#
if [ $KERNEL_LEVEL -eq 1 ]; then driver=$env; fi;
cp -r $driver $DRIVER_DIR;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Failed to copy driver sources for next instrument to: \"$DIRVER_DIR\"."
	exit 1;
fi;

echo "<?xml version=\"1.0\"?>" > $cmdfileout;
echo "<cmdstream>" >> $cmdfileout;
echo "<basedir>$driver</basedir>" >> $cmdfileout;


#
# try to find "scripts/Makefile.build" in kernel source directory
# 
#KERNEL_MAKEFILE_BUILD=$env"/scripts/Makefile.build";
#if [ ! -f "$KERNEL_MAKEFILE_BUILD" ]; then
#	ldv_print "ERROR: Can't find kernel makefile: \"$KERNEL_MAKEFILE_BUILD\".";
#	exit 1;
#fi;

KERNEL_COMPILE_LOG=$TEMP_DIR/$KERNEL_COMPILE_LOG_FILENAME;
cd $env;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Failed change dir to: \"$env\".";
	exit 1;
fi;

#
# find correct Makefile in driver dir...
#
#
# When kernel make driver:
#    1     It find Kbuid on top level dir
#    1.1   If Kbuild exists - it test for obj-m...
#    1.2   If Kbuild contains obj-m then kernel start to build this driver and exit
#    2     It find Makefile on top level dir
#    2.1   If Makefile exists - it test for obj-m...
#    2.2   If Makefile contains obj-m, then kernel start to build this driver and exit
#    3     Kernel print error
#
if [ $KERNEL_LEVEL -eq 0 ]; then
	ldv_print "INFO: Try to find Kbuild with obj-m...";
	FIND_KBUILD_FILE_OPERATION=`find $driver -regex '.*/Kbuild$' -type f`;
	for l in $FIND_KBUILD_FILE_OPERATION; do
		ldv_print "INFO: next Kbuild: \"$l\".";
		if [ -n "`grep obj-m $l`" ]; then
			CORRECT_MAKEFILE=`readlink -f $l`;
			if [ $? -ne 0 ]; then ldv_print "ERROR: Can't get abs path for driver Kbuild file: \"$l\"."; exit 1; fi;
			ldv_print "INFO: Correct Kbuild file is: \"$l\".";
			break;
		fi;
	done;
	if [ ! -n "$CORRECT_MAKEFILE" ]; then
		ldv_print "INFO: Kbuild not found.";
		ldv_print "INFO: Try to find Makefile with obj-m...";
		FIND_MAKEFILE_FILE_OPERATION=`find $driver -regex '.*/Makefile$' -type f`;
		for l in $FIND_MAKEFILE_FILE_OPERATION; do
			ldv_print "INFO: next Makefile: \"$l\".";
			if [ -n "`grep obj-m $l`" ]; then
				CORRECT_MAKEFILE=`readlink -f $l`;
				if [ $? -ne 0 ]; then ldv_print "ERROR: Can't get abs path for driver Makefile: \"$l\"."; exit 1; fi;
	        	        ldv_print "INFO: Correct Makefile is: \"$l\".";
				break;
			fi;
		done;
	fi;
	if [ ! -n "$CORRECT_MAKEFILE" ]; then
		ldv_print "ERROR: Can't find correct Makefile or Kbuild file.";
		exit 1;
	fi;
	DRIVER_MAKEFILE_DIR=`dirname $CORRECT_MAKEFILE`;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can't get dirname for correct makefile: \"$DRIVER_MAKEFILE\".";
		exit 1;
	fi;
fi;


ldv_print "DEBUG: Try to call kernel make..."
if [ $KERNEL_LEVEL -eq 0 ]; then
	ldv_print "DEBUG: make $DRIVER_MAKEFILE_DIR/ BUILDFILE=$cmdfileout > $KERNEL_COMPILE_LOG 2>&1;"
	BUILDFILE=$cmdfileout make V=1 M=$DRIVER_MAKEFILE_DIR/ modules > $KERNEL_COMPILE_LOG 2>&1
else
	ldv_print "DEBUG: make modules BUILDFILE=$cmdfileout > $KERNEL_COMPILE_LOG 2>&1;"
	BUILDFILE=$cmdfileout make V=1 > $KERNEL_COMPILE_LOG 2>&1
fi;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Error during driver compile. See compile log for more details: \"$KERNEL_COMPILE_LOG\".";
	exit 1;
fi;

#
# restore driver sources
#
TEMP_DRIVER_DIR=$TEMP_DIR/$TEMP_DRIVER_DIR_NAME;
mv $driver $TEMP_DRIVER_DIR
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't move driver dir:\"$driver\" to \"$TEMP_DRIVER_DIR\".";
	exit 1;
fi;

mv $DRIVER_DIR $driver
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't copy driver dir: \"$DRIVER_DIR\".";
	exit 1;
fi;

mv $TEMP_DRIVER_DIR $DRIVER_DIR
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't move driver dir:\"$TEMP_DRIVER_DIR\" to \"$DRIVER_DIR\".";
	exit 1;
fi;


echo "</cmdstream>" >> $cmdfileout;
cmdfileout_tmp=$cmdfileout"_tmp";
touch $cmdfileout_tmp;
if [ $? -ne 0 ] ; then 
	ldv_print "ERROR: Can't create temp cmdfile.";
	exit 1;
fi;

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Rewrite next 12 strings 
#  time.... time!!!!! why?
#
# `` - Is it create new shell process?
#     Solve this problem in this and other
#     tools!!!!!!!!!
#
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
k=1;
cat $cmdfileout | while read iline; do
	if [ -n "`echo $iline | grep '<cc id='`" ]; then
		echo "<cc id=\"$k\">" >> $cmdfileout_tmp;
		k=`expr $k + 1`;
	elif [ -n "`echo $iline | grep '<ld id='`" ]; then
		echo "<ld id=\"$k\">" >> $cmdfileout_tmp;
		k=`expr $k + 1`;
	else
		echo "$iline" >> $cmdfileout_tmp;
	fi;
done;
mv $cmdfileout_tmp $cmdfileout;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't replace cmdfile with temp cmdfile.";
	exit 1;
fi;

#
# fix format - add one tab before <cc> and <ld> tags and...
#
#sed -i -e 's/ldv_tempdir/bce_tempdir/g' $cmdfileout; 
sed -i -e 's/^<cc/\t<cc/g' $cmdfileout; 
sed -i -e 's/^<\/cc/\t<\/cc/g' $cmdfileout; 
sed -i -e 's/^<ld/\t<ld/g' $cmdfileout; 
sed -i -e 's/^<\/ld/\t<\/ld/g' $cmdfileout; 
sed -i -e 's/^<in>/\t\t<in>/g' $cmdfileout; 
sed -i -e 's/^<cwd>/\t\t<cwd>/g' $cmdfileout; 
sed -i -e 's/^<out>/\t\t<out>/g' $cmdfileout; 
sed -i -e 's/^<out check="true">/\t\t<out check="true">/g' $cmdfileout; 
sed -i -e 's/^<opt>/\t\t<opt>/g' $cmdfileout; 
sed -i -e 's/^<module>/\t\t<module>/g' $cmdfileout; 
sed -i -e 's/^<basedir>/\t<basedir>/g' $cmdfileout; 

ldv_print "NORMAL: Command stream is successfully extracted.";
exit;

