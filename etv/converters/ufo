use Env qw(LDV_DEBUG LDV_CPACHECKER_ET_CONV_DEBUG);
sub get_loc_and_val($);

my %src_map;
my $str = shift(@et_array);
my $main = 'main';
if (defined($str))
{
	if ($str =~ /^Entry point: (.*)\(\)$/)
	{
		$main = $1;

		$str = shift(@et_array);
		if ($str =~ /"^=======(.*)=======$/)
		{
			print_debug_trace("Process '$1' UFO source file");
		}
		my $src_cur = '';
		my $src_line_cur = 0;
		my $cil_line_cur = 1;
		while (scalar(@et_array))
		{
			$str = shift(@et_array);
			chomp($str);
			last if ($str eq "==============");
			if ($str =~ /^#line (\d+) "([^"]+)"$/)
			{
				$src_line_cur = $1;
				$src_cur = $2;
			}
			elsif ($str =~ /^#line (\d+)$/)
			{
				$src_line_cur = $1;
			}
			else
			{
				$src_map{$cil_line_cur} = {
					'file' => $src_cur,
					'line' => $src_line_cur,
					'text' => ": " . $str . "\n"};
				$src_line_cur++;
			}
			$cil_line_cur++;
		}
	}
	else
	{
		unshift(@et_array, $str);
	}
}

my @et_raw = @et_array;
push(@et_conv_array, "Error trace common format v0.1\n");
my @current_function;
while (@et_raw)
{
	$str = shift(@et_raw);
	chomp($str);
	next if ($str =~ /^\s*$/);
	my ($src, $line, $val, $action) = get_loc_and_val($str);
	# source file (src), line in it (line), this line (val)
	# and what to do with string (action)
	next if ($val =~ /^\s*$/);
	
	my $type = 'BLOCK';
	my $kind = '';
	my $skip_reason = '';
	if($action =~ /^enter:/)
	{
		$type = 'CALL';
		if($POSTMATCH =~ /^\s*(.*)\s*$/)
		{
			$val = "$1";
			my $new_func = "$line $src BLOCK   : $val";
			my $arr_num = @current_function;
			if($arr_num)
			{
				my $curr_func = $current_function[$arr_num - 1];
				push(@current_function, $new_func);
				if($curr_func =~ /^(\d+) (.*) BLOCK   : (.*)$/)
				{
					my ($tmp_line, $tmp_src, $tmp_val) = ($1, $2, $3);
					push(@et_conv_array, "$tmp_line $tmp_src BLOCK   : Call in function '$tmp_val' of function");
				}
			}
			else
			{
				push(@current_function, $new_func);
			}
		}
		$val = ": $val";
	}
	elsif($action =~ /^exit:/)
	{
		$type = 'RETURN';
		if($val =~ /return\s*(.*)$/)
		{
			$val = ": $1";
			while($val =~ /^(.*)\((.*)\)(.*)$/)
			{
				$val = "$1$2$3";
			}
			$val = $1 if($val =~ /^(.*);$/);
		}
		$val = '' if ($val =~ /^:\s*$/);
		pop(@current_function);
	}
	elsif($action =~ /^in: /)
	{
		my $func_name = $POSTMATCH;
		if($func_name =~ /^(.*) ELSE/)
		{
			$func_name = $1;
			$type = 'ASSUME';
			$val = ': ELSE in this comparison';
		}
		elsif($func_name =~ /^(.*) THEN/)
		{
			$func_name = $1;
			$type = 'ASSUME';
			$val = ': THEN in this comparison';
		}
		else
		{
			$type = 'BLOCK';
			$val = $val;
		}
		my $arr_size = @current_function;
		if($current_function[$arr_size - 1] =~ /^\d+ $src BLOCK   : $func_name/)
		{
			$current_function[$arr_size - 1] = "$line $src BLOCK   : $func_name";
		}
		else
		{
			my $first_line = $current_function[$arr_size - 1];
		}
	}
	push(@et_conv_array, join(' ', ($line, $src, $type, $kind, $skip_reason, $val)));
}
my $array_size = @et_conv_array;
for(my $i = 0; $i < $array_size; $i++)
{
	while(1)
	{
		if($et_conv_array[$i] =~ /^(.*\S)\s+$/)
		{
			$et_conv_array[$i] = $1;
		}
		elsif($et_conv_array[$i] =~ /^(.*\S)\s{2,}(\S.*)$/)
		{
			$et_conv_array[$i] = "$1 $2";
		}
		else
		{
			last;
		}
	}
}
{
no warnings 'redefine';
sub get_loc_and_val($)
{
	my $val = shift;
	my $line = '';
	my $action = '';
	if ($val =~ /^\/.*\/tmp_ufo.c:(\d+):/)
	{
		$line = $1;
		$action = $POSTMATCH;
		if($src_map{$line})
		{
			my $file = $src_map{$line}{'file'};
			$val = $src_map{$line}{'text'};
			my $src = '"' . $file . '"';
			$line = $src_map{$line}{'line'};
			while($val =~ /^:(.*):(.*)$/)
			{
				$val = ": $1 $2";
			}
			return ($src, $line, $val, $action);
		}
	}
	return ('', $line, '', $action);
}
}
