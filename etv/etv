#! /usr/bin/perl -w

################################################################################
# Copyright (C) 2010-2012
# Institute for System Programming, Russian Academy of Sciences (ISPRAS).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

use English;
use Env qw(LDV_DEBUG LDV_ETV_DEBUG);
use FindBin;
use Getopt::Long qw(GetOptions);
Getopt::Long::Configure qw(posix_default no_ignore_case);
use strict;
use Tie::Hash::Indexed;

# Add some local Perl packages.
use lib("$FindBin::RealBin/../shared/perl");

use Text::Highlight;

# Add some nonstandard local Perl packages.
use ETV::Library;
use LDV::Utils qw(vsay print_debug_warning print_debug_normal print_debug_info
  print_debug_debug print_debug_trace print_debug_all get_debug_level);


################################################################################
# Subroutine prototypes.
################################################################################

# Replace some characters into a given file path to make a correct link from it.
# Note that it should be accepted by jquery as well (see
# http://api.jquery.com/category/selectors/).
# args: a file path.
# retn: a link corresponding to the given file path.
sub convert_file_to_link($);

# Obtain html code that allows local expanding of entities.
# args: current id.
# retn: string with corresponding html code.
sub get_expand_local($);

# Obtain link to source code if so and indentation spaces corresponding to a
# given indentation level.
# args: names of reffered file and line, current indentation level,
#       visited locations.
# retn: string with link to source code and indentation spaces.
sub get_line_title($$$$);

# Process command-line options. To see detailed description of these options
# run script with --help option.
# args: no.
# retn: hash corresponding to options.
sub get_opt();

# For a given node obtain a list of files required for error trace
# visualization.
# args: node of error trace hash, requirements hash.
# retn: list of requirements.
sub get_required_files($$);

# Print help message on the screen and exit.
# args: no.
# retn: nothing.
sub help();

# Process a file containing all source code related with an error trace
# specified.
# args: corresponding file handler.
# retn: hash with information on files, lines, comments, etc.
sub process_referred_source_code($);

# Make visualization of a error trace specified.
# args: root node of error trace hash, information on source code files,
#       visualization information, current id.
# retn: reference to array containing error trace visualized.
sub visualize_et($$$$);

# Make visualization of a error trace node specified.
# args: node of error trace hash, information on source code files,
#       visualization information, current id, visited locations.
# retn: reference to array containing an error trace node visualized.
sub visualize_et_node($$$$$);


################################################################################
# Main section.
################################################################################

# Obtain the debug level.
get_debug_level('etv', $LDV_DEBUG, $LDV_ETV_DEBUG);

print_debug_debug("Process command-line options");
my $opts = get_opt();

print_debug_debug("Parse a error trace specified");
my $et = ETV::Library::parse_et_fh($opts->{'fh in'});

# There are two modes of error trace visualizer work: collect requirements or
# visualize error trace.
if ($opts->{'fh required files'})
{
  # Hash for requirements (to atomatically remove duplicates).
  my %required_files;

  print_debug_debug("Obtain requirements for a specified error trace");
  get_required_files($et, \%required_files);

  $OUTPUT_FIELD_SEPARATOR = "\n";
  print({$opts->{'fh required files'}} keys(%required_files));
}
else
{
  my $referred_source_code = {};

  if ($opts->{'fh referred source code'})
  {
    print_debug_debug("Process source code files related with a given error"
      . " trace");
    $referred_source_code
      = process_referred_source_code($opts->{'fh referred_source_code'});
  }

  print_debug_debug("Visualize an error trace specified");
  my $etv = visualize_et($et, $referred_source_code, {'indent' => 0}
    , {'id' => 0});

  $OUTPUT_FIELD_SEPARATOR = '';
  print({$opts->{'fh out'}} @{$etv});
}

print_debug_debug("Close file handlers");
close($opts->{'fh in'})
  or die("Can't close file handler for '" . $opts->{'in'} . "': $ERRNO\n");
if ($opts->{'fh required files'})
{
  close($opts->{'fh required files'})
    or die("Can't close file handler for '" . $opts->{'required files'} . "':"
      . " $ERRNO\n");
}
else
{
  close($opts->{'fh out'})
    or die("Can't close file handler for '" . $opts->{'out'} . "':"
      . " $ERRNO\n");
  if ($opts->{'fh referred source code'})
  {
    close($opts->{'fh referred source code'})
      or die("Can't close file handler for '" . $opts->{'referred source code'}
        . "': $ERRNO\n");
  }
}

print_debug_normal("Make all successfully");


################################################################################
# Subroutines.
################################################################################

sub convert_file_to_link($)
{
  my $file_path = shift;

  # Replace slashes and points with '_'.
  $file_path =~ s/\//_/g;
  $file_path =~ s/\./_/g;

  return $file_path;
}

sub get_expand_local($)
{
  my $id = shift;

  return "<a id='ETVExpand$id' href='#' class='ETVExpand'>-</a>";
}

sub get_line_title($$$$)
{
  my $file = shift;
  my $line = shift;
  my $indent_level = shift;
  my $locs = shift;

  my @line_title;

  # In accordance with empirical study usually less then 10^5 numbers are used
  # as line numbers for drivers verified. So use corresponding format.
  # Print a corresponding source code line number as a link to a place in source
  # code at the begining of each line.
  push(@line_title, "<span class='ETVLN'>");
  if ($line)
  {
    my $line_str = sprintf("%5d", $line);

    # Generate a link to a corresponding source code if so.
    if ($file)
    {
      $file = convert_file_to_link($file);
      # Make just a line number itself as a link to avoid underlining of spaces.
      $line_str =~ s/(\d+)/<a href='#$file:$line'>$1<\/a>/;
      # Remember that we do reference to the given location.
      ${$locs}{$file}{$line} = 1;
    }

    push(@line_title, $line_str);
  }
  else
  {
    push(@line_title, '     ');
  }
  # Print one extra space at the end to separate more clearly a line number from
  # a following text.
  push(@line_title, " </span>");

  # Print identation spaces.
  push(@line_title, "<span class='ETVI'>");
  for (my $i = 1; $i <= $indent_level; $i++)
  {
    # Two extra spaces will be print for each next indentation level.
    push(@line_title, '  ');
  }
  push(@line_title, "</span>");

  return \@line_title;
}

sub get_opt()
{
  if (scalar(@ARGV) == 0)
  {
    warn("No options were specified through the command-line. Please see help"
      . " to understand how to use this tool");
    help();
  }
  print_debug_trace("Options '@ARGV' were passed through the command-line");

  my ($help, $in, $out, $required_files, $referred_source_code);
  my ($fh_in, $fh_out, $fh_required_files, $fh_referred_source_code);

  unless (GetOptions(
    'help|h' => \$help,
    'original-error-trace|c=s' => \$in,
    'visualized-error-trace|o=s' => \$out,
    'required-files|r=s' => \$required_files,
    'referred-source-code|s=s' => \$referred_source_code))
  {
    warn("Incorrect options may completely change the meaning! Please see help"
      . " to understand how to use this tool");
    help();
  }

  help() if ($help);

  unless ($in)
  {
    warn("You should specify a error trace to be processed by means of"
      . "command-line option --original-error-trace (-c)");
    help();
  }

  open($fh_in, '<', "$in")
    or die("Can't open file '$in' specified through --original-error-trace (-c)"
      . " for read: $ERRNO");
  print_debug_debug("Error trace to be processed is '$in'");

  unless ($out or $required_files)
  {
    warn("You should specify command line option either"
      . " --visualized-error-trace (-o) or --required-files");
    help();
  }

  if ($out)
  {
    open($fh_out, '>', $out)
      or die("Can't open file '$out' specified through --visualized-error-trace"
        . " (-o) for write: $ERRNO");
    print_debug_debug("A proccessed error trace will be put to '$out'");

    if ($referred_source_code)
    {
      open($fh_referred_source_code, '<', $referred_source_code)
        or die("Can't open file '$referred_source_code' specified through"
          . " --referred-source-code (-s) for read: $ERRNO");
      print_debug_debug("Related to the given error trace source code will be"
        . " read from '$referred_source_code'");
    }
  }
  else
  {
    open($fh_required_files, '>', $required_files)
      or die("Can't open file '$required_files' specified through"
        . " --required-files (-r) for write: $ERRNO");
    print_debug_debug("Paths to files required by the given error trace will be"
      . " put to '$required_files'");
  }

  print_debug_debug("Command-line options were processed successfully");

  return {'in' => $in
    , 'fh in' => $fh_in
    , 'out' => $out
    , 'fh out' => $fh_out
    , 'required files' => $required_files
    , 'fh required files' => $fh_required_files
    , 'referred source code' => $referred_source_code
    , 'fh referred source code' => $fh_referred_source_code};
}

sub get_required_files($$)
{
  my $node_ref = shift;
  my $required_files = shift;

  # This case can arise when a error trace is empty.
  return if (!$node_ref);

  my %node = %{$node_ref};

  # Skip initialization dependencies since they refer to a large amount of
  # sources. For instance, for BLAST error traces they refer to preprocessed
  # sources while for CPAchecker error traces they refer to a lot of kernel
  # headers.
  if ($node{'type'} and $node{'type'} eq 'CALL'
    and $node{'kind'} and $node{'kind'} eq 'INIT')
  {
    return;
  }

  # Keep a requirement of a node itself.
  # Don't take into account entities that haven't line specified.
  ${$required_files}{$node{'file'}} = 1 if ($node{'file'} and $node{'line'});

  # Walk throught node childrens.
  foreach my $child (@{$node{'children'}})
  {
    get_required_files($child, $required_files);
  }
}

sub help()
{
    print(STDERR << "EOM");

NAME
  $PROGRAM_NAME: visualizes error traces of different verifiers.

SYNOPSIS
  $PROGRAM_NAME [option...]

OPTIONS

  -h, --help
    Print this help and exit with 1.

  -c, --original-error-trace <path>
    <path> to a file with an error trace to be processed.

  -o, --visualized-error-trace <path>
    <path> to a file where a visualized error trace will be put.

  -r, --required-files <path>
    <path> to a file where a list of files required for error trace
    visualization will be put.

  -s, --referred-source-code <path>
    <path> to a file containing a program source code referred by a
    given error trace. It's optional. Without this option there won't
    be source code visualization. The file should contain a content of
    files with source code as is separated with:
    ---LDV---path/to/file/with/source/code---LDV---


ENVIRONMENT VARIABLES

  LDV_DEBUG
    It's an optional environment variable that specifies a debug
    level. It uses the standard designatures to distinguish different
    debug information printings. Each next level includes all previous
    levels and its own messages.

  LDV_ETV_DEBUG
    Like LDV_DEBUG but it has more priority. It specifies a debug
    level just for this tool.

EOM

  exit(1);
}

sub process_referred_source_code($)
{
  my $fh_referred_source_code = shift;

  # A current location in a source code file processed.
  my $file_name;
  my $line_numb;

  # Create hashes for:
  # 1. Relations between file names, lines and their content as is.
  # 2. Model comments.
  # 3. Model function definitions.
  # 4. Driver environment generator comments.
  my %referred_source_code;
  my %model_comments;
  my %model_func_defs;
  my %deg_comments;
  while (<$fh_referred_source_code>)
  {
    my $line = $_;
    chomp($line);

    # Each source code file should have such the header:
    # ---LDV---path/to/file/with/source/code---LDV---
    if ($line =~ /^---LDV---(.*)---LDV---/)
    {
      $file_name = $1;
      print_debug_trace("File '$file_name' is related with a error trace"
        . " visualized");
      $line_numb = 1;
      next;
    }

    print_debug_warning("Source code files related with a error trace processed"
      . " have incorrect format. No file name is specified by means of"
      . " '---LDV---path/to/file/with/source/code---LDV---'")
      unless ($file_name);

    if ($line =~ /LDV_COMMENT/)
    {
      # Read model comments.
      foreach my $model_comment_type (('LDV_COMMENT_ASSERT'
        , 'LDV_COMMENT_CHANGE_STATE'
        , 'LDV_COMMENT_MODEL_FUNCTION_DEFINITION'
        , 'LDV_COMMENT_MODEL_FUNCTION_CALL'
        , 'LDV_COMMENT_MODEL_STATE'
        , 'LDV_COMMENT_OTHER'
        , 'LDV_COMMENT_RETURN'))
      {
        if ($line =~ /^\s*\/\*\s*$model_comment_type\s*/)
        {
          if ($POSTMATCH !~ /\*\/\s*$/)
          {
            print_debug_warning("Model comment '$line' has incorrect format");
            next;
          }

          my $comment = $PREMATCH;
          print_debug_trace("Catch model comment '$comment' corresponding to '$model_comment_type'");

          my %comment_attrs;

          # Read comment attributes. They should be in the format:
          # (attr1 = 'attr1 value', attr2 = 'attr2 value', ...)
          # Note that there may be ')' inside ''.
          if ($comment =~ /\((.*')\s*(?=\))\)\s*/)
          {
            my $attr_all = $1;
            $comment = $POSTMATCH;

            my @attrs = split(/,/, $attr_all);
            # Read attribute name and value for each attribute.
            foreach my $attr (@attrs)
            {
              # Attributes must have the correct format.
              if ($attr =~ /^([^\s]+)\s*=\s*'([^']*)'\s*$/)
              {
                $comment_attrs{$1} = $2;
                print_debug_trace("Read model comment attibute '$1=$2'");
              }
              else
              {
                print_debug_warning("Model comment attribute '$attr' has incorrect format");
              }
            }
          }

          $model_comments{$file_name}{$line_numb}
            = {'type' => $model_comment_type, 'comment' => $comment, 'attrs' => \%comment_attrs};

          # Remember placement of model function definitions.
          if ($model_comment_type eq 'LDV_COMMENT_MODEL_FUNCTION_DEFINITION')
          {
            # All model functions definitions must have a name attribute.
            if ($comment_attrs{'name'})
            {
              $model_func_defs{$comment_attrs{'name'}} = {'src' => $file_name, 'line' => $line_numb};
            }
            else
            {
              print_debug_warning("Model function definition hasn't 'name' attribute");
            }
          }
        }
      }

      # Read driver environment generator comments.
      foreach my $deg_comment_type (('LDV_COMMENT_BEGIN_MAIN'
        , 'LDV_COMMENT_END_MAIN'
        , 'LDV_COMMENT_FUNCTION_CALL'
        , 'LDV_COMMENT_VAR_INIT'))
      {
        if ($line =~ /^\s*\/\*\s*$deg_comment_type\s*([^\*\/]*)\*\/\s*$/)
        {
          $deg_comments{$file_name}{$line_numb}
            = {'type' => $deg_comment_type, 'comment' => $1};
          print_debug_trace("Catch DEG comment '$1' corresponding to '$deg_comment_type'");
        }
      }
    }

    push(@{$referred_source_code{$file_name}}, "$line");
    $line_numb++;
  }

  return {'referred source code' => \%referred_source_code
    , 'model comments' => \%model_comments
    , 'model function definitions' => \%model_func_defs
    , 'deg comments' => \%deg_comments};
}

sub visualize_et($$$$)
{
  my $root_ref = shift;
  my $referred_source_code_ref = shift;
  my $visual_ref = shift;
  my $id_ref = shift;

  my %referred_source_code = %{$referred_source_code_ref};

  # Visualized representation for a given error trace.
  my @et_visualized = ();

  # Create a general visualization table with two cells. The first cell is for
  # an error trace itself and the second is for tabed related source code.
  push(@et_visualized
    , "<table id='ETVGeneralWindow'>"
    , "<tr>"
    , "  <td id='ETVErrorTraceWindow'>"
    , "    <div class='ETVGeneralWindowHeader'>"
    , "      Error trace"
    , "    </div>");

  # Print ETV menu.
  push(@et_visualized
    , "<div id='ETVErrorTraceHeader'>"
    # Menu for expanding of main entities.
    , "  <div id='ETVMenuMain'>"
    , "    <form>");
  tie my %main_entities, 'Tie::Hash::Indexed';
  %main_entities = (
      'ETVCallBody' => 'Function bodies'
    , 'ETVBlock' => 'Blocks');
  foreach my $entity_class (keys(%main_entities))
  {
    push(@et_visualized
    , "      <div class='ETVMenuMainItem'><input type='checkbox' id='${entity_class}Menu' />$main_entities{$entity_class}</div>")
  }
  push(@et_visualized
    , "    </form>"
    , "  </div>");
  # Others entities expanding is available through the advanced menu.
  push(@et_visualized
    , "  <ul id='ETVMenuOthers'>"
    , "    <li><div>Others...</div>"
    , "      <form style='display: none;'>");

  tie my %other_entities, 'Tie::Hash::Indexed';
  %other_entities = (
      'ETVIntellectualCallBody' => 'Function bodies without model function calls'
    , 'ETVCallInit' => 'Initialization function calls'
    , 'ETVCallInitBody' => 'Initialization function bodies'
    , 'ETVCallEntry' => 'Entry point'
    , 'ETVCallEntryBody' => 'Entry point body'
    , 'ETVCall' => 'Function calls'
    , 'ETVCallSkip' => 'Skipped function calls'
    , 'ETVCallFormalParamName' => 'Formal parameter names'
    , 'ETVDecl' => 'Declarations'
    , 'ETVAssume' => 'Assumes'
    , 'ETVAssumeCond' => 'Assume conditions'
    , 'ETVRet' => 'Returns'
    , 'ETVRetVal' => 'Return values'
    , 'ETVDEGInit' => 'DEG initialization'
    , 'ETVDEGCall' => 'DEG function calls'
    , 'ETVModelCall' => 'Model function calls'
    , 'ETVModelCallBody' => 'Model function bodies'
    , 'ETVModelAssert' => 'Model asserts'
    , 'ETVModelChangeState' => 'Model state changes'
    , 'ETVModelCallCall' => 'Model function function calls'
    , 'ETVModelCallCallBody' => 'Model function function bodies'
    , 'ETVModelRet' => 'Model returns'
    , 'ETVModelOther' => 'Model others'
    , 'ETVI' => 'Identation'
    , 'ETVLN' => 'Line numbers'
    , 'ETVExpand' => 'Expand signs');
  foreach my $entity_class (keys(%other_entities))
  {
    push(@et_visualized
    , "        <input type='checkbox' id='${entity_class}Menu' />$other_entities{$entity_class}<br />")
  }
  push(@et_visualized
    , "      </form>"
    , "    </li>"
    , "  </ul>"
    , "</div>");

  # Print hidden links to take menu into effects.
  foreach my $entity_class ((keys(%main_entities), keys(%other_entities)))
  {
    push(@et_visualized
    , "<a id='${entity_class}Expand' href='#'></a>");
  }

  print_debug_debug("Visualize an error trace itself");
  # Remember visited locations to simplify source code references.
  my %locs;
  my $etv = visualize_et_node($root_ref, $referred_source_code_ref, $visual_ref
    , $id_ref, \%locs);
  push(@et_visualized
    , "    <div id='ETVErrorTrace'>"
    , @{$etv}
    , "    </div>");
  push(@et_visualized
    , "  </td>"
    , "  <td id='ETVSrcWindow'>"
    , "    <div class='ETVGeneralWindowHeader'>"
    , "      Source code"
    , "    </div>"
    , "    <div id='ETVTabs'>"
    , "      <ul id='ETVTabsHeader'>");

  print_debug_debug("Visualize a source code related with an error trace");
  # Print source code tabs.
  foreach my $file
    (sort(keys(%{$referred_source_code{'referred source code'}})))
  {
    $file =~ /([^\/]*)$/;
    my $file_short = $1;
    push(@et_visualized
    , "        <li><a title='$file_short' href='#"
      . convert_file_to_link($file) . "'>$file_short</a></li>");
  }
  push(@et_visualized
    , "      </ul>");

  foreach my $file
    (sort(keys(%{$referred_source_code{'referred source code'}})))
  {
    my $file_link = convert_file_to_link($file);
    push(@et_visualized, "      <div id='$file_link' class='ETVSrc'>");

    # Make syntax highlighting of the source code.
    my $syntax_highlighter = new Text::Highlight(
      'colors' => {
        comment => 'ETVSrcC',
        string  => 'ETVSrcString',
        number  => 'ETVSrcNumber',
        key1    => 'ETVSrcCK',
        key2    => 'ETVSrcCPPK',
      }, wrapper => "%s");
    my $source_code = join("\n"
      , @{${$referred_source_code{'referred source code'}}{$file}});
    my $source_code_highlighted = $syntax_highlighter->highlight('CPP'
      , $source_code);
    my @source_code_highlighted = split(/\n/, $source_code_highlighted);
    my $line_numb = 1;
    foreach my $line (@source_code_highlighted)
    {
      my $anchor = '';
      $anchor = "<a name='$file_link:$line_numb'></a>"
        if ($locs{$file_link}{$line_numb});
      # We assume here that the number of LOCs is less then 10^5.
      my $title = sprintf("%5d", $line_numb);
      $title = "<span class='ETVSrcLN'>$anchor$title <\/span>";
      push(@et_visualized
        , $title
        , $line);
      $line_numb++;
      push(@et_visualized, "\n")
        if ($line_numb <= scalar(@source_code_highlighted));
    }

    push(@et_visualized
    , "      </div>");
  }

  push(@et_visualized
    , "    </div>"
    , "  </td>"
    , "</tr>"
    , "</table>");

  # Print short ETV help after the error trace visualized.
  push(@et_visualized
    , "<div class='ETVHelp'>"
    , "  <p>Here is an <i>explanation</i> of a rule violation arisen while"
        ." checking your driver against a corresponding kernel.</p>"
    , "  <p>Note that it may be <i>false positive</i>, i.e. there isn't a real"
        . " error indeed. Please <i>analyze</i> a given error trace and related"
        . " source code to <i>understand</i> whether there is an error in your"
        . " driver.</p>"
    , "  <p><b>Error trace</b> column contains a <i>path</i> on which the given"
        . " rule is violated. You can <i>expand/collapse</i> some"
        . " <i>entity classes</i> by clicking on corresponding"
        . " <i>checkboxes</i> in a main menu or in an advanced <i>Others</i>"
        . " menu. Also you can <i>expand/collapse</i> each"
        . " <i>particular entity</i> by clicking on <i>+</i>/<i>-</i>. In"
        . " <i>hovering</i> on some <i>entities</i> you can see some"
        . " <i>tips</i>. Also the <i>error trace</i> is bound with related"
        . " <i>source code</i>. <i>Line numbers</i> may be shown as"
        . " <i>links</i> on the left. You can <i>click</i> on them to open"
        . " <i>corresponding lines</i> in <i>source code</i>."
    , "  <p><b>Source code</b> column contains a <i>content</i> of"
        . " <i>files related</i> with the <i>error trace</i>. There is source"
        . " code of your <i>driver</i> (<i>note</i> that there are some"
        . " <i>LDV modifications</i> at the end), <i>kernel headers</i> and"
        . " <i>rule model</i>. <i>Tabs</i> show a currently opened file and"
        . " other available files. In <i>hovering</i> on them you can see"
        . " full <i>file names</i>. On <i>clicking</i> a corresponding"
        . " <i>file content</i> will be shown.</p>"
    , "</div>");

  return \@et_visualized;
}

sub visualize_et_node($$$$$)
{
  my $node_ref = shift;
  my $referred_source_code_ref = shift;
  my $visual_ref = shift;
  my $id_ref = shift;
  my $locs_ref = shift;

  # Visualized representation for a given node.
  my @node_visualized = ();

  # This case can arise when a error trace is empty.
  return \@node_visualized if (!$node_ref);

  my %node = %{$node_ref};
  my %referred_source_code = %{$referred_source_code_ref};
  my %visual = %{$visual_ref};

  # There might be no related source files.
  my %model_func_defs = %{$referred_source_code{'model function definitions'}}
    if ($referred_source_code{'model function definitions'});

  # Id for a currently processed entity.
  my $id = ${$id_ref}{'id'}++;

  # Don't forget that each element of a given node is optional!
  # To avoid warnings about usage of uninitialized values in strings replace
  # undefs with ''.
  my $file = $node{'file'} // '';
  my $line = $node{'line'} // 0;
  my $type = $node{'type'} // '';
  my $kind = $node{'kind'} // '';
  my $formal_arg_names = $node{'formal_arg_names'} // [];
  my $skip_reason = $node{'skip_reason'} // '';
  my $text = $node{'text'} // '';

  # Get short name and related sources name for a node file if so.
  my $file_short = '';
  my $file_matched = '';
  if ($file)
  {
    $file =~ /([^\/]*)$/;
    $file_short = $1;

    foreach my $referred_file
      (keys(%{$referred_source_code{'referred source code'}}))
    {
      # We assume that a node file corresponds just to one referred source code
      # file.
      if ($file =~ /\Q$referred_file\E$/ or $referred_file =~ /\Q$file\E$/)
      {
        if ($file_matched)
        {
          print_debug_warning("A given node file matches more then one sources"
            . " a file name");
        }
        else
        {
          print_debug_trace("A given node file '$file' matches '$referred_file'"
            . " referred source code file");
          $file_matched = $referred_file;
        }
      }
    }
  }

  # Get a title for a currently printed line.
  my $title = get_line_title($file_matched, $line, $visual{'indent'}
    , $locs_ref);

  # This hint will be shown for all major entities.
  my $hint = "$file_short:$line";

  # Style class of an entity processed.
  my $class = '';

  # Process special model and driver environment comments.
  if (my $model_comment
    = $referred_source_code{'model comments'}{$file_matched}{($line - 1)})
  {
    my $model_event = 'unknown';

    if ($model_comment->{'type'} eq 'LDV_COMMENT_ASSERT')
    {
      $class = 'ETVModelAssert';
      $model_event = 'assert'
    }
    elsif ($model_comment->{'type'} eq 'LDV_COMMENT_CHANGE_STATE')
    {
      $class = 'ETVModelChangeState';
      $model_event = 'state change';
    }
    elsif ($model_comment->{'type'} eq 'LDV_COMMENT_MODEL_FUNCTION_CALL')
    {
      $class = 'ETVModelCallCall';
      $model_event = 'function function call';
    }
    elsif ($model_comment->{'type'} eq 'LDV_COMMENT_OTHER')
    {
      $class = 'ETVModelOther';
      $model_event = 'other';
    }
    elsif ($model_comment->{'type'} eq 'LDV_COMMENT_RETURN')
    {
      $class = 'ETVModelRet';
      $model_event = 'return';
    }

    $hint .= ": Model "
      . $model_event
      . " - "
      . $model_comment->{'comment'} || '';
  }

  if ($type eq 'CALL')
  {
    # Try to get a name of a called function to understand whether a given
    # function is a model function..
    my $func_name;
    if ($text =~ /=\s*([^\(]+)/ or $text =~ /\s*([^\(]+)/)
    {
      $func_name = $1;

      foreach my $model_func_name
        (keys(%model_func_defs))
      {
        if ($func_name =~ /$model_func_name/)
        {
          print_debug_trace("Find a call to a model function '$func_name'");
          $class = 'ETVModelCall';

          # Try to get corresponding model comment.
          if (my $model_comment = $referred_source_code{'model comments'}
            {$model_func_defs{$model_func_name}{'src'}}
            {$model_func_defs{$model_func_name}{'line'}})
          {
            $hint .= ": Model function call - "
              . $model_comment->{'comment'} || '';
          }
          else
          {
            print_debug_warning("Can't find a corresponding model comment for"
              . " a model function '$func_name'");
          }
        }
      }
    }
  }

  if (my $deg_comment
    = $referred_source_code{'deg comments'}{$file_matched}{($line - 1)})
  {
    my $deg_event = 'unknown';

    if ($deg_comment->{'type'} eq 'LDV_COMMENT_FUNCTION_CALL')
    {
      $class = 'ETVDEGCall';
      $deg_event = 'function call';
    }
    elsif ($deg_comment->{'type'} eq 'LDV_COMMENT_VAR_INIT')
    {
      $class = 'ETVDEGInit';
      $deg_event = 'initialization';
    }

    $hint .= ": DEG "
      . $deg_event
      . " - "
      . $deg_comment->{'comment'} || '';

  }

  if ($type eq 'ROOT')
  {
    # Print nothing for this artificial tree node. Just walk through its
    # children.
  }
  elsif ($type eq 'CALL')
  {
    my $body_class = 'ETVCallBody';

    if ($class eq 'ETVModelCall')
    {
      $body_class = 'ETVModelCallBody';
    }
    elsif ($class eq 'ETVModelCallCall')
    {
      $body_class = 'ETVModelCallCallBody';
    }
    # TODO: are they really the same?
    elsif ($class eq 'ETVDEGInit')
    {
      $body_class = 'ETVDEGInit';
    }
    elsif ($class eq 'ETVDEGCall')
    {
      $body_class = 'ETVDEGCall';
    }
    else
    {
      $class = 'ETVCall';

      if ($kind eq 'INIT')
      {
        $class = 'ETVCallInit';
        $body_class = 'ETVCallInitBody';
      }
      elsif ($kind eq 'ENTRY')
      {
        # Use an artificial name for an entry point if there isn't.
        $text = 'entry_point' unless $text;
        $class = 'ETVCallEntry';
        $body_class = 'ETVCallEntryBody';
      }
      elsif ($kind eq 'SKIP')
      {
        $class = 'ETVCallSkip';
      }
    }

    push(@node_visualized, "<div class='$class' title='$hint' id='ETV$id'>"
      ,  @{$title});

    # Add comments with formal parameter names.
    my $pos = 0;
    foreach my $name (@{$formal_arg_names})
    {
      # Comment to be inserted after an actual parameter value.
      my $comment = " /* $name */";
      my $comment_length = length($comment);

      my $pos_cur;

      # An actual parameter is finished with ',' or ')' that fineshes a function
      # call. This is a heuristics indeed.
      if (($pos_cur = index($text, ',', $pos)) != -1
        or ($pos_cur = rindex($text, ')')) != -1)
      {
        $text = substr($text, 0, $pos_cur)
          . $comment
          . substr($text, $pos_cur);
        $pos = $pos_cur + $comment_length + 1;
        next;
      }

      last;
    }
    # Add style for all previously inserted comments.
    $text =~ s/(\/\*[^\*\/]*\*\/)/<span class='ETVCallFormalParamName'>$1<\/span>/g;

    if ($kind eq 'SKIP')
    {
      push(@node_visualized, $text, " { /* $skip_reason */");
    }
    else
    {
      # A function call itself serves as a header for expanding of a function
      # body.
      my $id_body = ${$id_ref}{'id'}++;
      push(@node_visualized, get_expand_local($id_body));

      push(@node_visualized, "$text</div>");

      # Start a function body with an open brace.
      my $title_open_brace = get_line_title('', 0, $visual{'indent'}, '');
      push(@node_visualized, "<div class='$body_class' title='$hint' id='ETV$id_body'>"
        ,  @{$title_open_brace}
        , '{<br />');
    }
  }
  elsif ($type eq 'BLOCK')
  {
    $class = 'ETVBlock' unless ($class);

    push(@node_visualized, "<div class='$class' title='$hint' id='ETV$id'>"
      ,  @{$title});

    # Split expressions joined together into one block.
    my @exprs = split(/;/, $text);

    if (scalar(@exprs) > 1)
    {
      # A first expression also serves as a header for expanding of a block
      # "body".
      my $id_block_body = ${$id_ref}{'id'}++;
      push(@node_visualized, get_expand_local($id_block_body)
        , "$exprs[0];");

      # Print other expressions of a block processed (block "body").
      push(@node_visualized, "<span class='ETVBlockBody' id='ETV$id_block_body'>");
      for (my $i = 1; $exprs[$i]; $i++)
      {
        # These expressions haven't links to sources.
        my $title_block_body = get_line_title('', 0, $visual{'indent'}, '');
        push(@node_visualized, '<br />', @{$title_block_body}, "$exprs[$i];");
      }
      push(@node_visualized, "</span>");
    }
    else
    {
      push(@node_visualized, "$exprs[0];");
    }

    push(@node_visualized, '</div>');
  }
  elsif ($type eq 'RETURN')
  {
    $class = 'ETVRet' unless ($class);

    push(@node_visualized, "<div class='$class' title='$hint' id='ETV$id'>"
      , @{$title}
      , "return <span class='ETVRetVal'>$text</span>;"
      , '</div>');
  }
  elsif ($type eq 'ASSUME')
  {
    $class = 'ETVAssume' unless ($class);

    push(@node_visualized, "<div class='$class' title='$hint' id='ETV$id'>"
      , @{$title}
      , "assume(<span class='ETVAssumeCond'>$text</span>);"
      , '</div>');
  }
  elsif ($type eq 'DECLARATION')
  {
    $class = 'ETVDecl' unless ($class);

    push(@node_visualized, "<div class='$class' title='$hint' id='ETV$id'>"
      , @{$title}
      , "$text;"
      , '</div>');
  }
  elsif ($type)
  {
    print_debug_warning("Node type '$type' can't be processed");
  }

  # Print all tree node children with enlarged indentation.
  if ($node{'children'})
  {
    my $indent = $type eq 'ROOT' ? $visual{'indent'}: $visual{'indent'} + 1;
    foreach my $child (@{$node{'children'}})
    {
      my $child_visualized_ref = visualize_et_node($child
        , $referred_source_code_ref, {'indent' => $visual{'indent'} + 1}
        , $id_ref, $locs_ref);
      push(@node_visualized, @{$child_visualized_ref});
    }
  }

  # Finish a function call with a close brace.
  if ($type eq 'CALL')
  {
    # Place close brace at the same string as function call itself if there
    # isn't a function body.
    if ($kind eq 'SKIP')
    {
      push(@node_visualized, '}</div>');
    }
    else
    {
      my $title_close_brce = get_line_title('', 0, $visual{'indent'}, '');
      push(@node_visualized, @{$title_close_brce}
        , '}</div>');
    }
  }

  # Visualize error traces that aren't in the well-built common format.
  if (!$type)
  {
    push(@node_visualized, @{$title}, "$text<br />");
  }

  return \@node_visualized;
}
