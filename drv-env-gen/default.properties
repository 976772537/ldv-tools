#EnvParams can be specified using environment variable ENVGEN_PROPERTIES
#   envgen now supports different models, namely:
#     type=PlainParams: single sequence of calls
#       sorted=true: with sorting according to known functions preconditions on the order
#		check={true|false}: {with|without} checking return values
#       sorted=false: without sorting according to known functions preconditions on the order
#     type=SequenceParams: functions in nondeterministic switch, potentially arbitrary sequences
#       length={one(switch without loops)| n(switch in for loop)| infinite(switch in while loop)}
#       check={true|false}: {with|without} checking return values
#       stateful={true|false}: {support| no support} known functions preconditions on the order
#
# Known functions preconditions on the order are defined below in this file
#
# Default plain_sorted_withcheck
include = p3

#
# To include all models use:
#include = p1,p2,p3,sl1,sl2,sl3,sl4,sl5,sl6,st2,st3,st5,st6
#st1,st4 - in case of single call sequence state has no sense, moreover it prevents calling functions other than the first
#

p1.type = PlainParams
p1.sorted = false
p1.check = false
p2.type = PlainParams
p2.sorted = true
p2.check = false
p3.type = PlainParams
p3.sorted = true
p3.check = true

sl1.type = SequenceParams
sl1.check = true
sl1.stateful = false
sl1.length = one
sl2.type = SequenceParams
sl2.check = true
sl2.stateful = false
sl2.length = infinite
sl3.type = SequenceParams
sl3.check = true
sl3.stateful = false
sl3.length = n
sl3.n = 3

sl4.type = SequenceParams
sl4.check = false
sl4.stateful = false
sl4.length = one
sl5.type = SequenceParams
sl5.check = false
sl5.stateful = false
sl5.length = infinite
sl6.type = SequenceParams
sl6.check = false
sl6.stateful = false 
sl6.length = n
sl6.n = 3

#st1.type = SequenceParams
#st1.check = true
#st1.stateful = true 
#st1.length = one
st2.type = SequenceParams
st2.check = true
st2.stateful = true 
st2.length = infinite
st3.type = SequenceParams
st3.check = true
st3.stateful = true 
st3.length = n
st3.n = 3

#st4.type = SequenceParams
#st4.check = false
#st4.stateful = true 
#st4.length = one
st5.type = SequenceParams
st5.check = false
st5.stateful = true 
st5.length = infinite
st6.type = SequenceParams
st6.check = false
st6.stateful = true 
st6.length = n
st6.n = 3


# Known functions preconditions on the order 

struct_patterns=default_main, usb_driver, file_operations, scsi_driver, sd_desc

# Variables to be replaced in the patterns
# $retvar
# $fcall
# $p0,...,$pn
# $check_label
# $indent


#default_main
pattern.default_main.0.name = open
pattern.default_main.0.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.default_main.1.name = probe
pattern.default_main.1.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.default_main.2.name = connect
pattern.default_main.2.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.default_main.3.name = read
pattern.default_main.3.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar < 0) \n$indent\tgoto $check_label;

pattern.default_main.3.name = write
pattern.default_main.3.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar < 0) \n$indent\tgoto $check_label;

pattern.default_main.3.name = close
pattern.default_main.3.check = 

#usb_driver
pattern.usb_driver.0.name = probe
pattern.usb_driver.0.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.usb_driver.1.name = suspend
pattern.usb_driver.1.check = 

pattern.usb_driver.2.name = resume
pattern.usb_driver.2.check = 

pattern.usb_driver.3.name = pre_reset
pattern.usb_driver.3.check = 

pattern.usb_driver.4.name = reset_resume
pattern.usb_driver.4.check = 

pattern.usb_driver.5.name = post_reset
pattern.usb_driver.5.check = 

pattern.usb_driver.6.name = disconnect
pattern.usb_driver.6.check = 

pattern.usb_driver.7.name = remove
pattern.usb_driver.7.check = 

pattern.usb_driver.8.name = shutdown
pattern.usb_driver.8.check = 

#file_operations
pattern.file_operations.0.name = open
pattern.file_operations.0.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.file_operations.1.name = read
pattern.file_operations.1.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar < 0) \n$indent\tgoto $check_label;

pattern.file_operations.2.name = write
pattern.file_operations.2.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar < 0) \n$indent\tgoto $check_label;

pattern.file_operations.3.name = llseek
pattern.file_operations.3.check = 

pattern.file_operations.4.name = release
pattern.file_operations.4.check = 

#scsi_driver
pattern.scsi_driver.0.name = probe
pattern.scsi_driver.0.check = \n$indent$retvar = $fcall; \n$indent check_return_value($retvar);\n$indent if($retvar) \n$indent\tgoto $check_label;

pattern.scsi_driver.1.name = suspend
pattern.scsi_driver.1.check = 

pattern.scsi_driver.2.name = resume
pattern.scsi_driver.2.check = 

pattern.scsi_driver.3.name = rescan
pattern.scsi_driver.3.check = 

pattern.scsi_driver.4.name = done
pattern.scsi_driver.4.check = 

pattern.scsi_driver.5.name = shutdown
pattern.scsi_driver.5.check = 

pattern.scsi_driver.6.name = remove
pattern.scsi_driver.6.check = 

#sd_desc
pattern.sd_desc.0.name = stop0
pattern.sd_desc.0.check = \n$indent mutex_lock(&$p0->usb_lock);\n$indent$fcall; \n$indent mutex_unlock(&$p0->usb_lock);


