#EnvParams can be specified using environment variable ENVGEN_PROPERTIES
#   envgen now supports different models, namely:
#     type=PlainParams: single sequence of calls
#       sorted=true: with sorting according to known functions preconditions on the order
#		check={true|false}: {with|without} checking return values
#       sorted=false: without sorting according to known functions preconditions on the order
#     type=SequenceParams: functions in nondeterministic switch, potentially arbitrary sequences
#       length={one(switch without loops)| n(switch in for loop)| infinite(switch in while loop)}
#       check={true|false}: {with|without} checking return values
#       stateful={true|false}: {support| no support} known functions preconditions on the order
#
# Known functions preconditions on the order are defined below in this file
#
# Default sequence_infinite_withcheck_stateful
include = sequence_infinite_withcheck_stateful

#
# To include all models use:
#include = plain,plain_sorted,plain_sorted_withcheck,sequence_one_withcheck,sequence_infinite_withcheck,sequence_n_withcheck,sequence_one,sequence_infinite,sequence_n,sequence_one_withcheck_stateful,sequence_infinite_withcheck_stateful,sequence_n_withcheck_stateful,sequence_one_stateful,sequence_infinite_stateful,sequence_n_stateful
#sequence_one_withcheck_stateful, sequence_one_stateful - in case of single call sequence state has no sense, moreover it prevents calling functions other than the first
#

plain.type = PlainParams
plain.init = false
plain.sorted = false
plain.check = false
plain_sorted.type = PlainParams
plain_sorted.sorted = true
plain_sorted.check = false
plain_sorted_withcheck.type = PlainParams
plain_sorted_withcheck.init = false
plain_sorted_withcheck.sorted = true
plain_sorted_withcheck.check = true

sequence_one_withcheck.type = SequenceParams
sequence_one_withcheck.init = false
sequence_one_withcheck.check = true
sequence_one_withcheck.stateful = false
sequence_one_withcheck.length = one
sequence_infinite_withcheck.type = SequenceParams
sequence_infinite_withcheck.init = false
sequence_infinite_withcheck.check = true
sequence_infinite_withcheck.stateful = false
sequence_infinite_withcheck.length = infinite
sequence_n_withcheck.type = SequenceParams
sequence_n_withcheck.init = false
sequence_n_withcheck.check = true
sequence_n_withcheck.stateful = false
sequence_n_withcheck.length = n
sequence_n_withcheck.n = 3

sequence_one.type = SequenceParams
sequence_one.init = false
sequence_one.check = false
sequence_one.stateful = false
sequence_one.length = one
sequence_infinite.type = SequenceParams
sequence_infinite.init = false
sequence_infinite.check = false
sequence_infinite.stateful = false
sequence_infinite.length = infinite
sequence_n.type = SequenceParams
sequence_n.init = false
sequence_n.check = false
sequence_n.stateful = false 
sequence_n.length = n
sequence_n.n = 3

#sequence_one_withcheck_stateful.type = SequenceParams
#sequence_one_withcheck_stateful.init = false
#sequence_one_withcheck_stateful.check = true
#sequence_one_withcheck_stateful.stateful = true 
#sequence_one_withcheck_stateful.length = one
sequence_infinite_withcheck_stateful.type = SequenceParams
sequence_infinite_withcheck_stateful.init = false
sequence_infinite_withcheck_stateful.grouped = true
sequence_infinite_withcheck_stateful.check = true
sequence_infinite_withcheck_stateful.stateful = true 
sequence_infinite_withcheck_stateful.length = infinite

sequence_n_withcheck_stateful.type = SequenceParams
sequence_n_withcheck_stateful.init = false
sequence_n_withcheck_stateful.check = true
sequence_n_withcheck_stateful.stateful = true 
sequence_n_withcheck_stateful.length = n
sequence_n_withcheck_stateful.n = 3

#sequence_one_stateful.type = SequenceParams
#sequence_one_stateful.init = false
#sequence_one_stateful.check = false
#sequence_one_stateful.stateful = true 
#sequence_one_stateful.length = one
sequence_infinite_stateful.type = SequenceParams
sequence_infinite_stateful.init = false
sequence_infinite_stateful.check = false
sequence_infinite_stateful.stateful = true 
sequence_infinite_stateful.length = infinite
sequence_n_stateful.type = SequenceParams
sequence_n_stateful.init = false
sequence_n_stateful.check = false
sequence_n_stateful.stateful = true 
sequence_n_stateful.length = n
sequence_n_stateful.n = 3


# Known functions preconditions on the order 

struct_patterns=default_main, usb_driver, file_operations, scsi_driver, sd_desc, platform_driver, net_device_ops, pm8001_dispatch
#ipmi_smi_handlers, notifier_block, 

# Variables to be replaced in the patterns:
# $retvar
# $fcall
# $p0,...,$pn
# $check_label
# $indent
#
# Predefined expressions: 
# $CHECK_NONZERO
# $CHECK_LESSTHANZERO


#default_main
pattern.default_main.0.name = open
pattern.default_main.0.check = $CHECK_NONZERO

pattern.default_main.1.name = probe
pattern.default_main.1.check = $CHECK_NONZERO

pattern.default_main.2.name = connect
pattern.default_main.2.check = $CHECK_NONZERO

pattern.default_main.3.name = read
pattern.default_main.3.check = $CHECK_LESSTHANZERO

pattern.default_main.3.name = write
pattern.default_main.3.check = $CHECK_LESSTHANZERO

pattern.default_main.3.name = close
pattern.default_main.3.check = 

pattern.default_main.4.name = release
pattern.default_main.4.check = 

pattern.default_main.5.name = disconnect
pattern.default_main.5.check = 

#usb_driver
pattern.usb_driver.0.name = probe
pattern.usb_driver.0.check = $CHECK_NONZERO

pattern.usb_driver.1.name = suspend
pattern.usb_driver.1.check = 

pattern.usb_driver.2.name = resume
pattern.usb_driver.2.check = 

pattern.usb_driver.3.name = pre_reset
pattern.usb_driver.3.check = 

pattern.usb_driver.4.name = reset_resume
pattern.usb_driver.4.check = 

pattern.usb_driver.5.name = post_reset
pattern.usb_driver.5.check = 

pattern.usb_driver.6.name = disconnect
pattern.usb_driver.6.check = 

pattern.usb_driver.7.name = remove
pattern.usb_driver.7.check = 

pattern.usb_driver.8.name = shutdown
pattern.usb_driver.8.check = 

#file_operations
pattern.file_operations.0.name = open
pattern.file_operations.0.check = $CHECK_NONZERO

pattern.file_operations.1.name = read
pattern.file_operations.1.check = $CHECK_LESSTHANZERO

pattern.file_operations.2.name = write
pattern.file_operations.2.check = \$CHECK_LESSTHANZERO

pattern.file_operations.3.name = llseek
pattern.file_operations.3.check = 

pattern.file_operations.4.name = release
pattern.file_operations.4.check = 

#scsi_driver
pattern.scsi_driver.0.name = probe
pattern.scsi_driver.0.check = $CHECK_NONZERO

pattern.scsi_driver.1.name = suspend
pattern.scsi_driver.1.check = 

pattern.scsi_driver.2.name = resume
pattern.scsi_driver.2.check = 

pattern.scsi_driver.3.name = rescan
pattern.scsi_driver.3.check = 

pattern.scsi_driver.4.name = done
pattern.scsi_driver.4.check = 

pattern.scsi_driver.5.name = shutdown
pattern.scsi_driver.5.check = 

pattern.scsi_driver.6.name = remove
pattern.scsi_driver.6.check = 

#sd_desc
pattern.sd_desc.0.name = stop0
pattern.sd_desc.0.check = \n$indent mutex_lock(&$p0->usb_lock);\n$indent$fcall; \n$indent mutex_unlock(&$p0->usb_lock);

#platform_driver
pattern.platform_driver.0.name = probe
pattern.platform_driver.0.check = $CHECK_NONZERO

pattern.platform_driver.1.name = suspend
pattern.platform_driver.1.check = 

pattern.platform_driver.2.name = suspend_late
pattern.platform_driver.2.check = 

pattern.platform_driver.3.name = resume_early
pattern.platform_driver.3.check = 

pattern.platform_driver.4.name = resume
pattern.platform_driver.4.check = 

pattern.platform_driver.5.name = remove
pattern.platform_driver.5.check = 

pattern.platform_driver.6.name = shutdown
pattern.platform_driver.6.check = 

#net_device_ops
pattern.net_device_ops.0.name = ndo_init
pattern.net_device_ops.0.check = $CHECK_NONZERO

pattern.net_device_ops.1.name = ndo_open
pattern.net_device_ops.1.check = $CHECK_LESSTHANZERO

pattern.net_device_ops.2.name = ndo_stop
pattern.net_device_ops.2.check = $CHECK_NONZERO

pattern.net_device_ops.3.name = ndo_uninit
pattern.net_device_ops.3.check = 

#ipmi_smi_handlers
#pattern.ipmi_smi_handlers.0.name = sender
#pattern.ipmi_smi_handlers.0.check = \n$indent unsigned long $p0_flags; \n$indent struct smi_info *$p0_smi_info = $p0; \n$indent spin_lock_irqsave(&$p0_smi_info->si_lock, $p0_flags); \n$indent$fcall; \n$indent spin_unlock_irqrestore(&$p0_smi_info->si_lock, $p0_flags);
#pattern.ipmi_smi_handlers.1.name = set_run_to_completion
#pattern.ipmi_smi_handlers.1.check = \n$indent unsigned long $p0_flags; \n$indent struct smi_info *$p0_smi_info = $p0; \n$indent spin_lock_irqsave(&$p0_smi_info->si_lock, $p0_flags); \n$indent$fcall; \n$indent spin_unlock_irqrestore(&$p0_smi_info->si_lock, $p0_flags);

#notifier_block
#pattern.notifier_block.0.name = notifier_call 
#pattern.notifier_block.0.check = \n$indent unsigned long $p2_flags; \n$indent struct smi_info *$p2_smi_info = $p2; \n$indent spin_lock_irqsave(&$p2_smi_info->si_lock, $p2_flags); \n$indent$fcall; \n$indent spin_unlock_irqrestore(&$p2_smi_info->si_lock, $p2_flags);

#pm8001_dispatch
pattern.pm8001_dispatch.0.name = isr_process_oq 
pattern.pm8001_dispatch.0.check = \n$indent unsigned long $p0_flags; \n$indent spin_lock_irqsave(&$p0->lock, $p0_flags); \n$indent$fcall; \n$indent spin_unlock_irqrestore(&$p0->lock, $p0_flags);

