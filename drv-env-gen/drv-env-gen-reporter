#!/usr/bin/perl -w

use XML::Twig;
use FindBin;

my $deg_home = "$FindBin::Bin";

# Xml nodes names.
my $xml_cmd_basedir = 'basedir';
my $xml_cmd_stream = 'cmdstream';
my $xml_cmd_attr_id = 'id';
my $xml_cmd_attr_check = 'check';
my $xml_cmd_entry_point = 'main';
my $xml_cmd_cc = 'cc';
my $xml_cmd_cwd = 'cwd';
my $xml_cmd_in = 'in';
my $xml_cmd_ld = 'ld';
my $xml_cmd_opt = 'opt';
my $xml_cmd_out = 'out';
my $xml_reports_cc = 'cc';
my $xml_reports_ld = 'ld';
my $xml_reports_attr_ref = 'ref';
my $xml_reports_verdict = 'verdict';
my $xml_reports_driver_name = 'driver_name';
my $xml_reports_module_name = 'module_name';

my $verdict_unknown = 'UNKNOWN';
my $verdict_ok = 'OK';

my $xml_instrument = 'drv-env-gen';
my $xml_instrument_status = 'status';
my $xml_instrument_time = 'time';
my $xml_instrument_desc = 'desc';

my $xml_stats_loc = 'loc';


my $xml_reports = 'reports';

#####################################################
# log options
#####################################################
my $psuffix="deg-reporter";
my $log_level=10;

my $cmdfile = "";
my $report_out = "";
my $report_in = "";
my $state_file = "";

# 0. get options.
get_ldv_opts();
# 1. read state file;
open(FIL,$state_file); 
my @states = <FIL>; 
close(FIL);

# 1. read stats file;
open(FIL,$stats_file); 
my @stats = <FIL>; 
close(FIL);



# 2. open output command stream if it needs
# 3. open input report
my $twig_inreport = new XML::Twig();
if( -f $report_in ) {
	$twig_inreport->parsefile($report_in);
} else {
	my $twig_inroot = XML::Twig::Elt->new($xml_reports);
	$twig_inreport->set_root($twig_inroot);
}
# 4. create output erports twig object
#my $twig_report = XML::Twig::Elt->new('reports');
# 5. open input command stream
my $twig_handlers = {   "$xml_cmd_stream/$xml_cmd_cc"      => \&hxml_cmdstream,
			"$xml_cmd_stream/$xml_cmd_ld"      => \&hxml_cmdstream };
my $twig_icmd= new XML::Twig(TwigHandlers => $twig_handlers);
$twig_icmd->parsefile($cmdfile);

$twig_inreport->set_xml_version('1.0');
$twig_inreport->set_pretty_print('indented');
$twig_inreport->print_to_file($report_out);


#####################################################
# xml-functions
#####################################################

#
# find command-tag in input report file by id
#
sub get_cmd_tag_from_report_by_id {
	my $lroot = $twig_inreport->root;
	my @commands = ();
	foreach my $command ($lroot->children($xml_reports_cc)) {
		if($command->att($xml_reports_attr_ref) == $_[0]) { push(@commands, $command); };
	};
	foreach my $command ( $lroot->children($xml_reports_ld) ) {
		if($command->att($xml_reports_attr_ref) == $_[0]) { push(@commands, $command); };
	};
	return @commands;
}

#####################################################
# twig  handlers
#####################################################

# List of failed CC commands and their descriptions.  Format: cc's outfile -> description (ld matches via cc file names)
my %failed_ccs = ();

sub hxml_cmdstream {
	my $id=$_[1]->att($xml_cmd_attr_id);
	my @commands = get_cmd_tag_from_report_by_id($id);
	#
	# TODO: test - if @command is empty, then create command 
	#
	if(scalar @commands == 0) {
		my $lcommmand;
		if ($_[1]->name eq $xml_cmd_cc) { 
			$lcommand = XML::Twig::Elt->new($xml_cmd_cc);
		} elsif ($_[1]->name eq $xml_cmd_ld) {
			$lcommand = XML::Twig::Elt->new($xml_cmd_ld);
			$lcommand->set_att($xml_reports_attr_ref=>$id);
			foreach my $section ( $_[1]->children('out') ) {
				if($section->has_atts && $section->att($xml_cmd_attr_check) eq 'true') {
					XML::Twig::Elt->new($xml_reports_verdict,$verdict_unknown)->paste($lcommand);
					next;
				}
			}
		};
		$lcommand->set_att($xml_reports_attr_ref => $id);
		my $lroot = $twig_inreport->root;
		$lcommand->paste($lroot);
		push(@commands,$lcommand);		
	}
	foreach my $command (@commands) {
		@astate=get_state($id);
		foreach my $section ($_[1]->children($xml_cmd_out)) {
			if($section->has_atts() && $section->att($xml_cmd_attr_check) eq 'true') {
				$command->set_att($xml_reports_driver_name=>$astate[2]);
				$command->set_att($xml_reports_module_name=>$astate[1]);
				$command->set_att($xml_cmd_attr_check=>'true');	
			}
		};
		my $instrument = XML::Twig::Elt->new($xml_instrument);
		my $i=0;
		foreach(@stats) {
	                /^\s*<time\s+ref="$id"\s+name="(.*)"\s*>\s*([0-9]*)\s*<\/time>/ or next;
			$i++;
			my $time_elt = XML::Twig::Elt->new($xml_instrument_time,$2);
			$time_elt->set_att('name'=>$1);
			$time_elt->paste($instrument);
		}
		if($i==0) {
			my $time_elt = XML::Twig::Elt->new($xml_instrument_time,0);
			$time_elt->set_att('name'=>"ALL");
			$time_elt->paste($instrument);
		}
		my $description = '';
		if($astate[6] eq 'FAILED') {
			open(FIL,$astate[7]);
			while(<FIL>) {
				$description .= $_;
			}
			$description.='      ';
			close(FIL);
		}
		# Determine final status.  Initially it's gotten from the recorded file
		my $status = $astate[6];
		# If it's a CC command, record to failed_ccs
		if ($command->name eq 'cc'){
			$failed_ccs{$command->first_child_text($xml_cmd_out)} = $description;
		}elsif ($command->name eq 'ld'){
			# If it's an LD command, adjust status correspondingly, if any of its input CCs have failed
			my $really_failed = '';
			for my $in_o ($command->children_text){
				if ($failed_ccs{$in_o}){
					$really_failed = 1;
					ldv_wprint(sprintf("Envgen failure recorded for module %s.",$command->att($xml_reports_module_name)));
					$description.=sprintf("Main generation for file '%s' failed: %s\n",$in_o,$failed_ccs{$in_o});
				}
			}
			$status = 'FAILED' if $really_failed;
		}
		XML::Twig::Elt->new($xml_instrument_desc,$description)->paste($instrument);
		XML::Twig::Elt->new($xml_instrument_status,$status)->paste($instrument);
		XML::Twig::Elt->new($xml_stats_loc,$astate[4])->paste($instrument);
		$instrument->paste('last_child',$command);

	}
}	

sub get_state() {
	foreach my $state (@states) {
		if($state =~ m/^(\d+):(.*):(.*):(.*):(.*):(.*):(.*):(.*):(.*)$/ && $1 == $_[0]) {
			# id:time of work:::kernel driver name:summary lines:summary size:result - failed or ok:file with error description(remove it later)
			return ($2,$3,$4,$5,$6,$7,$8,$9);
		}
	}
}

######################################################
# option test
######################################################
sub get_ldv_opts
{
	$log_level = $ENV{'LDV_DEBUG'};

	# get all options
	foreach $opt(@ARGV)
	{
		if($opt =~ s/--cmdfile=(.*)/$1/)
		{
			$cmdfile = $opt;
		} 
		elsif($opt =~ s/--state-file=(.*)/$1/)
		{
			$state_file = $opt;
		}
		elsif($opt =~ s/--stats-file=(.*)/$1/)
		{
			$stats_file = $opt;
		}
		elsif($opt =~ s/--report-in=(.*)/$1/)
		{
			$report_in = $opt;
		}
		elsif($opt =~ s/--report-out=(.*)/$1/)
		{
			$report_out = $opt;
		}
		else
		{
			ldv_eprint("Unknown option:\"$opt\".");
			exit 1;
		}
	}
	# test all options
	if(!$cmdfile) {
		ldv_eprint("You must setup input command stream file in option: \"--cmdfile\".");
		print_usage();
		exit 1;
	} elsif(! -f $cmdfile) {
		ldv_eprint("Can not find input command stream file: \"$cmdfile\".");
		print_usage();
		exit 1;
	}
	if(!$state_file) {
		ldv_eprint("You must setup file with state: \"--state-file\".");
		print_usage();
		exit 1;
	} elsif(! -f $state_file) {
		ldv_eprint("Can not find file with state: \"$state_file\".");
		print_usage();
		exit 1;
	}
	if(!$stats_file) {
		ldv_eprint("You must setup file with time stats: \"--stats-file\".");
		print_usage();
		exit 1;
	} elsif(! -f $stats_file) {
		ldv_eprint("Can not find file with time stats: \"$stats_file\".");
		print_usage();
		exit 1;
	}
	if(!$report_in) {
		ldv_dprint("You must setup input report file in option: \"--report-in\".");
		print_usage();
	} elsif(! -f $report_in) {
		ldv_dprint("Can not find input report file: \"$report_in\".");
		print_usage();
	}
	if(!$report_out) {
		ldv_eprint("You must setup output report file in option: \"--reoport-out\".");
		print_usage();
		exit 1;
	} elsif( -f $report_out) {
		ldv_eprint("Output report file already exists: \"$report_out\".");
		print_usage();
		exit 1;
	}
}

sub print_usage
{
	ldv_print("USAGE: $psuffix --cmdfile=cmdfile --report-out=reportfile --report-in=reportin --state-file=statefile ");
}

#######################################################
# ldv print functions
#######################################################
sub ldv_print
{
	print "$psuffix: $_[0]\n";
}

sub ldv_eprint
{
	ldv_print "ERROR: $_[0]";
}

sub ldv_wprint
{
	if($log_level>=4) {
		ldv_print("WARNING: $_[0]");
	}
}

sub ldv_sprint
{
	if($log_level>=10) {
		ldv_print("$_[0]");
	}
}

sub ldv_iprint
{
	if($log_level>=20) {
		ldv_print("INFO: $_[0]");
	}
}

sub ldv_dprint
{
	if($log_level>=30) {
		ldv_print("DEBUG: $_[0]");
	}
}

sub ldv_tprint
{
	if($log_level>=40) {
		ldv_print("TRACE: $_[0]");
	}
}

sub ldv_aprint
{
	if($log_level==100) {
		ldv_print("$_[0]");
	}
}
