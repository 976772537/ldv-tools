#!/usr/bin/perl -w

use XML::Twig;
use FindBin;
use Time::HiRes qw(gettimeofday);

my $deg_home = "$FindBin::Bin";

# interfaces
my $ldv_cc = "java";
my @ldv_cc_add_options = ("-ea","-jar","$deg_home/ldv_cc.jar");
my $ldv_ld = "java";
my @ldv_ld_add_options = ("-ea","-jar","$deg_home/ldv_ld.jar");

my $state_script = "$deg_home/../shared/sh/timeout";
# output option
# -o
my $output_option = "-o";

my $props_file;
my $default_props_file = "$deg_home/default.properties";

# major options
#
# interface for cc:
# ldv_cc input_file1 (--main|--nomain) input_file2 (--main|--nomain)... -o output_file -c uniqueid -props properties_file other_options
# interface for dd:
# ldv_ld input_file input_file ... -o output_file options
#
#
my $workdir;

# Xml nodes names.
my $xml_cmd_attr_restrict = 'restrict';
my $xml_cmd_basedir = 'basedir';
my $xml_cmd_stream = 'cmdstream';
my $xml_cmd_attr_id = 'id';
my $xml_cmd_entry_point = 'main';
my $xml_cmd_cc = 'cc';
my $xml_cmd_cwd = 'cwd';
my $xml_cmd_in = 'in';
my $xml_cmd_ld = 'ld';
my $xml_cmd_opt = 'opt';
my $xml_cmd_out = 'out';

my $driver_external = 'external';
my $driver_internal = 'internal';

#####################################################
# log options
#####################################################
my $psuffix="deg";
my $log_level=10;

my $cmdfile = "";
my $state_file = "";
my $cmdfile_out = "";
my $tempdir = "";
my $indriver_name = "";

my $kernel_driver = $driver_external;
my $ldv_counter = 0;

#my $basedir_name = "deg_tempdir";
my $driver_dirname = "driver";
my $xmlbasedir;

my $wresult = 'OK';

# 1. get options.
get_ldv_opts();

#
# Sanity cheks
#
ldv_dprint("Start sanity checks for input cmd stream file...");
my $check_twig_handlers = { "$xml_cmd_stream/$xml_cmd_ld"  => \&hxml_cmdstream_check_ld };
my $check_twig= new XML::Twig(TwigHandlers => $check_twig_handlers);
$check_twig->parsefile($cmdfile);
ldv_dprint("Ok");

# 2. create directories
my $basedir="$workdir/$tempdir";
my $my_driverdir="$basedir/$driver_dirname";
my $stats_file="$basedir/stats.xml";

chomp($basedir);
if(! mkdir $basedir) {
	ldv_eprint("Can't create basedir:\"$basedir\".");
	exit 1;
}
# 3. copy driver in new dir
chomp($my_driverdir);
if(! mkdir $my_driverdir) {
	ldv_eprint("Can't create my_driverdir:\"$my_driverdir\".");
	exit 1;
}

open(STATEFIL, "> $state_file") || ( ldv_eprint("Can't create state file: \"$state_file\".") &&  exit 1 );

my $twig_handlers = {   "$xml_cmd_stream/$xml_cmd_cc"      => \&hxml_cmdstream_cc,
			"$xml_cmd_stream/$xml_cmd_ld"      => \&hxml_cmdstream_ld,
			"$xml_cmd_stream/$xml_cmd_basedir" => \&hxml_cmdstream_basedir };

my $twig= new XML::Twig(TwigHandlers => $twig_handlers);

# create hash with driver length and number of lines
my %stats_hash = (); 

$twig->parsefile($cmdfile);

$twig->set_pretty_print('indented');

if($log_level == 50) {
	$twig->print();
}
$twig->print_to_file($cmdfile_out);
close(STATEFIL);

#
# Sanity check
#
ldv_dprint("Start sanity checks for generated cmd stream file...");
$check_twig_handlers = { "$xml_cmd_stream/$xml_cmd_ld"  => \&hxml_cmdstream_check_ld };
$check_twig= new XML::Twig(TwigHandlers => $check_twig_handlers);
$check_twig->parsefile($cmdfile_out);
ldv_dprint("Ok");
$wresult eq 'FAILED' && exit 1;

sub hxml_cmdstream_check_ld {
	my $id_ld=$_[1]->att($xml_cmd_attr_id);
	ldv_dprint("Check LD command with id:\"$id_ld\"...");
	my @check_childrens_in = $_[1]->children($xml_cmd_in);
	foreach my $check_section (@check_childrens_in) {
		my $check_file = $check_section->text;
		ldv_dprint("Check CC command for input section with file:\"$check_file\"...");
		if(!is_exists_cc_out_for_this_in($check_file)) {
			ldv_eprint("LD id=\"$id_ld\"  have no CC command with corresponding out file:\"$check_file\" !!!");
		}
		ldv_dprint("CC command exists.");
	}
	ldv_dprint("LD command :\"$id_ld\" -Ok.");
}

sub is_exists_cc_out_for_this_in {
	my $check_root = $check_twig->root;
	my @check_cc_sections = $check_root->children($xml_cmd_cc);
	foreach my $check_cc_section (@check_cc_sections) {
		my $check_out = $check_cc_section->first_child($xml_cmd_out);
		if($check_out->text eq $_[0]) {
			return 1;
		}
	}
	return 0;
}




#####################################################
# twig  handlers
#####################################################

sub hxml_cmdstream_basedir {
	my $local_baseidr = $_[1]->text;
	if(! -d $local_baseidr) {
		ldv_eprint("Can't find cmdstream basedir:\"$local_baseidr\"");
		exit 1;
	}
	$xmlbasedir = $local_baseidr;
}

sub hxml_cmdstream_cc {
	my $result = 'OK';
	my $errorpost = '';
	my $start_time = gettimeofday;	
	my $lid = $_[1]->att($xml_cmd_attr_id);
	my $errorfile = "$basedir/$lid.error";

	my @args = ($state_script,
		"--pattern=.*,ALL",
		"--output=$stats_file",
		"--reference=$lid",
		$ldv_cc,
		@ldv_cc_add_options); 

	my $summary_lines=0;
	my $summary_size=0;

	foreach my $section ( $_[1]->children('in') ) {

		# Calculate file size and number of code lines.
		# 1. calculate file size
		my $cc_in_filename = $section->text;
		my $stat_size = -s $cc_in_filename;
		$summary_size += $stat_size;
		# 2.  calculate number of strings
		my $stat_lines = `wc -l $cc_in_filename | sed 's/ .*//'`;
		chomp($stat_lines);
		$summary_lines += $stat_lines;



		if($section->has_atts && $section->att($xml_cmd_attr_restrict) eq $xml_cmd_entry_point) {
			ldv_tprint("Forbidden to generate main for \"".$section->text."\".");
			push(@args, $section->text, "--nomain"); 
		} else {
			ldv_tprint("Generate main option on for \"".$section->text."\".");
			push(@args, $section->text, "--main"); 
		}	
	}

	push(@args,$output_option);
	foreach my $section ( $_[1]->children('out') ) {
		my $outdir = $section->text;
		# put stats info in hash
		$stats_hash{$outdir} = [$summary_size,$summary_lines];
		# 1. replace outdir from basedir in xml with our driverdir
  		if(!($outdir =~ s/$xmlbasedir/$my_driverdir/)) {
			ldv_eprint("Can't find basedir pattern in cc outdirs.");
			exit 1;
		}
		push(@args, $outdir);
	}
	push(@args,"-c",$ldv_counter++);
	push(@args,"-props",$props_file);
	foreach my $section ( $_[1]->children('opt') ) {
		push(@args,$section->text);
	}
	if($log_level>=30) {
		ldv_dprint("RUN LDV_CC: @args");
	}
	ldv_iprint("Starting ldv_cc interface...");
	if(system(@args) != 0) {
		ldv_eprint("ldv_cc failed !");
		ldv_feprint($errorfile, "ldv_ld_failed", $result);
	}

	if ($result ne 'FAILED') {
		foreach my $section ( $_[1]->children('out') ) {
			my $outdir = $section->text;
			# 1. replace outdir from basedir in xml with our driverdir
	  		if(!($outdir =~ s/$xmlbasedir/$my_driverdir/)) {
				ldv_eprint("Can't find basedir pattern in cc outdirs int end.");
				exit 1;
			}
			if(! -f $outdir) {
				 next;
			}
			open(FIL,$outdir);
			my @strings = <FIL>;
			close(FIL);
			foreach $line (@strings)
			{
				if($line =~ s/.*\://) {
					$line =~  s/\n//;
					XML::Twig::Elt->new("opt",$line)->paste('last_child',$_[1]);
				}
			}
		}
	}
	#
	# id:time of work:::kernel driver name:summary length:summary lines 
	#
	my $worktime=int((gettimeofday-$start_time)*1000);
	ldv_tprint("Statistica: lines: $summary_lines, size: $summary_size, worktime: $worktime");
	print (STATEFIL $lid.":".$worktime.":::".$kernel_driver.":$summary_lines:$summary_size:$result:$errorfile\n"); 
	ldv_iprint("End of ldv_cc - Ok.");
}

# handler for twig
sub hxml_cmdstream_ld {
	my $errorpost = '';
	my $result = 'OK';
	my $start_time = gettimeofday;	
	my $lid = $_[1]->att($xml_cmd_attr_id);
	my $errorfile = "$basedir/$lid.error";

	my @args = ($state_script,
		"--pattern=.*,ALL",
		"--output=$stats_file",
		"--reference=$lid",
		$ldv_ld,
		@ldv_ld_add_options); 


	#my @args = ($ldv_ld,@ldv_ld_add_options); 
	my $summary_lines=0;
	my $summary_size=0;
	foreach my $section ( $_[1]->children('in') ) {
		my $indir=$section->text;

		#
		# Calculate length and number of lines
		#
		$summary_size += $stats_hash{$indir}[0];
		$summary_lines += $stats_hash{$indir}[1];

		# 1. replace outdir from basedir in xml with our driverdir
  		if(!($indir =~ s/$xmlbasedir/$my_driverdir/)) {
			ldv_eprint("Can't find basedir pattern in ld indirs.");
			exit 1;
		} 
		push(@args,$indir);
	}
	push(@args,$output_option);
	my $module_name;
	my $driver_name;

	foreach my $section ( $_[1]->children('out') ) {
		my $outdir=$section->text;
		$module_name=$outdir;
		$driver_name=$outdir;
		if($kernel_driver eq $driver_internal) {
			$driver_name =~ s/$xmlbasedir\/+//;
			$module_name = $driver_name;
		} elsif($kernel_driver eq $driver_external) {
			$module_name =~ s/.*\/+csd_deg_dscv\/+driver\d+\/+//;
			$indriver_name =~ s/.*\/(.*)/$1/;
			$driver_name = $indriver_name;
		}
		# 1. replace outdir from basedir in xml with our driverdir
  		if(!($outdir =~ s/$xmlbasedir/$my_driverdir/)) {
			ldv_eprint("Can't find basedir pattern in ld outdirs.");
			exit 1;
		}
		push(@args,$outdir);
	}
	foreach my $section ( $_[1]->children('opt') ) {
		push(@args, $section->text);
	}
	if($log_level>=30) {
		my @debug_args =($ldv_ld,@ldv_ld_add_options);
		foreach my $cmd (@args) {
			push(@debug_args,$cmd);
		}
		ldv_dprint("RUN LDV_LD: @debug_args");
	}
	ldv_iprint("Starting ldv_ld interface...");
	if(system(@args) != 0) {
		ldv_eprint("ldv_ld failed !");
		ldv_feprint($errorfile, "ldv_ld_failed", $result);
	}
	ldv_iprint("End of ldv_ld - Ok.");
	if ($result ne 'FAILED') {
		foreach my $section ( $_[1]->children('out') ) {
			my $outdir = $section->text;
			# 1. replace outdir from basedir in xml with our driverdir
	  		if(!($outdir =~ s/$xmlbasedir/$my_driverdir/)) {
				ldv_eprint("Can't find basedir pattern in ld outdirs int end.");
				exit 1;
			}
			if(! -f $outdir) {
				 next;
			}
			open(FIL,$outdir);
			my @strings = <FIL>;
			close(FIL);
			foreach $line (@strings)
			{
				if($line =~ s/-DLDV_MAIN/ldv_main/) {
					$line =~  s/\n//;
					XML::Twig::Elt->new("main",$line)->paste('last_child',$_[1]);
				}
			}
		}
	}
	my $worktime=int((gettimeofday - $start_time)*1000);
	print (STATEFIL $lid.":".$worktime.":".$module_name.":".$driver_name.":".$kernel_driver.":$summary_lines:$summary_size:$result:$errorfile\n"); 
}


######################################################
# option test
######################################################
sub test_interfaces
{
	if(! -f $ldv_cc)
	{
		ldv_eprint("Can't find CC interface:\"$ldv_cc\".");
	}
	if(! -f $ldv_ld)
	{
		ldv_eprint("Can't find LD interface:\"$ldv_ld\".");
	}
}

sub get_ldv_opts
{
	$log_level = $ENV{'LDV_DEBUG'};
	#get env variables
	$workdir = $ENV{'WORK_DIR'};
	if(!$workdir) {
	        ldv_eprint("WORK_DIR variable not set. Setup it and try again.");
		print_usage();
	        exit 1;
	};

	if(! -d $workdir) {
	        ldv_eprint("Can't find WORK_DIR. Is it exists?.\n");
		print_usage();
	        exit 1;
	};
	
	$props_file = $ENV{'ENVGEN_PROPERTIES'};
	if(!$props_file) {
	        ldv_dprint("ENVGEN_PROPERTIES variable not set. Using default properties $default_props_file\n");
		$props_file = $default_props_file;
	} 
	
	if(! -f $props_file) {
		ldv_eprint("Can not find envgen properties file: \"$props_file\".");
		print_usage();
		exit 1;
	}

	# get all options
	foreach $opt(@ARGV)
	{
		if($opt =~ s/--cmdfile=(.*)/$1/)
		{
			$cmdfile = $opt;
		} 
		elsif($opt =~ s/--state-file=(.*)/$1/)
		{
			$state_file = $opt;
		}
		elsif($opt =~ s/--driver-name=(.*)/$1/)
		{
			$indriver_name = $opt;
		}
		elsif($opt =~ s/--kernel-driver//)
		{
			$kernel_driver = $driver_internal;
		}
		elsif($opt =~ s/--cmdfile-out=(.*)/$1/)
		{
			$cmdfile_out = $opt;
		}
		elsif($opt =~ s/--basedir=(.*)/$1/)
		{
			$tempdir = $opt;
		}
	}
	# test all options
	if(!$cmdfile) {
		ldv_eprint("You must setup input command stream file in option: \"--cmdfile\".");
		print_usage();
		exit 1;
	} elsif(! -f $cmdfile) {
		ldv_eprint("Can not find input command stream file: \"$cmdfile\".");
		print_usage();
		exit 1;
	}
	if(!$state_file) {
		ldv_eprint("You must setup state file in option: \"--state-file\".");
		print_usage();
		exit 1;
	} elsif( -f $state_file) {
		ldv_eprint("Output state file already exists: \"$state_file\".");
		print_usage();
		exit 1;
	}
	if(!$cmdfile_out) {
		ldv_eprint("You must setup output command stream file in option: \"--cmdfile-out\".");
		print_usage();
		exit 1;
	} elsif( -f $cmdfile_out) {
		ldv_eprint("Output command stream file already exists: \"$cmdfile_out\".");
		print_usage();
		exit 1;
	}
#	ldv_iprint("Selected command stream file: \"$cmdfile\".");
#	ldv_iprint("Selected output command stream file: \"$cmdfile_out\".");
}

sub print_usage
{
	ldv_print("USAGE: $psuffix --cmdfile=cmdfile --cmdfile-out=cmdfileout");
}

#######################################################
# ldv print functions
#######################################################
sub ldv_feprint
{
	ldv_tprint("Echo information about error to file".$_[0]);
	$wresult = 'FAILED';
	$_[2] = 'FAILED';
	open  EFIL, ">", $_[0] or die("Can not create error log file ".$_[0].":$!");
	print EFIL "$_[1]\n";
	close EFIL or die("Can not close file: $!");
}

sub ldv_print
{
	print "$psuffix: $_[0]\n";
}

sub ldv_eprint
{
	ldv_print "ERROR: $_[0]";
}

sub ldv_sprint
{
	if($log_level>=10) {
		ldv_print("$_[0]");
	}
}

sub ldv_iprint
{
	if($log_level>=20) {
		ldv_print("INFO: $_[0]");
	}
}

sub ldv_dprint
{
	if($log_level>=30) {
		ldv_print("DEBUG: $_[0]");
	}
}

sub ldv_wprint
{
	if($log_level>=10) {
		ldv_print("WARNING: $_[0]");
	}
}
sub ldv_tprint
{
	if($log_level>=40) {
		ldv_print("TRACE: $_[0]");
	}
}

sub ldv_aprint
{
	if($log_level==100) {
		ldv_print("$_[0]");
	}
}
