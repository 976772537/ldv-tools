#!/bin/sh

#
# env var WORK_DIR
# ldv-core --env=envdir --driver=driver --rule-models=rules
#

GLOBAL_LOG="global.log";
XML_FILENAME_AFTER_BCE="cmd_after_bce.xml";
XML_FILENAME_AFTER_DEG="cmd_after_deg.xml";
BCE_WORK_DIRNAME="bce_tempdir";
DEG_WORK_DIRNAME="deg_tempdir";
DSCV_WORK_DIRNAME="dscv_tempdir";
LOG_MIRROR_TO_CONSOLE=1;
DRIVER_DIR_NAME="driver";
EXTRACTOR_LOG_FILENAME="unarch.log";


#
# log variables
#
LOG_PREFIX="ldv-core: ";
PREFIX_ERROR="ERROR: ";
PREFIX_WARNING=" WARN: ";
PREFIX_DEBUG="DEBUG: ";
PREFIX_INFO=" INFO: ";

ldv_print() {
        if [ $LOG_MIRROR_TO_CONSOLE -ne 0 ]; then echo "$LOG_PREFIX$1"; fi;
        if [ ! -f "$TEMP_DIR/$GLOBAL_LOG" ];  then
                touch $TEMP_DIR/$GLOBAL_LOG;
                if [ $? -ne 0 ]; then
                        echo "ldv-core: ERROR: can't create log file.";
                        exit 1;
                fi;
        fi;
        echo "$LOG_PREFIX$1" >> $TEMP_DIR/$GLOBAL_LOG;
}


LDV_HOME=`readlink -f \`dirname $0\`/../`;

LDV_TEMPDIR_NAME="ldv_tempdir";

LDV_RULE_DB_DIRNAME="kernel-rules";
LDV_RULE_DB=$LDV_HOME/$LDV_RULE_DB_DIRNAME;

BCE_DIR="$LDV_HOME/build-cmd-extractor";
BCE="$BCE_DIR/build-cmd-extractor";

DEG_DIR="$LDV_HOME/drv-env-gen";
DEG="$DEG_DIR/drv-env-gen";

DSCV_DIR="$LDV_HOME/bin/";
DSCV="$DSCV_DIR/dscv";

RINSTR_DIR="$LDV_HOME/rule-instrumentor";
RINSTR="$RINSTR_DIR/rule-instrumentor.pl";

KERNEL_LEVEL=0;

#
# read and test environment variables
#
print_usage_and_exit() {
		echo "ldv-core: USAGE: WORK_DIR=workdir ldv-core --env=kerneldir --driver=driverpath --rule-models=rulemodels"
		exit 1;
}
if [ $# -ne 3 ]; then print_usage_and_exit; fi;

if [ ! -n "$WORK_DIR" ]; then
	echo "ldv-core: ERROR: Please, setup WORK_DIR variable before running ldv-core.";
	exit 1;
fi;
WORK_DIR=`readlink -f $WORK_DIR`;
if [ $? -ne 0 ]; then
        echo "ldv-core: ERROR: Failed to read abs-path for working dir: \"$WORK_DIR\"."
        exit 1;
fi;
if [ ! -d "$WORK_DIR" ]; then
        echo "ldv-core: ERROR: Working directory does not exists: \"$WORK_DIR\".";
        exit 1;
fi;

#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --rule-models=*)
                	rulemodels=`echo $arg | sed 's/--rule-models=//g'`
			if [ ! -n "$rulemodels" ]; then
				echo "ldv-core: ERROR: Parameter \"--rule-models\" - is null. Setup it.";
			        exit 1;
			fi;
                ;;
		--env=*)
                	renv=`echo $arg | sed 's/--env=//g'`
			if [ ! -n "$renv" ]; then
				echo "ldv-core: ERROR: Parameter \"--env\" - is null. Setup it.";
			        exit 1;
			fi;
			env=`readlink -f $renv`;
			if [ $? -ne 0 ]; then
				echo "ldv-core: ERROR: Failed to read abs-path for environment dir: \"$renv\"."
			        exit 1;
			fi;
			if [ ! -d "$env" ]; then
			        echo "ldv-core: ERROR: Environment dir not exists: \"$env\".";
			        exit 1;
			fi;
                ;;
                --driver-kernel)
 			KERNEL_LEVEL=1;	
		;;
                --driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				echo "ldv-core: ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
			driver=`readlink -f $rdriver`;
			if [ $? -ne 0 ]; then
				echo "ldv-core: ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
			        exit 1;
			fi;
			if [ ! -f "$driver" ]; then
			        echo "ldv-core: ERROR: Driver sources not exists: \"$driver\".";
			        exit 1;
			fi;
                ;;
                *)
                        echo "ldv-core: ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done

TEMP_DIR=$WORK_DIR/$LDV_TEMPDIR_NAME;
mkdir $TEMP_DIR;
if [ $? -ne 0 ]; then
        echo "ldv-core: ERROR: Failed to create next working dir for bce: \"$TEMP_DIR\"."
        exit 1;
fi;

DRIVER_DIR=$TEMP_DIR/$DRIVER_DIR_NAME;
mkdir $DRIVER_DIR;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Failed to create driver dir for next instrument:\"$DRIVER_DIR\"."
        exit 1;
fi;

UNARCH_LOG=$TEMP_DIR/$EXTRACTOR_LOG_FILENAME;
touch $UNARCH_LOG;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Failed to create log for unarchiver: \"$UNARCH_LOG\".";
	exit 1;
fi;

if [ $KERNEL_LEVEL -eq 0 ]; then
	#
	# test format for driver file and unpack driver
	#
	case `file -b $driver --mime-type` in
		application/x-bzip2)
			tar xvjpf $driver -C $DRIVER_DIR > $UNARCH_LOG 2>&1;; 
		application/x-gzip)
			tar xvzpf $driver -C $DRIVER_DIR > $UNARCH_LOG 2>&1;; 
		*)
			ldv_print "ERROR: Unknown driver source type.";
			exit 1;;
	esac
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Failed to unpacked archive: \"$driver\"."
	        exit 1;
	fi;
else
	cp -r $env $TEMP_DIR/"kdriver";
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can't copy drivers source code.";
		exit 1;
	fi;
	env=$TEMP_DIR/"kdriver";
fi;

XML_AFTER_BCE=$TEMP_DIR/$XML_FILENAME_AFTER_BCE;
ldv_print "DEBUG: *********** Try to call Build Command Extractor ***********";

if [ $KERNEL_LEVEL -eq 0 ]; then
	ldv_print "DEBUG: WORK_DIR=$TEMP_DIR $BCE --env=$env --driver=$DRIVER_DIR --cmdfile-out=$XML_AFTER_BCE;"
	WORK_DIR=$TEMP_DIR $BCE --env=$env --driver=$DRIVER_DIR --cmdfile-out=$XML_AFTER_BCE;
else
	ldv_print "DEBUG: WORK_DIR=$TEMP_DIR $BCE --env=$env --driver-kernel ----cmdfile-out=$XML_AFTER_BCE;"
	WORK_DIR=$TEMP_DIR $BCE --env=$env --driver-kernel --cmdfile-out=$XML_AFTER_BCE;
fi;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Cmd extractor failed."
        exit 1;
fi;

XML_AFTER_DEG=$TEMP_DIR/$XML_FILENAME_AFTER_DEG;
ldv_print "DEBUG: *********** Try to call Driver Environment Generator  ***********";
ldv_print "DEBUG: WORK_DIR=$TEMP_DIR $DEG --cmdfile=$XML_AFTER_BCE --cmdfile-out=$XML_AFTER_DEG;";
WORK_DIR=$TEMP_DIR $DEG --basedir="deg_tempdir1" --cmdfile=$XML_AFTER_BCE --cmdfile-out=$XML_AFTER_DEG;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Drv-env-gen failed."
        exit 1;
fi;
if [ ! -f "$XML_AFTER_DEG" ]; then
	ldv_print "ERROR: Cmd file after DEG not exists: \"$XML_AFTER_DEG\".";
	exit 1;
fi;
DSCV_TEMPDIR=$TEMP_DIR/$DSCV_WORK_DIRNAME"1";
mkdir $DSCV_TEMPDIR;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't create DSCV tempdir: \"$DSCV_TEMPDIR\".";
	exit 1;
fi;
ldv_print "DEBUG: *********** Try to call Domain Speicific C-Verifier ***********";
ldv_print "DEBUG: LDV_RULE_DB=$LDV_RULE_DB WORK_DIR=$DSCV_TEMPDIR $DSCV --cmdfile=$XML_AFTER_DEG --rule-models=$rulemodels";
LDV_RULE_DB=$LDV_RULE_DB WORK_DIR=$DSCV_TEMPDIR $DSCV --cmdfile=$XML_AFTER_DEG --rule-models=$rulemodels
if [ $? -ne 0 ]; then
        ldv_print "DRROR: DSCV failed."
        exit 1;
fi;



