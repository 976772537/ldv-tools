#!/bin/sh

#
# env var WORK_DIR
# ldv-core --env=envdir --driver=driver --rule-models=rules
#

XML_FILENAME_AFTER_BCE="cmd_after_bce.xml";
XML_FILENAME_AFTER_CSD="cmd_after_csd";
XML_FILENAME_AFTER_DEG="cmd_after_deg.xml";

DEG_STATE_FILENAME="deg.state";
CSD_STATE_FILENAME="csd.state";

DEG_REPORT_FILENAME="report_after_deg.xml";
CSD_REPORT_FILENAME="report_after_csd.xml";
BCE_REPORT_FILENAME="report_after_bce.xml";
DSCV_REPORT_FILENAME="report_after_dscv.xml";

DSCV_TEMPDIR_NAME="dscv_tempdir";
CSD_TEMPDIR_NAME="csd_tempdir";
DEG_TEMPDIR_NAME="deg_tempdir";
BCE_TEMPDIR_NAME="bce_tempdir";
CSD_DEG_DSCV_TEMPDIR_NAME="csd_deg_dscv";

LOG_MIRROR_TO_CONSOLE=1;
DRIVER_DIR_NAME="driver";
EXTRACTOR_LOG_FILENAME="unarch.log";


LDV_HOME=`readlink -f \`dirname $0\`/../`;
LOG_PREFIX="ldv-core: ";
USAGE_STRING="WORK_DIR=workdir ldv-core --env=kerneldir --driver=driverpath --rule-models=rulemodels";
source $LDV_HOME/shared/sh/log.sh;

BCE_DIRNAME="build-cmd-extractor";
BCE_DIR=$LDV_HOME/$BCE_DIRNAME;
CSD="java -ea -jar $BCE_DIR/csd.jar";
CSD_REPORTER="$BCE_DIR/cmd-stream-divider-reporter";

LDV_TEMPDIR_NAME="ldv_tempdir";

LDV_RULE_DB_DIRNAME="kernel-rules";
LDV_RULE_DB=$LDV_HOME/$LDV_RULE_DB_DIRNAME;

LDVC_DIR="$LDV_HOME/ldv-core";
LDVC_REPORTER="$LDVC_DIR/ldv-core-reporter";

BCE_DIR="$LDV_HOME/build-cmd-extractor";
BCE="$BCE_DIR/build-cmd-extractor";
BCE_REPORTER="$BCE_DIR/build-cmd-extractor-reporter";

DEG_DIR="$LDV_HOME/drv-env-gen";
DEG="$DEG_DIR/drv-env-gen";
DEG_REPORTER="$DEG_DIR/drv-env-gen-reporter";

DSCV_DIR="$LDV_HOME/bin/";
DSCV="$DSCV_DIR/dscv";

RINSTR_DIR="$LDV_HOME/rule-instrumentor";
RINSTR="$RINSTR_DIR/rule-instrumentor.pl";

KERNEL_LEVEL=0;

if [ ! -n "$WORK_DIR" ]; then
	ldv_print "ERROR: Please, setup WORK_DIR variable before running ldv-core.";
	exit 1;
fi;
WORK_DIR=`readlink -f $WORK_DIR`;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Failed to read abs-path for working dir: \"$WORK_DIR\"."
        exit 1;
fi;
if [ ! -d "$WORK_DIR" ]; then
        ldv_print "ERROR: Working directory does not exists: \"$WORK_DIR\".";
        exit 1;
fi;

#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --rule-models=*)
                	rulemodels=`echo $arg | sed 's/--rule-models=//g'`
			if [ ! -n "$rulemodels" ]; then
				ldv_print "ERROR: Parameter \"--rule-models\" - is null. Setup it.";
			        exit 1;
			fi;
                ;;
		--report-out=*)
                	rreportout=`echo $arg | sed 's/--report-out=//g'`
			if [ ! -n "$rreportout" ]; then
				ldv_print "ERROR: Parameter \"--report-out\" - is null. Setup it.";
			        exit 1;
			fi;
			reportout=`readlink -f $rreportout`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for out report file: \"$rreportout\"."
			        exit 1;
			fi;
			if [ -d "$reportout" ]; then
			        ldv_print "ERROR: Report file already exists as dir: \"$reportout\".";
			        exit 1;
			fi;
			if [ -f "$reportout" ]; then
			        ldv_print "ERROR: Out report file already exists: \"$reportout\".";
			        exit 1;
			fi;
               	;;
		--env=*)
                	renv=`echo $arg | sed 's/--env=//g'`
			if [ ! -n "$renv" ]; then
				ldv_print "ERROR: Parameter \"--env\" - is null. Setup it.";
			        exit 1;
			fi;
			env=`readlink -f $renv`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for environment dir: \"$renv\"."
			        exit 1;
			fi;
			if [ ! -d "$env" ]; then
			        ldv_print "ERROR: Environment dir not exists: \"$env\".";
			        exit 1;
			fi;
                ;;
                --kernel-driver)
 			KERNEL_LEVEL=1;	
		;;
                --driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
                ;;
                *)
                        ldv_print "ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done

if [ $KERNEL_LEVEL -eq 0 ]; then
	driver=`readlink -f $rdriver`;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
	        exit 1;
	fi;
	if [ ! -f "$driver" ]; then
	        ldv_print "ERROR: Driver sources not exists: \"$driver\".";
	        exit 1;
	fi;
else 
	driver=$rdriver;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can't get abs path for driver in kernel.";
		exit 1;
	fi;
fi;
if [ ! -n $reportout ]; then
	ldv_print "ERROR: Please setup out report file option: \"--report-out\".";
fi;
if [ ! -n $rulemodels ]; then
	ldv_print "ERROR: Please setup rules and models in option: \"--rulemodels\".";
fi;
if [ ! -n $env ]; then
	ldv_print "ERROR: Please setup environment in option: \"--env\".";
fi;
if [ ! -n $driver ]; then
	ldv_print "ERROR: Please setup driver in option: \"--driver\".";
fi;

TEMP_DIR=$WORK_DIR/$LDV_TEMPDIR_NAME;
mkdir $TEMP_DIR;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Failed to create next working dir for bce: \"$TEMP_DIR\"."
        exit 1;
fi;

UNARCH_LOG=$TEMP_DIR/$EXTRACTOR_LOG_FILENAME;
touch $UNARCH_LOG;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Failed to create log for unarchiver: \"$UNARCH_LOG\".";
	exit 1;
fi;

DRIVER_DIR=$TEMP_DIR/$DRIVER_DIR_NAME;
if [ $KERNEL_LEVEL -eq 0 ]; then
	ldv_print "NORMAL: Prepare driver."
	mkdir $DRIVER_DIR;
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Failed to create driver dir for next instrument:\"$DRIVER_DIR\"."
	        exit 1;
	fi;
	#
	# test format for driver file and unpack driver
	#
	case `file -b $driver --mime-type` in
		application/x-bzip2)
			tar xvjpf $driver -C $DRIVER_DIR > $UNARCH_LOG 2>&1;; 
		application/x-gzip)
			tar xvzpf $driver -C $DRIVER_DIR > $UNARCH_LOG 2>&1;; 
		*)
			ldv_print "ERROR: Unknown driver source type.";
			exit 1;;
	esac
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Failed to unpacked archive: \"$driver\"."
	        exit 1;
	fi;
else
	ldv_print "NORMAL: Copy in-kernel driver environment."
	ldv_print "DEBUG: cp -r $env $DRIVER_DIR;"
	cp -r $env $DRIVER_DIR;
	env=$DRIVER_DIR;
	DRIVER_DIR=$driver;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can't copy drivers source code.";
		exit 1;
	fi;
fi;

BCE_TEMPDIR=$WORK_DIR/$BCE_TEMPDIR_NAME;
XML_AFTER_BCE=$BCE_TEMPDIR/$XML_FILENAME_AFTER_BCE;
ldv_print "NORMAL: Calling Build Command Extractor";
if [ $KERNEL_LEVEL -eq 1 ]; then koption=--kernel-driver; fi;
ldv_print "DEBUG: LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $BCE --env=$env --basedir=$BCE_TEMPDIR_NAME --driver=$DRIVER_DIR --cmdfile-out=$XML_AFTER_BCE $koption;"
LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $BCE --env=$env --basedir=$BCE_TEMPDIR_NAME --driver=$DRIVER_DIR --cmdfile-out=$XML_AFTER_BCE $koption;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: Cmd extractor failed."
        exit 1;
fi;

#
# Try to call CSD:
#   CSD_TEMPDIR_NAME - directory in WORK_DIR where contains:
#     files XML_FILENAME_AFTER_CSD[index].xml
#
ldv_print "NORMAL: Calling Command Stream Divider.";
#ldv_print "DEBUG:                                                                  ";
#ldv_print "DEBUG:  Option \"--print-digraph\" shown graph for graphviz tool.       ";
#ldv_print "DEBUG:  You can see this graph in graphical mode:                       ";
#ldv_print "DEBUG:     - copy to FILE all in \"diraph G{...}\".                     ";
#ldv_print "DEBUG:     - call: dot -Tpng ./FILE -o ./FILE.png & gwenview ./FILE.png ";
#ldv_print "DEBUG:                                                                  ";

CSD_TEMPDIR=$WORK_DIR/$CSD_DEG_DSCV_TEMPDIR_NAME;
CSD_STATE=$CSD_TEMPDIR/$CSD_STATE_FILENAME;
if [ $KERNEL_LEVEL -eq 1 ]; then
	ldv_print "LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $CSD --split-on --print-digraph --cmdfile=$XML_AFTER_BCE --basedir=$CSD_DEG_DSCV_TEMPDIR_NAME --cmdfile-out=$XML_FILENAME_AFTER_CSD --state-file=$CSD_STATE;";
	LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $CSD --split-on $PRINT_DIGRAPH_OPTION --cmdfile=$XML_AFTER_BCE --basedir=$CSD_DEG_DSCV_TEMPDIR_NAME --cmdfile-out=$XML_FILENAME_AFTER_CSD --state-file=$CSD_STATE;
else
	ldv_print "LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $CSD --full-copy --split-on --print-digraph --cmdfile=$XML_AFTER_BCE --basedir=$CSD_DEG_DSCV_TEMPDIR_NAME --cmdfile-out=$XML_FILENAME_AFTER_CSD --state-file=$CSD_STATE;";
	LDV_DEBUG=$LDV_DEBUG WORK_DIR=$WORK_DIR $CSD --full-copy --split-on $PRINT_DIGRAPH_OPTION --cmdfile=$XML_AFTER_BCE --basedir=$CSD_DEG_DSCV_TEMPDIR_NAME --cmdfile-out=$XML_FILENAME_AFTER_CSD --state-file=$CSD_STATE;
fi;
if [ $? -ne 0 ]; then
       ldv_print "ERROR: Command stream divider failed.";
       exit 1;
fi;
CSD_DEG_DSCV_TEMPDIR=$WORK_DIR/$CSD_DEG_DSCV_TEMPDIR_NAME;
if [ ! -d $CSD_DEG_DSCV_TEMPDIR ]; then
       ldv_print "ERROR: Can't find command stream divider temp directory:\"$CSD_DEG_DSCV_TEMPDIR_NAME\".";
       exit 1;
fi;

# 
# Find all xml files in csd_tempdir and try to call all other instruments
#
for xml_after_csd in `find $CSD_DEG_DSCV_TEMPDIR -maxdepth 1 -regex ".*$XML_FILENAME_AFTER_CSD[0-9]+\.xml$" -type f`; do
	LAST_DRIVER_DIR=`cat $xml_after_csd | grep '<basedir>' | sed 's/<basedir>//' | sed 's/<\\/basedir>//'`;
	if [ ! -d $LAST_DRIVER_DIR ]; then
		ldv_print "ERROR: Can't find driver dir from csd xml.";
		exit 1;
	fi;
	CURRENT_TEMPDIR_NAME=`echo $xml_after_csd | sed 's/^.*'$XML_FILENAME_AFTER_CSD'\([0-9]\+\)\.xml$/\1/'`;
	ldv_print "NORMAL: Process driver number $CURRENT_TEMPDIR_NAME.";
	CURRENT_TEMPDIR=$CSD_DEG_DSCV_TEMPDIR/$CURRENT_TEMPDIR_NAME;
	mkdir $CURRENT_TEMPDIR;
	if [ $? -ne 0 ]; then
	       ldv_print "ERROR: Can't create deg temp directory: \"$CURRENT_TEMPDIR\".";
	       exit 1;
	fi;
	DEG_TEMPDIR=$CURRENT_TEMPDIR/$DEG_TEMPDIR_NAME;
	XML_AFTER_DEG=$DEG_TEMPDIR/$XML_FILENAME_AFTER_DEG;
	DEG_STATE=$DEG_TEMPDIR/$DEG_STATE_FILENAME;
	ldv_print "NORMAL: Calling Driver Environment Generator";
	ldv_print "DEBUG: LDV_DEBUG=$LDV_DEBUG WORK_DIR=$CURRENT_TEMPDIR $DEG --cmdfile=$xml_after_csd --cmdfile-out=$XML_AFTER_DEG --state-file=$DEG_STATE $koption;";
	LDV_DEBUG=$LDV_DEBUG WORK_DIR=$CURRENT_TEMPDIR $DEG --basedir=$DEG_TEMPDIR_NAME --cmdfile=$xml_after_csd --cmdfile-out=$XML_AFTER_DEG --state-file=$DEG_STATE $koption;
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: Drv-env-gen failed."
	        exit 1;
	fi;
	if [ ! -f "$XML_AFTER_DEG" ]; then
		ldv_print "ERROR: Cmd file after DEG not exists: \"$XML_AFTER_DEG\".";
		exit 1;
	fi;
	DSCV_TEMPDIR=$CURRENT_TEMPDIR/$DSCV_TEMPDIR_NAME;
	mkdir $DSCV_TEMPDIR;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can't create DSCV tempdir: \"$DSCV_TEMPDIR\".";
		exit 1;
	fi;
	DSCV_REPORT=$DSCV_TEMPDIR/$DSCV_REPORT_FILENAME;
	ldv_print "NORMAL: Calling Domain Speicific C-Verifier";
	ldv_print "DEBUG: LDV_RULE_DB=$LDV_RULE_DB WORK_DIR=$DSCV_TEMPDIR $DSCV --cmdfile=$XML_AFTER_DEG --rule-models=$rulemodels --report-out=$DSCV_REPORT";
	LDV_RULE_DB=$LDV_RULE_DB WORK_DIR=$DSCV_TEMPDIR $DSCV --cmdfile=$XML_AFTER_DEG --rule-models=$rulemodels --report-out=$DSCV_REPORT;
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: DSCV failed."
	        exit 1;
	fi;

	DEG_REPORT=$DEG_TEMPDIR/$DEG_REPORT_FILENAME;
	ldv_print "NORMAL: Calling Driver Environment Generator reporter.";
	ldv_print "DEBUG: $DEG_REPORTER --cmdfile=$xml_after_csd --report-in=$DSCV_REPORT --report-out=$DEG_REPORT --state-file=$DEG_STATE;";
	$DEG_REPORTER --cmdfile=$xml_after_csd --report-in=$DSCV_REPORT --report-out=$DEG_REPORT --state-file=$DEG_STATE;
	if [ $? -ne 0 ]; then
	        ldv_print "ERROR: DEG reporter failed."
	        exit 1;
	fi;

	ldv_print "NORMAL: Driver number $CURRENT_TEMPDIR_NAME successfully verified.";
done;

#
# add build command stream divider reports
#
CSD_REPORT=$CSD_TEMPDIR/$CSD_REPORT_FILENAME;
ldv_print "NORMAL: Calling Command Stream Divider reporter.";
ldv_print "DEBUG: $CSD_REPORTER --cmdfile=$XML_AFTER_BCE --report-name=$DEG_REPORT_FILENAME --report-out=$CSD_REPORT --state-file=$CSD_STATE --reports-dir=$CSD_DEG_DSCV_TEMPDIR;";
$CSD_REPORTER --cmdfile=$XML_AFTER_BCE --report-name=$DEG_REPORT_FILENAME --report-out=$CSD_REPORT --state-file=$CSD_STATE --reports-dir=$CSD_DEG_DSCV_TEMPDIR;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: CSD reporter failed."
        exit 1;
fi;

#
# add build command extractor reports
#
BCE_REPORT=$BCE_TEMPDIR/$BCE_REPORT_FILENAME;
ldv_print "NORMAL: Calling Build Commmand Extractor Reporter.";
ldv_print "DEBUG: $BCE_REPORTER --report-in=$CSD_REPORT --report-out=$BCE_REPORT --state-dir=$BCE_TEMPDIR;";
$BCE_REPORTER --report-in=$CSD_REPORT --report-out=$BCE_REPORT --state-dir=$BCE_TEMPDIR;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: BCE reporter failed."
        exit 1;
fi;

#
# add ldv-core reports
#
ldv_print "NORMAL: Calling LDV-Core Reporter.";
ldv_print "DEBUG: $LDVC_REPORTER --report-in=$BCE_REPORT --report-out=$reportout --state-dir=$TEMP_DIR;";
$LDVC_REPORTER --report-in=$BCE_REPORT --report-out=$reportout --state-dir=$TEMP_DIR;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: LDV-Core reporter failed."
        exit 1;
fi;

exit;


