#!/usr/bin/env ruby
#
# Recalculate Problems in the database, given new scripts

require 'rubygems'
require 'active_record'
require 'find'
require 'optparse'

ENV['LDV_SRVHOME'] ||= File.expand_path("../",File.dirname(__FILE__))
manhome = File.join(ENV['LDV_SRVHOME'],"ldv-manager")

$:.unshift File.join(ENV['LDV_SRVHOME'],'shared','ruby','lib')
require File.join(manhome,"upload_utils.rb")

sql = ldv_db_connect

# We should connect before we load our data model
require File.join(manhome,"results_model.rb")

options = {}
OptionParser.new do |opts|
	opts.banner = "Usage: #{$0} [--no-clear]"
	opts.define_head "Recalculate problems in the LDV results database"

	opts.on "--no-clear", "Do not clear the whole database before recalculating" do
		options[:no_clear] = true
	end

	opts.on "--last COUNT", "Only recalculate problems for last COUNT entries" do |count|
		options[:last] = count
	end
end.parse!

# By default (and this is the only option), we just recalculate everything
$stderr.write "ldv-problem-recalc: WARNING! ARGUMENTS ARE DEPRECATED AND NOT USED!\n" unless ARGV.empty?

# All tools, all standard scripts
recalc_one = proc do |trace|
	Trace.tools.each do |tool,v|
		if tool_stat = trace.send(tool)
			# Clear here if we do not recalc all problems
			tool_stat.problems = [] if options[:last] && !options[:no_clear]
			tool_stat.calc_problems(File.join(manhome, "problems", tool))
		end
	end
end

if last = options[:last]
	Trace.find(:all,:limit => last,:order => "id DESC").each {|t| recalc_one[t] }
else
	unless options[:no_clear]
		Problem.clear_all(sql)
		puts "ldv-problem-recalc: All problems have been deleted from database, and will now be recalculated..."
	end
	Trace.all.each {|t| recalc_one[t] }
end

