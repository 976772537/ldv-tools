#!/usr/bin/env ruby
require 'rubygems'
require 'active_record'
require 'find'
require 'rexml/document'
require 'fileutils'
require 'optparse'

# NOTE that this is a developer-only script for now.

ENV['LDV_SRVHOME'] ||= File.expand_path("../",File.dirname(__FILE__))
manhome = File.join(ENV['LDV_SRVHOME'],"ldv-manager")
$:.unshift File.join(ENV['LDV_SRVHOME'],'shared','ruby','lib')

# Due to a huge size of a log, it's not useful to print warnings as they appear.  Instead, we just save them here.
warnings = []

print_warnings = proc do
	unless warnings.empty?
		$stderr.puts "\nWARNINGS (#{warnings.length}):"
		warnings.each {|w| $stderr.puts w }
		$stderr.puts ""
	end
end

Kernel.trap('INT', print_warnings)

require File.join(manhome,"upload_utils.rb")
# We should connect before we load our data model
require File.join(manhome,"results_model.rb")

class StatsStreamFactory
	def initialize(tag_name)
		@tag_name = tag_name
		@detailed_times = []
	end

	def read s
		ass {s.start_of? @tag_name}
		s.read
		while !s.end_of? @tag_name do
			if s.start_of? 'status'
				@success = s.consume_contents == 'OK'
			elsif s.start_of? 'loc'
				@loc = s.consume_contents.to_i || 0
			elsif s.start_of? 'time'
				pattern = s['name']
				time_values_string = s.consume_contents
			elsif s.start_of? 'desc'
				@description = (s.consume_contents || '')
			else
				warnings << "unknown tag under stats, line #{s.line_number}"
				s.next
			end
		end
		s.read
		true
	end
	attr_reader :detailed_times
	def yield
		[@success,@loc,@description]
	end
end

class LaunchStreamFactory

	def self.init_global_params(a)
		@@driver_origin = a[:driver_origin]
		@@driver_name = a[:driver_name]
		@@git_tag = a[:git_tag]
		@@global_verifier = a[:global_verifier] || "model-specific"
		@@task = a[:task]
	end

	def initialize(can_load_build = false)
		@can_load_build = can_load_build
	end

	# Peek XML stream +s+, and if it's applicable to initializing a field of the launch, read until the end of it and do the proper initialization.  The stream should point to the beginning or ending of <ld> tag itself, or to the beginning of one of its children.
	# Returns if it has advanced the parser
	def read s
		# Load tag-related information

		if s.start_of_these? ['ld'] + (@can_load_build ? ['build'] : [])
			@kernel_name = s['kernel']
		end
		if s.start_of? 'ld'
			@rule_model_name = s['model']
			if s['module_name'] || s['main']
				# If we have only "module_name" it may be a module, in which no names were found.  We should add this to the database anyway, but just insert an empty string instead of main name.
				main_name = s['main'] || ''
				# If we have only "main", but no "module name" specified, we fail!
				# FIXME just like the main above if it's necessary
				module_name = s['module_name'] or raise "module_name attribute is empty for ld #{s['ref']}.  Fix ldv-upload or reporter!"
				@scenario = "#{module_name}	#{main_name}"
			else
				@scenario = nil
			end
			# Do not advance reader!  In this case it will be advanced by the outer process
		end
		false
	end

	def yield
		"#{@kernel_name}	#{@rule_model_name}	#{@scenario}"
	end

	attr_reader :kernel_name, :local_driver_name, :rule_model_name

end

options = {}
$kernel_filter_regexp = nil

OptionParser.new do |opts|
	opts.banner = "Usage: #{$0} [--xml report.xml] archive.pax"
	opts.define_head "Task uploader from LDV PAX archive with results to a database"

	opts.on "--xml FILE", "XML file name to be used as report" do |xml_fname|
		options[:xml_fname] = xml_fname
	end

	opts.on "--modfilter MODULE_PREFIX", "Only load modules that start with the prefix specified" do |module_prefix|
		$modprefix = module_prefix
	end

	opts.on "--kernel-filter regexp", "Only load modules that start with the prefix specified" do |kernel_regexp|
		$kernel_filter_regexp = Regexp.new(kernel_regexp)
	end

	opts.on "--debug", "Debug output" do |xml_fname|
		$debug = true
	end

end.parse!

# Unpack and load document (if necessary)
if options[:xml_fname]
	filename = options[:xml_fname]
else
	tmpdir=`mktemp -d`.chomp
	paxname = ARGV[0] or raise "Specify the package name, please"
	paxname = File.expand_path(paxname)
	Dir.chdir(tmpdir) do |dir|
		# Unpack to temporary dir (-O for large archives)
		Kernel.system("pax","-O","-r","-f",paxname) or raise "pax didn't work."
	end
	$stderr.write "Unpacked to: #{tmpdir}\n"
# Get report name
	filenames = Dir.glob(File.join(tmpdir,'*.report.xml'))
	raise "Only one report in the archive given should match *.report.xml pattern!  These found: #{filenames.join(",")}" if filenames.size != 1

	filename = filenames[0]
end

require 'xml'

begin

# Initialize document parser
docs = XML::Reader.file filename
# FIXME: temporal poring feature
doc = docs

docs.read
#asseq XML::Reader::TYPE_XML_DECLARATION, docs.node_type
asseq 'reports', docs.name

# In sake of simplicity we require the first element to be "launch_info"
docs.read
asseq 'launch_info', docs.name

# read the whole <launch_info> and skip it in the stream
launch_info_tag = docs.consume

driver_name = launch_info_tag.field("driver")
driver_origin = launch_info_tag.field("driver_origin")
git_tag = launch_info_tag.field("tag")

# Get verifier name
global_verifier = launch_info_tag.field("globalverifier")

# Create current task unless it's already added
#task = Task.from_xml(launch_info_tag.element("task"))

# Fetch dources (due to not very beautiful structure of the output reports, the sources are fetched beforehand).
sources={}
sources_for_kernel={}
# Sources may not have been unpacked in some modes
if tmpdir
	sources_dir = File.join(tmpdir,"sources/")
	# Traces will be taken from this folder
	traces_dir = File.join(tmpdir,"traces")
end

builds = {}

potential_master = []

# Do not report warnings if these tags are encountered in <ld> tags
tags_to_ignore = %w(model-kind in out cwd opt file)

while not docs.end_of? 'reports' do
	# This should read one of the children of 'reports' tag
	asseq XML::Reader::TYPE_ELEMENT, docs.node_type

	# Skip nodes we're not interested in...
	if docs.name == 'ld'
		# Skip the module if necessary
		if $modprefix && !docs['module_name'].start_with?($modprefix)
			$stderr.puts "Skipping #{docs['module_name']} as it doesn't comply to modfilter #{$modprefix}"
			docs.next
			next
		end
	elsif docs.start_of? 'build'

		# Create a pseudo-launch for this build (we should read headers at once.  We will only need this fake launch in case of build failure, but we don't know if the build described is a failed one)
		failed_build_launch_loader = LaunchStreamFactory.new(true)
		# Load attributes of <ld> into launch
		failed_build_launch_loader.read docs

		# Memorize information about the encountered builds
		stats_reader = StatsStreamFactory.new('build')
		stats_reader.read docs
		build_rec = stats_reader.yield
		unless build_rec[0]
			launch = failed_build_launch_loader.yield

			# Check if kernel complies to the filter
			if $kernel_filter_regexp
				unless $kernel_filter_regexp.match(failed_build_launch_loader.kernel_name)
					puts "Skipping build for kernel #{failed_build_launch_loader.kernel_name}, because it doesn't match the filter."
					next
				end
			end

			puts "Build failed for #{launch.inspect}:\n#{build_rec[2]}"
		end
		builds[docs['kernel']] = stats_reader.yield
		next
	else
		# Just skip non-ld nodes
		$stderr.puts "Skipping #{docs.name}" if $debug
		docs.consume
		next
	end

	# Upload LD node
	ld_ref = docs['ref']
	ld_kernel = docs['kernel']

	# Check if kernel complies to the filter
	if $kernel_filter_regexp
		unless $kernel_filter_regexp.match(ld_kernel)
			puts "Skipping ld #{ld_ref || 'UNKNOWN! ref is not set!'} because kernel #{ld_kernel} doesn't match the filter."
			docs.consume
			next
		end
	end

	#puts "Uploading ld #{ld_ref || 'UNKNOWN! ref is not set!'}..."

	# Handler for common launch routines
	launch_loader = LaunchStreamFactory.new
	# Load attributes of <ld> into launch
	launch_loader.read docs

	# LD's verdict
	verdict = 'unknown'
	# LD's status (see ldv_statuses in ldv-manager)
	status = 'ok'
	# LD's source file refereces
	source_files = []
	# LD's trace file name
	trace_fname = nil
	# LD's verifier used
	verifier = nil

	trace = {}


	docs.read
	# Read the whole tag
	while not docs.end_of? 'ld' do
		# Consume an element of a generic launch, if applicable
		launch_loader.read docs and next

		# Check the current tag
		if docs.start_of? "ldv_status"
			status = docs.consume_contents.downcase
		elsif docs.start_of? "verdict"
			verdict = docs.consume_contents.downcase
		elsif docs.start_of? "sourcefile"
			source_files << docs.consume_contents
		elsif docs.start_of? "trace"
			trace_fname = docs.consume_contents
		elsif docs.start_of? "verifier"
			verifier = docs.consume_contents
		elsif which = docs.start_of_these?(Trace.tools.values)
			# Read RCV's verifier
			verifier = docs['verifier'] || verifier
			# Read stats of this tool
			stats_reader = StatsStreamFactory.new(which)
			stats_reader.read docs
			trace[which] = stats_reader.yield
		else
			# FIXME: hack to suppress wtf
			warnings << "unknown tag under LD=#{ld_ref}: #{docs.name}" unless tags_to_ignore.include? docs.name
			docs.next
			next
		end
	end
	docs.read

	# Compose the launch record
	launch = launch_loader.yield
	puts launch
	puts "	Verdict: #{verdict}"

	#Imbue verdict into the trace
	unsafe = verdict=="unsafe"
	#trace.result=verdict
	#trace.result='unknown' if verdict.empty?

	if unsafe
		#puts source_files.inspect

		# Get trace itself (we check for traces_dir as we may be in the mode that doesn't have any files)
		if trace_fname && traces_dir
			trace_abs_fname=File.join(traces_dir,trace_fname)
			puts "\tTrace: #{trace_abs_fname}" if File.exists?(trace_abs_fname)
		end
	end

	# Run scripts that check for problems
	Trace.tools.each do |tool,v|
		if tool_stat = trace[tool]
			raw_calc_problems(tool_stat[2],File.join(manhome, "problems", tool)) do |line|
				puts "\tProblem: #{line}"
			end
		end
	end

	puts ''

end

if $online
	# Update status of special tasks that have driver, kernel and rule set, but don't have any model
	# Let's track already processed items to save db queries
	puts "Setting up master launches (online mode only)..."
	potential_master.each do |pl|
		# We select all relevant launches but reject them on the basis of if they're already "fixed" in masters table--i.e. were uploaded as failed
		launches = pl.master_launches { |l| masters.lookup(l.environment.version,l.driver.name,(l.rule_model.nil?? "nil" : l.rule_model.name)) }
		launches.each do |launch|
			launch.status = 'finished'
			# Because of :autosave property, recursively saves all records
			launch.save or $stderr.write "VALIDATION ERROR: #{launch.errors.full_messages.join("\n")}\n"
			masters.fix(launch.environment.version,launch.driver.name,(launch.rule_model.nil?? "nil" : launch.rule_model.name))
		end
	end
end

# Remove temporary directory on success (keep it if something failed, we might want to examine it!)
FileUtils.remove_dir(tmpdir) if tmpdir


ensure
# Report address where to look for results
print_warnings.call

end
