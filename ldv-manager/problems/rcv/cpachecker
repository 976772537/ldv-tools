#!/usr/bin/perl
# Problem finder for CPAchecker tool

$\ = "\n";
$, = "\n";
while (<>){
	chomp;
	/Error: Parsing failed \(unknown character literal in line (\d+): '\\v'/ and print "\\v";
	/Syntax error in line / and print "Syntax_error";
	/Expression is not free of side-effects/ and print "Side";
	/Invalid configuration: Function ldv_main(.*) not found!/ and print "Main not found";
	/unknown initializer: CASTDesignatedInitializer/ and print "CASTDesignatedInitializer";
	/Unknown unary operator/ and print "Unary";
	/Duplicate label (.*) in function/ and print "Duplicate label";
	/File (.*) does not exist!/ and print "File not exists";
	/AbstractGNUSourceCodeParser.parseCompoundStatement/ and print "Compound statement";
	/CPAchecker.run, SEVERE/ and print "SEVERE";
	/java.lang.OutOfMemoryError: (.*)/ and print "Java OutOfmemory";
	/java.lang.AssertionError/ and print "Assertion";
	#/org.sosy_lab.cpachecker.util.predicates.CtoFormulaConverter.buildLvalueTerm/ and print "CtoFormulaConverter"; collision with Out of memory
	/java.lang.AssertionError: org.sosy_lab.cpachecker.cfa.ast.IASTBinaryExpression/ and print "IASTBinaryExpression";
	/org.sosy_lab.cpachecker.util.predicates.mathsat.MathsatInterpolatingProver.getInterpolant/ and print "MathsatInterpolatingProver";
	/No new predicates/ and print "NoNewPredicates"; #org.sosy_lab.cpachecker.exceptions.RefinementFailedException[No new predicates]
	/cpa.sh: line (.*): (.*) Aborted/ and print "Aborted";
	/__builtin_va_arg/ and print "__builtin_va_arg";
	/Unsupported C feature(.*)recursion/ and print "Recursion";
	/Exception(.*)CProblemType/ and print "CProblemType";
	/C(.*)Type(.*).toASTString/ and print "Recursive type";
	/Invalid instance/ and print "Invalid instance";
	/Unrecognized C code/ and print "Unrecognized code";

	# CIL errors
	# subtypes of CIL_parse_error
	# Error: global static initializer
	# Error: There were errors during merging
	# subtypes of Parsing errors
	# Cannot compute sizeof: abstract type: (.*)
	# different number of fields in
	# The name (.*) is used for two distinct globals
}


