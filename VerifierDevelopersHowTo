	Linux Driver Verification (LDV)

	HowTo for Developers of static Verifiers


One of the aims of the LDV program is helping developers of Static Analysis
tools ("verifiers") to create better instruments.  Driver sources aren't hard to
verify, and their varying size fits well the purpose of scalability testing.
This file lists the options the developers of verifiers have, and provides help
for those who might want to use CPAchecker with our tools.

Modular architecture of LDV tools makes it possible to replace one verifier with
another, as long as the tool can solve reachability problem for C language.  We
call such tools "Reachability C Verifiers" (or, RCVs).

We have developed an interface to plug in such verifiers into the LDV tools.
The interface hides all the LDV implementation details from the user.  What
user needs is to write a small program that composes a command line from the
incoming verification task parameters, and interprets the results of the run in
a tool-specific way.

We prepared such wrappers to plug in BLAST and CPAchecker verifiers into our
tools.  You may study and copy-paste them to write a good wrapper for your tool.


HOW TO WRITE A WRAPPER
======================

Before you start, you should install the LDV tools.  For installation
instructions, please, refer to INSTALL and TUTORIAL files.  If you do not plan
to use the default BLAST verifier, you may avoid compiling it (and installing
prerequisites for it!) by specifying an additional environment variable
"no_blast=y" when you run "make install".

A wrapper is a Perl script that is evaluated in the context of another Perl
script.  To develop a wrapper, you may copy an extensively commented CPAchecker
wrapper, which resides in dscv/rcv/cpachecker, and adjust it to call your tool
instead.

Whenever you want to check if you wrote the wrapper correctly, just create a
small C file with main() as an entry point and ERROR label as an error location,
and run the DSCV script from the previously installed LDV tools:

  dscv --rcv-verifier=/path/to/wrapper inline files your_file.c

Then examine the report or the console log (increasing verbosity might help; see
the next section) for errors in your wrapper script. (Note that statistics
visualizer in browser won't help you here.)


HOW TO CARRY ON EXPERIMENTS WITH YOUR TOOL AND LINUX DRIVERS
============================================================

After you finished the development of the wrapper, you may run some experiments,
applying your verifier to the kernel drivers.  To do this, invoke the
"ldv-manager" script (as described in README and TUTORIAL files), specifying the
environment variable RCV_VERIFIER with an absolute path to your wrapper assigned
to it.

Most likely, you want to compare one configuration of your verifier against
another one.  You don't have to create separate wrappers for it.  Instead, you
may make your wrapper configurable with use of environment variables and
external config files (see how it's done in CPAchecker wrapper).  This way, you
won't have to change the wrapper each time you need to try a new configuration.

After you've obtained the experimental data, upload them to the database, and
compare via the Web interface (stats-visualizer) in LDV.  In the web interface,
you may compare the verdicts or examine the difference between performance of
two configurations.  If you see too many numbers, try adding "profile/rcv/" to
the URL.

There are some built-in options to configure verifiers with.  See the next
section.

Good luck in your development!


COMMON OPTIONS THAT AFFECT VERIFIERS
====================================

Some options are interpreted internally in LDV, and do not depend on the wrapper
you use.

LDV_DEBUG=20
  To see the exact command lines, LDV invokes external tools with you mightwant
  to increase the verbosity level.  Level of 20 is enough to see calls to
  external instruments; you may increase it up to 100 (but you might not really
  want to).

RCV_TIMELIMIT=900     (seconds)
RCV_MEMLIMIT=1000     (kilobytes)
  Reachability C Verifiers are run under inspection.  If they violate time- or
  memory limit, they're terminated.  The number of violations of time and memory
  limits is calculated and can be viewed in final statistics.

	Time is limited with 15 minutes.  You can decrease, increase or unset the time
	limit to adjust performance of your tools.

  You may override these limits.  For instance, since CPAchecker already
	contains a tool-specific memory limiting mechanism, setting up a generic
	memory limit controlled by LDV tools is redundant.



HOW TO USE CPACHECKER
=====================

To use CPAchecker as RCV, you should first install your tools as usual, with a
few optional actions to perform.  Refer to INSTALL file, but you may skip those
prerequisites which refer to "BLAST" verifier shipped by default.  If you skip
them, you must use "no_blast=y" option when installing the toolset.

You most likely would want to run all drivers in a kernel, or run the "general"
regression test set (this test set contains "interesting" drivers of various
sizes; for tests to be available, run "make install-testing" in addition to the
usual "make install").  The only difference with default workflow (about which
you can read in README and TUTORIAL) is that you should set some additional
environment variables before you run the tools.  Here's the list of them:

RCV_VERIFIER=cpachecker
  Use CPAchecker as RCV.  If you don't specify it, the LDV tools will default
  to using BLAST (and fail if you don't have it installed).

CPACHECKER=/path/to/cpa.sh
  Specify location of CPAchecker's run script.  By default, LDV tools run
  "cpa.sh" found in your PATH environment variable.

CPACHECKER_CONFIG=/path/to/config.cfg
  If yon don't want to use the default config (which is found in
  dscv/rcv/cpachecker.config/cpa.cfg.pattern), you may specify your own
  through this variable.  Note that it will be copied, and some options will be
  adjusted in it!
  Sorry, the file name must be absolute.

CPACHECKER_OPTIONS=
  Additional options for CPAchecker.  You should not set "-config" option
  here. For instance, 'limits.time.wall=240s' sets a limit for wall time
  used by CPAchecker. Options should be specified without using spaces, since
  it is necessary to extract each option separately and add prefix which is 
  different for CPAchecker cloud web-interface and console tool respectively.
  To separate each two options a single space should be used.

It could be a good idea to add these options to a file and just use "source"
shell command to apply them to the current environment.

