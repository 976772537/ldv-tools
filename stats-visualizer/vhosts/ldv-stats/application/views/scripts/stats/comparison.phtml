<?php

// Get all infomation to be displayed.
$results = $this->entries;

// Get the view name.
$page = $results['Page'];

$resultsNumb = count($results['Comparison stats']['Row info']);
echo "<h3>Comparison statistics for the page '$page' (" . $resultsNumb . " rows)</h3>";

echo "<div>Note that the first part of the verdict conversions corresponds to the referenced task verdict.</div>";

// Print general comparison statistics table if so.
if ($resultsNumb) {
  // At the beginning print javascript plugin to show/hide some comparison
  // statistics.
  echo "<h3>Action menu</h3>";

  echo "<script type='text/javascript'>
          $(document).ready(function() {
            $('.SCFromToShowHide').click(function() {
              var entityMenuId = $(this).attr('id');
              var entityMenuIdClassVerdict = entityMenuId.split('_');

              if (entityMenuIdClassVerdict[0] == 'SCFrom' || entityMenuIdClassVerdict[0] == 'SCTo') {
                entityClass = '.' + entityMenuIdClassVerdict[0] + '_' + entityMenuIdClassVerdict[1];
                if (this.checked) {
                  $(entityClass).show();
                }
                else {
                  $(entityClass).hide();
                }
              }
              else if (entityMenuIdClassVerdict[0] == 'SCFromToTheSame' && entityMenuIdClassVerdict[1]) {
                entityClass1 = '.SCFrom_' + entityMenuIdClassVerdict[1];
                entityClass2 = '.SCTo_' + entityMenuIdClassVerdict[1];
                if (this.checked) {
                  $(entityClass1 + entityClass2).show();
                }
                else {
                  $(entityClass1 + entityClass2).hide();
                }
              }
            });
          });
        </script>
        <script type='text/javascript'>
          $(document).ready(function() {
            $('.SCFromToShowHide').click(function() {
              var entityMenuId = $(this).attr('id');
              var entityMenuIdClassVerdict = entityMenuId.split('_');

              if (entityMenuIdClassVerdict[0] == 'SCFromTo') {
                entityId1 = '#SCFrom_' + entityMenuIdClassVerdict[1];
                entityId2 = '#SCTo_' + entityMenuIdClassVerdict[1];
                if (this.checked) {
                  $(entityId1).attr('checked', true).click().attr('checked', true);
                  $(entityId2).attr('checked', true).click().attr('checked', true);
                }
                else {
                  $(entityId1).attr('checked', false).click().attr('checked', false);
                  $(entityId2).attr('checked', false).click().attr('checked', false);
                }
              }
              else if (entityMenuIdClassVerdict[0] == 'SCFromToTheSame' && !entityMenuIdClassVerdict[1]) {
                entityId1 = '#' + entityMenuIdClassVerdict[0] + '_Safe';
                entityId2 = '#' + entityMenuIdClassVerdict[0] + '_Unsafe';
                entityId3 = '#' + entityMenuIdClassVerdict[0] + '_Unknown';
                if (this.checked) {
                  $(entityId1).attr('checked', true).click().attr('checked', true);
                  $(entityId2).attr('checked', true).click().attr('checked', true);
                  $(entityId3).attr('checked', true).click().attr('checked', true);
                }
                else {
                  $(entityId1).attr('checked', false).click().attr('checked', false);
                  $(entityId2).attr('checked', false).click().attr('checked', false);
                  $(entityId3).attr('checked', false).click().attr('checked', false);
                }
              }
            });
          });
        </script>
        <script type='text/javascript'>
          $(document).ready(function() {
            $('#SCFromToTheSame').attr('checked', false).click().attr('checked', false);
          });
        </script>";

  $deleted = 'Deleted';
  // This array contains mapping between verdict 'from database' and verdict to
  // be shown on the page.
  $verdicts = $verdictsRef = array(
    'safe' => 'Safe',
    'unsafe' => 'Unsafe',
    'unknown' => 'Unknown',
    '__DELETED' => $deleted);

  foreach ($verdicts as $verdict) {
    echo "<table>
            <tr>
              <td rowspan=2><input type='checkbox' checked class='SCFromToShowHide' id='SCFromTo_$verdict'></td>
              <td><input type='checkbox' checked class='SCFromToShowHide' id='SCFrom_$verdict'>From '$verdict'</td>
            </tr>
            <tr>
              <td><input type='checkbox' checked class='SCFromToShowHide' id='SCTo_$verdict'>To '$verdict'</td>
            </tr>
         </table>";
  }

  echo "<br>";

  echo "<table>
          <tr>
            <td rowspan=3><input type='checkbox' checked class='SCFromToShowHide' id='SCFromToTheSame'></td>";
  foreach ($verdicts as $verdict) {
    // It's taken into account that 'deleted' verdict is placed at the end of array.
    if ($verdict == $deleted) {
      break;
    }

    echo "  <td><input type='checkbox' checked class='SCFromToShowHide' id='SCFromToTheSame_$verdict'>From '$verdict' to '$verdict'</td>
          </tr>
          <tr>";
  }
  echo "</tr></table>";

  echo "<br>";

  $stats = $results['Comparison stats']['Row info'];
  $changes = $results['Comparison stats']['All changes'];

  $statKeys = array_keys($stats[0]['Stats key']);

  echo "<table border=1>
          <tr align='center' bgcolor='yellow'>";
  echo "    <td nowrap>#</td>";
  foreach ($statKeys as $statKey) {
    echo "    <td nowrap rowspan>$statKey</td>";
  }

  echo "    <td nowrap>Total changes</td>";

  foreach ($verdictsRef as $verdictRefRaw => $verdictRef) {
    foreach ($verdicts as $verdictRaw => $verdict) {
      if ($verdictRef == $deleted and $verdict == $deleted) {
        continue;
      }

      // Print just conversions that take place.
      if (array_key_exists($verdictRefRaw, $changes) and array_key_exists($verdictRaw, $changes[$verdictRefRaw])) {
        echo "    <td nowrap class='SCFrom_$verdictRef SCTo_$verdict'>$verdictRef -> $verdict</td>";
      }
    }
  }

  echo "  </tr>";

  // Iterate over all results.
  $i = 1;
  foreach ($stats as $result) {
    echo "  <tr align='center'>";
    echo "    <td>$i</td>";
    $i++;
    $statKeysValues = array();
    foreach ($statKeys as $statKey) {
      echo "    <td>";

      if (array_key_exists($statKey, $result['Stats key'])) {
        echo $result['Stats key'][$statKey];
      }
      else {
        echo '-';
      }

      echo "</td>";
    }

    echo "    <td>" . $result['Total changes'] . "</td>";

    foreach ($verdictsRef as $verdictRefRaw => $verdictRef) {
      foreach ($verdicts as $verdictRaw => $verdict) {
        if ($verdictRef == $deleted and $verdict == $deleted) {
          continue;
        }


        if (array_key_exists($verdictRefRaw, $changes) and array_key_exists($verdictRaw, $changes[$verdictRefRaw])) {
          echo "<td class='SCFrom_$verdictRef SCTo_$verdict'>";

          $isConversionPrinted = false;
          if (array_key_exists($verdictRefRaw, $result['Verdict changes'])) {
            if (array_key_exists($verdictRaw, $result['Verdict changes'][$verdictRefRaw])) {
              echo $result['Verdict changes'][$verdictRefRaw][$verdictRaw];
              $isConversionPrinted = true;
            }
          }

          if (!$isConversionPrinted) {
            echo '-';
          }

          echo "</td>";
        }
      }
    }
  }

  echo "</table>";
}

// Print information on the current database connection.
echo "<h3>Current database connection options</h3>";
$db_connection_options = $results['Database connection'];
foreach ($db_connection_options as $option => $value) {
  if ($option != 'profiler') {
    echo "$option = '$value'<br>";
  }
}

// Obtain the time where page was created and find the page generation time.
$endtime = explode(' ', microtime());
$global = new Zend_Session_Namespace('Statistics globals');
$totaltime = $endtime[0] +  $endtime[1] - $global->startTime;
printf('<h3>Page generated in %.1f seconds (the maximum execution time is %.1f seconds)</h3>',  $totaltime, ini_get('max_execution_time'));

// Obtain the session peak application memory usage and compare it with the
// memory limit.
function return_bytes($val) {
  $val = trim($val);
  $last = strtolower($val[strlen($val) - 1]);
  switch ($last) {
    case 'g':
      $val *= 1024;
    case 'm':
      $val *= 1024;
    case 'k':
      $val *= 1024;
  }

  return $val;
}
echo "<h3>Application peak memory usage through the given session is " . number_format(memory_get_peak_usage(), 0, ',', ' ') . " bytes (the memory limit is " . number_format(return_bytes(ini_get('memory_limit')), 0, ',', ' ') . " bytes)</h3>";

?>
