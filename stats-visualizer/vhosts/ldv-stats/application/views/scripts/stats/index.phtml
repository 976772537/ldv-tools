<?php

include 'general.php';

// Get all infomation to be displayed.
$results = $this->entries;

// Get the statistics information part.
$stats = $results['Stats']['Row info'];

// Don't use comparison for git mode.
if (!isGit($results)) {
  // Print the form for the tasks comparison.
  $this->formTasksComparison->setAction($this->url());
  echo $this->formTasksComparison;
}

// Print the form for the tasks comparison.
$this->formPrintCSV->setAction($this->url());
echo $this->formPrintCSV;

// Print the form for the profiles update.
$this->formUpdateProfiles->setAction($this->url());
echo $this->formUpdateProfiles;

// Get information on all current profile page names. For them links will be
// generated inside the statistics table cells below.
$profilePages = $results['Profile pages'];

#print_r($profilePages);exit;

// Get information on all current global variables valuse to pass them for child
// pages.
$globals = $results['Globals'];

#print_r($globals);exit;

// Get the view name.
$page = $results['Page'];
// Use more meaningful name for results page.
if ($page == 'Result') {
  $page = 'Total';
}

// Relation between KB verdicts and classes for CSS.
$knowledgeBaseVerdictCSS = array(
  'True positive' => 'SSKBTruepositive',
  'False positive' => 'SSKBFalsepositive',
  'Unknown' => 'SSKBUnknown',
  '-' => 'SSKBUnknown',
  'Inconclusive' => 'SSKBInconclusive');

// Stats data converted to CSV format.
global $dataCSV, $dataCSVIndex;
$dataCSV = array();
$dataCSVIndex = 1;

function printData($str, $data) {
  if ($str !== null) {
    echo $str;
  }

  if ($data !== null) {
    global $dataCSV, $dataCSVIndex;
    if (!array_key_exists($dataCSVIndex, $dataCSV)) {
      $dataCSV[$dataCSVIndex] = array();
    }
    array_push($dataCSV[$dataCSVIndex], $data);
  }
}

$resultsNumb = count($stats);
echo "<div id='SSStatsTableTitle'>Statistics for the page '$page' (" . $resultsNumb . " rows)</div>";

// Print general statistics table if so.
if ($resultsNumb) {
  echo "<div class='SSNote'>Time is shown in seconds.</div>";

  // At the beginning print javascript plugin to relate comparison interfaces.
  if (!isGit($results)) {
    echo "<script type='text/javascript'>
            $(document).ready(function() {
              $('input[name=\"SSComparisonIds\"]').click(function() {
                var valPrev = $('input[name=\"SSTaskIds\"]').val();
                var valAdd = $(this).val();
                var valNew = '';

                if ($(this).is(':checked')) {
                  if (valPrev.indexOf(valAdd) == -1) {
                    valNew = valPrev + ' ' + valAdd;
                    $('input[name=\"SSTaskIds\"]').val(valNew);
                  }
                }
                else {
                  if (valPrev.indexOf(valAdd) != -1) {
                    valNew = valPrev.replace(new RegExp(valAdd, 'g'), '');
                    $('input[name=\"SSTaskIds\"]').val(valNew);
                  }
                }
              });
            });
          </script>";
    echo "<script type='text/javascript'>
            $(document).ready(function() {
              $('input[name=\"SSReferenceComparisonId\"]').click(function() {
                var valPrev = $('input[name=\"SSTaskIds\"]').val();
                var valAdd = $(this).val();
                var valNew = '';

                // Remove all inclusions of reference task id and add it to beginning.
                valNew = valPrev.replace(new RegExp(valAdd, 'g'), '');
                var valNew = valAdd + ' ' + valPrev;

                $('input[name=\"SSTaskIds\"]').val(valNew);
              });
            });
          </script>";
  }

  // Print row color alternation plugin.
  echo "<script type='text/javascript'>
          $(document).ready(function() {
            var isSecond = true;
            var i = 0;
            $('.SSStatsTableRow').each(function() {
              var isSwitch = false;

              $(this).find('.SSStatsTableTaskStatKey').each(function() {
                if (!isSwitch) {
                  isSwitch = true;
                }
              })

              if (isSwitch) {
                if (isSecond) {
                  isSecond = false;
                }
                else {
                  isSecond = true;
                }
              }

              if (i%2 == 1) {
                if (isSecond) {
                  $(this).addClass('SSStatsTableColorAlternationSecondDark');
                }
                else {
                  $(this).addClass('SSStatsTableColorAlternationFirstDark');
                }
              }
              else {
                if (isSecond) {
                  $(this).addClass('SSStatsTableColorAlternationSecondLight');
                }
                else {
                  $(this).addClass('SSStatsTableColorAlternationFirstLight');
                }
              }

              i++;
            })
          });
        </script>";

  // Print row chooser plugin.
  echo "<script type='text/javascript'>
          $(document).ready(function() {
            $('.SSStatsTableRow').mouseover(function() {
              $(this).addClass('SSStatsTableColorOver');
              var statKeysClasses = new Array();

              // Collect all already colored statistics keys.
              $(this).children('td.SSStatsTableStatKeys').each(function() {
                // Get statistics key class.
                var statKeyClass;
                var elem = $(this).get(0);
                var elemClasses = elem.className.split(/\s+/);

                for (i = 0; i < elemClasses.length; i++) {
                  if (elemClasses[i].search(/__STATKEY$/) != -1 || elemClasses[i].search(/__STATKEYAUX$/) != -1) {
                    statKeyClass = elemClasses[i];
                    break;
                  }
                }

                statKeysClasses[statKeyClass] = true;
              })

              $(this).prevAll('tr').each(function () {
                $(this).children('td.SSStatsTableStatKeys[rowspan!=1]').each(function() {
                  // Get statistics key class.
                  var statKeyClass;
                  var elem = $(this).get(0);
                  var elemClasses = elem.className.split(/\s+/);

                  for (i = 0; i < elemClasses.length; i++) {
                    if (elemClasses[i].search(/__STATKEY$/) != -1 || elemClasses[i].search(/__STATKEYAUX$/) != -1) {
                      statKeyClass = elemClasses[i];
                      break;
                    }
                  }

                  if (statKeyClass && !statKeysClasses[statKeyClass]) {
                    $(this).addClass('SSStatsTableColorOver');
                  }

                  statKeysClasses[statKeyClass] = true;
                })
              })
            });
            $('.SSStatsTableRow').mouseout(function() {
              $('.SSStatsTableColorOver').not('.SSStatsTableColorOverFreeze').removeClass('SSStatsTableColorOver');
            });
            $('.SSStatsTableRow').click(function() {
              if ($(this).hasClass('SSStatsTableColorOverFreeze'))
                $('.SSStatsTableColorOver').removeClass('SSStatsTableColorOverFreeze').removeClass('SSStatsTableColorOver');
              else
                $('.SSStatsTableColorOver').addClass('SSStatsTableColorOverFreeze');
            });
          });
        </script>";

  // Print large text bubble plugin.
  echo "<script type='text/javascript'>
          $(document).ready(function() {
            $('.SSStatsTableDescription').toggle(function() {
              $(this).removeClass('SSStatsTableDescription').addClass('SSBubble');
              $('<div class=\"SSStatsTableDescription\">Stub</div>').insertAfter($(this));
            }, function() {
              $(this).next().remove();
              $(this).removeClass('SSBubble').addClass('SSStatsTableDescription');
            })
          });
        </script>";

  // Print task description edit plugin.
  $indicator = $this->baseUrl() . "/images/indicator.gif";
  echo "<script type='text/javascript'>
          taskId = '';
          $(document).ready(function() {
            $('.SSStatsTableTaskDescriptionEdit').editable('" . $this->url(array('action' => 'edit-task-description')) . "', {
              indicator  : '<img src=\'$indicator\' alt=\'Saving...\' align=\'middle\'/>',
              tooltip    : 'Click to edit...',
              submitdata : function (value, settings) {
                taskId = $(this).parent().children('.SSStatsTableTaskStatKeyTaskIdValue').first().text();
                taskName = $(this).parent().children('.SSStatsTableTaskStatKeyTaskNameValue').first().text();
                return { taskid: taskId, taskname: taskName };
              }
            })
          });
        </script>";

  $statKeys = array_keys($stats[0]['Stats key']);
  $verificationKeys = array_keys($stats[0]['Verification info']);
  $knowledgeBaseKeys = array_keys($stats[0]['Knowledge base info']);
  if (!empty($knowledgeBaseKeys))
    $knowledgeBaseVerdictKeys = array_keys($stats[0]['Knowledge base info']['KB Verdict']);
  $toolKeys = array_keys($stats[0]['Tools info']);

  $verdictsKeys = array_keys($results['Stats']['All KB verdicts']);
  $tagsKeys = array_keys($results['Stats']['All KB tags']);
  # Understand whether Knowledge Base is required at all.
  $is_kb = true;
  if (empty($verdictsKeys) and empty($tagsKeys))
    $is_kb = false;
  $problemKeys = array_keys($results['Stats']['All tool problems']);
  $toolNames = array_keys($results['Stats']['All tool names']);
  $timeKeys = array_keys($results['Stats']['All tool time']);
  $timeOkKeys = array_keys($results['Stats']['All tool time ok']);
  $timeFailKeys = array_keys($results['Stats']['All tool time fail']);
  $childrenKeys = array_keys($results['Stats']['All tool children']);

#print_r($results['Stats']['All tool children']);
#print_r($statKeys);print_r($verificationKeys);
#print_r($problemKeys);
#exit;

  // At first use a task id for grouping.
  $isTaskId = in_array('Task id', $statKeys);
  // If no task id is specified then try to use a task name.
  $isTaskName = in_array('Task name', $statKeys);

  // Get the necessary tools information.
  $tools = array();

  foreach ($toolNames as $toolName) {
    $tools[$toolName]['Info'] = array();
    $tools[$toolName]['Children time'] = array();
    $tools[$toolName]['Problems'] = array();
  }

  foreach ($toolKeys as $toolKey) {
    $toolNameInfo = preg_split('/ /', $toolKey);
    $tools[$toolNameInfo[0]]['Info'][] = $toolNameInfo[1];
  }

  // Consider tool [ok/fail] time as general info.
  foreach ($timeKeys as $timeKey) {
    $tools[$timeKey]['Info'][] = 'Time';
  }
  foreach ($timeOkKeys as $timeOkKey) {
    $tools[$timeOkKey]['Info'][] = 'Time Ok';
  }
  foreach ($timeFailKeys as $timeFailKey) {
    $tools[$timeFailKey]['Info'][] = 'Time Fail';
  }

  // Bind tool children time if so to the tool info.
  foreach ($childrenKeys as $childrenKey) {
    $toolNameChildren = preg_split('/ /', $childrenKey);
    $tools[$toolNameChildren[0]]['Children time'] = $results['Stats']['All tool children'][$childrenKey];
  }

  // Bind tool problems if so to the tool info.
  foreach ($problemKeys as $problemKey) {
    $toolNameProblems = preg_split('/ /', $problemKey);
    $tools[$toolNameProblems[0]]['Problems'] = $results['Stats']['All tool problems'][$problemKey];
  }

#print_r($tools);exit;

  $statVerificationKeyRowSpan = 1;
  $statKnowledgeBaseKeyRowSpan = 1;
  $statToolsKeyRowSpan = 1;

  if (count($tools)) {
    $statVerificationKeyRowSpan++;
  }

  if (count($problemKeys) || count($childrenKeys)) {
    $statVerificationKeyRowSpan++;
    $statKnowledgeBaseKeyRowSpan++;
    $statToolsKeyRowSpan++;
  }

  $columnsUpToKBVerdictCount = 0;
  echo "<table id='SSStatsTable' border='1'>
          <tr id='SSStatsTableHeaderFirstRow'>";
  printData("    <td id='SSStatsTableHeaderRowCounter' rowspan='$statVerificationKeyRowSpan'>#</td>", '#');
  $columnsUpToKBVerdictCount++;
  $isTaskPrinted = false;
  foreach ($statKeys as $statKey) {
    // Merge all task information to the one column.
    if (preg_match('/^Task/', $statKey)) {
      if (!$isTaskPrinted) {
        $taskColSpan = 1;
        if (!isGit($results)) {
          $taskColSpan = 2;
        }
        printData("    <td class='SSStatsTableHeaderTaskStatKey' rowspan='$statVerificationKeyRowSpan' colspan='$taskColSpan'>Task</td>", null);
        $columnsUpToKBVerdictCount += $taskColSpan;
        $isTaskPrinted = true;
      }
      printData(null, $statKey);
    }
    else {
      // Make more human readable name for statistics key part.
      $statKeyPrint = $statKey;
      if ($statKey == 'Environment version') {
        $statKeyPrint = 'Kernel';
      }
      else if ($statKey == 'Rule name') {
        $statKeyPrint = 'Rule';
      }

      printData("    <td class='SSStatsTableHeaderStatKeys' rowspan='$statVerificationKeyRowSpan'>$statKeyPrint</td>", $statKeyPrint);
      $columnsUpToKBVerdictCount++;
    }
  }
  foreach ($verificationKeys as $verificationKey) {
    if ($verificationKey == 'Error trace presence') {
      continue;
    }
    if ($verificationKey == 'Result') {
      $verificationKey = 'Total';
    }
    printData("    <td class='SSStatsTableHeaderVerificationInfo' rowspan='$statVerificationKeyRowSpan'>$verificationKey</td>", $verificationKey);
    $columnsUpToKBVerdictCount++;
  }

  if ($page == 'Unsafe')
    foreach ($knowledgeBaseKeys as $knowledgeBaseKey) {
      // We don't need knowledge base identifiers and fits to be printed explicitly.
      if ($knowledgeBaseKey != 'KB ID' and $knowledgeBaseKey != 'KB Fit')
        printData("    <td class='SSStatsTableHeaderKnowledgeBaseInfo' rowspan='$statKnowledgeBaseKeyRowSpan'>$knowledgeBaseKey</td>", $knowledgeBaseKey);
    }
  else {
    if (!empty($verdictsKeys) or !empty($tagsKeys))
        printData("    <td class='SSStatsTableHeaderKnowledgeBaseInfo' colspan='" . (count($verdictsKeys) + count($tagsKeys)) . "'>Knowledge base</td>", null);
  }

  foreach ($tools as $toolName => $toolInfoTimeProblems) {
    printData("    <td class='SSStatsTableHeaderTools' colspan='" . (count($toolInfoTimeProblems['Info'])+ count($toolInfoTimeProblems['Children time']) + count($toolInfoTimeProblems['Problems'])) . "'>$toolName</td>", null);
  }
  echo "  </tr>";
  echo "<tr id='SSStatsTableHeaderSecondRow'>";
  if ($page != 'Unsafe') {
    if (!empty($verdictsKeys))
        printData("    <td class='SSStatsTableHeaderVerdictInfo' colspan='" . (count($verdictsKeys)) . "'>Verdicts</td>", null);
    if (!empty($tagsKeys))
        printData("    <td class='SSStatsTableHeaderTagsInfo' colspan='" . (count($tagsKeys)) . "'>Tags</td>", null);
  }
  foreach ($tools as $toolName => $toolInfoTimeProblems) {
    foreach ($toolInfoTimeProblems['Info'] as $toolInfo) {
      printData("    <td class='SSStatsTableHeaderToolInfo' rowspan='$statToolsKeyRowSpan'>$toolInfo</td>", $toolInfo);
    }
    if ($childrenNumb = count($toolInfoTimeProblems['Children time'])) {
      printData("    <td class='SSStatsTableHeaderToolChildren' colspan='$childrenNumb'>Children time</td>", null);
    }
    if ($problemsNumb = count($toolInfoTimeProblems['Problems'])) {
      printData("    <td class='SSStatsTableHeaderToolProblems' colspan='$problemsNumb'>Problems</td>", null);
    }
  }
  echo "  </tr>";
  if (count($problemKeys) || count($childrenKeys)) {
    echo "<tr id='SSStatsTableHeaderThirdRow'>";
    if ($page != 'Unsafe') {
      if (!empty($verdictsKeys))
        foreach ($verdictsKeys as $verdictKey) {
          if ($verdictKey == 'KB Unknown')
            $verdictKey = 'Unknown';

          if ($verdictKey == 'True positive') {
            $verdictKeyShort = 'True';
            $classAux = 'SSStatsTableHeaderVerdictTrue';
          }
          else if ($verdictKey == 'False positive') {
            $verdictKeyShort = 'False';
            $classAux = 'SSStatsTableHeaderVerdictFalse';
          }
          else if ($verdictKey == 'Unknown') {
            $verdictKeyShort = '?';
            $classAux = 'SSStatsTableHeaderVerdictUnknown';
          }
          else {
            $VerdictKeyShort = '&#8623;';
            $classAux = 'SSStatsTableHeaderVerdictInconclusive';
          }
          printData("    <td class='SSStatsTableHeaderVerdict $classAux' title='$verdictKey'>$verdictKeyShort</td>", null);
        }

      if (!empty($tagsKeys))
        foreach ($tagsKeys as $tagsKey)
          printData("    <td class='SSStatsTableHeaderTag'>$tagsKey</td>", null);
    }
    foreach ($tools as $toolName => $toolInfoTimeProblems) {
      foreach (array_keys($toolInfoTimeProblems['Children time']) as $toolChild) {
        printData("    <td class='SSStatsTableHeaderToolChild'>$toolChild</td>", $toolChild);
      }
      foreach (array_keys($toolInfoTimeProblems['Problems']) as $toolProblem) {
        printData("    <td class='SSStatsTableHeaderToolProblem'>$toolProblem</td>", $toolProblem);
      }
    }
    echo "  </tr>";
  }

  // Iterate over all results to build a rowspan tree.
  $rowSpanTree = array();
  foreach ($stats as $result) {
    $nextNode = &$rowSpanTree;
    foreach ($statKeys as $statKey) {
      // Skip all task information except task id.
      if (preg_match('/^Task/', $statKey)) {
        if ($isTaskId) {
          if ($statKey != 'Task id') {
            continue;
          }
        }
        else if ($isTaskName) {
          if ($statKey != 'Task name') {
            continue;
          }
        }
        else {
          continue;
        }
      }

      $value = $result['Stats key'][$statKey];
      if (is_null($value)) {
        $value = '__NULL';
      }
        else if ($value == '') {
          $value = '__EMPTY';
        }
      if (!array_key_exists($value, $nextNode)) {
        $nextNode[$value] = array();
      }
      $nextNode = &$nextNode[$value];
    }
  }
#print_r($rowSpanTree);exit;
  if (array_key_exists('__NULL', $rowSpanTree)) {
    throw new Exception("Neither task id nor task name is specified! Can't show statistics using the given profile (<b>" . returnProfile($results) . "</b>). Try to use the <b>default</b> profile name");
  }

  // To print the same values of statistics key just one time for a
  // corresponding groups.
  foreach ($statKeys as $statKey) {
    $prevStatKey[$statKey] = '__NOVALUE';
  }

  // Iterate over all results.
  $i = 1;
  $kbStats['verdict'] = array();
  $kbStats['tag'] = array();
  foreach ($stats as $result) {
    $dataCSVIndex++;
    echo "  <tr class='SSStatsTableRow' align='center'>";
    printData("    <td>$i</td>", $i);
    $i++;
    $statKeysValues = array();
    $isTaskColumnPrinted = false;
    $nextNode = &$rowSpanTree;
    foreach ($statKeys as $statKey) {
      $value = $result['Stats key'][$statKey];
      $statKeyClass = 'SSStatsTableStatKey';
      $statKeyClass .= preg_replace('/\s+/', '_', $statKey);
      $statKeyClass .= '__STATKEY';

      // Use special designatures for NULL and empty string values to send
      // them through address.
      if (is_null($value)) {
        $value = '__NULL';
      }
      else if ($value == '') {
        $value = '__EMPTY';
      }

      // Merge all task information to one column.
      if (preg_match('/^Task/', $statKey)) {
        if ($isTaskId) {
          $taskKey = 'Task id';
        }
        else if ($isTaskName) {
          $taskKey = 'Task name';
        }
        else {
          throw new Exception("Neither task id nor task name is specified");
        }

        $taskKeyValue = $result['Stats key'][$taskKey];
        if (is_null($taskKeyValue)) {
          $taskKeyValue = '__NULL';
        }

        printData(null, $value);

        // All task information is grouped by task key.
        if ($taskKeyValue != $prevStatKey[$taskKey]) {
          if (!$isTaskColumnPrinted) {
            echo "<td class='SSStatsTableStatKeys ${statKeyClass}AUX' rowspan='" . countLeaves($rowSpanTree[$taskKeyValue]) . "'>";

            if (!isGit($results)) {
              echo "  <div>";
              echo "     <input type='radio' name='SSReferenceComparisonId' value='$taskKeyValue' />";
              echo "  <div>";
              echo "  </div>";
              echo "     <input type='checkbox' name='SSComparisonIds' value='$taskKeyValue' />";
              echo "  </div>";

              echo "</td>";
              echo "<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($rowSpanTree[$taskKeyValue]) . "'>";
            }

            foreach ($statKeys as $statTaskKey) {
              if (preg_match('/^Task/', $statTaskKey)) {
                $statTaskKeyClass = '';
                $statTaskValueEditable = '';

                if ($statTaskKey == 'Task id') {
                  $statTaskKeyClass = 'TaskId';
                }
                else if ($statTaskKey == 'Task name') {
                  $statTaskKeyClass = 'TaskName';
                }
                else if ($statTaskKey == 'Task description') {
                  $statTaskValueEditable = 'SSStatsTableTaskDescriptionEdit';
                }

                printData("<div class='SSStatsTableTaskStatKey$statTaskKeyClass $statKeyClass'>$statTaskKey</div><div class='SSStatsTableTaskStatKey${statTaskKeyClass}Value $statTaskValueEditable'>" . $result['Stats key'][$statTaskKey] . "</div>", null);
              }
            }

            foreach ($statKeys as $statKey) {
              $prevStatKey[$statKey] = '__NOVALUE';
            }
            $prevStatKey[$taskKey] = $taskKeyValue;

            $nextNode = &$nextNode[$taskKeyValue];

            $isTaskColumnPrinted = true;
          }
        }
        else if ($taskKey == $statKey) {
          $nextNode = &$nextNode[$taskKeyValue];
        }

        // Find out task restrictions.
        foreach ($statKeys as $statTaskKey) {
          if (preg_match('/^Task/', $statTaskKey)) {
            $statKeysValues[$statTaskKey] = $result['Stats key'][$statTaskKey];
          }
        }
      }
      else if ($value == '__EMPTY' or $value != $prevStatKey[$statKey]) {
        // For null rule name print auxiliary name instead of nothing.
        if ($value == '__NULL' and $statKey == 'Rule name') {
          printData("<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($nextNode[$value]) . "'>Fail before RI</td>", '');
        }
        // For git profile generate links to the rule description.
        else if (isGit($results) and $statKey == 'Rule name') {
          $global = new Zend_Session_Namespace();
          if (array_key_exists($value, $global->models)) {
            $model = $global->models[$value]['short'];
            printData("<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($nextNode[$value]) . "' title='" . $global->models[$value]['long'] . "' nowrap><a href='http://linuxtesting.org/ldv/online?action=show_rule&rule_id=" . $global->models[$value]['rule id'] . "'>$model</a></td>", $model);
          }
          else {
            printData("<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($nextNode[$value]) . "'>$value</td>", $value);
          }
        }
        else if (array_key_exists($statKey, $profilePages)) {
          printData("<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($nextNode[$value]) . "'><a href='"
            . $this->url(
              array_merge(
                $globals,
                array(
                  'controller' => 'stats',
                  'action'     => 'index',
                  'page' => $statKey,
                  'value' => $value)),
              'default',
              true)
            . "'>"
            . $value
            . "</a></td>", $value);

        }
        else {
          $valueToPrint = $value;
          if ($valueToPrint == '__EMPTY' and $statKey == 'Entry point') {
            $valueToPrint = 'No entry point';
          }
          printData("<td class='SSStatsTableStatKeys $statKeyClass' rowspan='" . countLeaves($nextNode[$value]) . "'>$valueToPrint</td>", $valueToPrint);
        }

        $statKeysValues[$statKey] = $value;

        $prevStatKey[$statKey] = $value;
        // Reset all subsequent previous values.
        $isKeyMatched = false;
        foreach ($statKeys as $statKeyReset) {
          if ($isKeyMatched) {
            $prevStatKey[$statKeyReset] = '__NOVALUE';
          }
          if (!$isKeyMatched and $statKeyReset == $statKey) {
            $isKeyMatched = true;
          }
        }

        $nextNode = &$nextNode[$value];
      }
      else {
        $statKeysValues[$statKey] = $value;
        $nextNode = &$nextNode[$value];
        printData(null, $value);
      }
    }

    if ($isTaskColumnPrinted) {
      echo "</td>";
    }

    $isErrorTracePresent = false;
    foreach ($verificationKeys as $verificationKey) {
      if ($verificationKey == 'Error trace presence') {
        if ($result['Verification info'][$verificationKey]) {
          $isErrorTracePresent = true;
        }

        break;
      }
    }

    foreach ($verificationKeys as $verificationKey) {
      if ($verificationKey == 'Error trace presence') {
        continue;
      }

      echo "    <td class='SSAlignRight'>";
      $value = $result['Verification info'][$verificationKey];
      if ($verificationKey == 'Error trace') {
        if ($isErrorTracePresent) {
          printData("<a href='"
            . $this->url(
              array_merge(
                $globals,
                array(
                  'controller' => 'stats',
                  'action'     => 'errortrace',
                  'page' => $verificationKey,
                  'value' => $value),
                $statKeysValues),
              'default',
              true)
            . "'>...</a>", '');
        }
        else {
          printData('-', '');
        }
      }
      else if (!$value) {
        printData('-', '');
      }
      else if (array_key_exists($verificationKey, $profilePages)) {
        printData("<a href='"
          . $this->url(
            array_merge(
              $globals,
              array(
                'controller' => 'stats',
                'action'     => 'index',
                'page' => $verificationKey,
                'value' => $value),
              $statKeysValues),
            'default',
            true)
          . "'>"
          . $value
          . "</a>", $value);
      }
      else {
        printData($value, $value);
      }
      echo "</td>";
    }

    if ($page == 'Unsafe') {
      foreach ($knowledgeBaseKeys as $knowledgeBaseKey) {
        if ($knowledgeBaseKey == 'KB ID' or $knowledgeBaseKey == 'KB Fit')
          continue;

        echo "    <td class='SSAlignRight'>";

        $value = $result['Knowledge base info'][$knowledgeBaseKey];

        // I.e. when there is relevant to the given launch information in KB.
        if (count($value)) {
          if ($knowledgeBaseKey == 'KB Verdict') {
            // First of all remember an extent of fit between a given launch and KB.
            $fit = array();
            if (array_key_exists('KB Fit', $result['Knowledge base info'])) {
              for ($i = 0; array_key_exists($i, $value); $i++) {
                $fit[] = $result['Knowledge base info']['KB Fit'][$i];
              }
            }
            $tbd = array_search('TBD', $fit);
            $require_script = array_search('Require script', $fit);

            if (count($value) > 1) {
              // Reduce multiple verdicts in accordance with the following table:
              //     TP  FP  UNK
              // TP  TP  INC TP
              // FP  INC FP  FP
              // UNK TP  FP  UNK
              // where TP is True positive, FP is False positive, UNK is Unknown and
              // INC is Inconclusive (the last cannot be specified by a user).
              $fp = array_search('False positive', $value);
              $tp = array_search('True positive', $value);
              $unk = array_search('Unknown', $value);

              if ($tp !== false and $fp === false)
                $value = 'True positive';
              else if ($fp !== false and $tp === false)
                $value = 'False positive';
              else if ($tp !== false and $fp !== false)
                $value = 'Inconclusive';
              else
                $value = 'Unknown';
            }
            else {
              $value = $value[0];
            }

            // By default a current unsafe is marked as unknown.
            if ($value == '')
              $value = 'Unknown';

            array_key_exists($value, $kbStats['verdict']) ? $kbStats['verdict'][$value]++ : $kbStats['verdict'][$value] = 1;

            // Use '-' instead of 'Unknown' to correspond to the general schema.
            if ($value == 'Unknown')
              $value = '-';

            // Calculate additional notes if so.
            $note = '';
            if ($tbd !== false) {
              $note .= '*';
            }
            if ($require_script !== false) {
              $note .= '**';
            }

            $value = "<div class='$knowledgeBaseVerdictCSS[$value]'>$value<span class='SSKBFitNote'>$note</span></div>";
          }
          else if ($knowledgeBaseKey == 'KB Tags') {
            $items = array();
            for ($i = 0; array_key_exists($i, $value); $i++) {
              // Skip empty tags.
              if ($value[$i] == '')
                continue;

              $tags = preg_split('/;/', $value[$i]);
              foreach ($tags as $tag)
                array_key_exists($tag, $kbStats['tag']) ? $kbStats['tag'][$tag]++ : $kbStats['tag'][$tag] = 1;

              if (array_key_exists('KB ID', $result['Knowledge base info'])) {
                $verdictClass = '';
                if (array_key_exists('KB Verdict', $result['Knowledge base info']))
                  $verdictClass = "class ='" . $knowledgeBaseVerdictCSS[$result['Knowledge base info']['KB Verdict'][$i]] . "'";
                $items[] = "<div $verdictClass title='" . $result['Knowledge base info']['KB ID'][$i] . "'>$value[$i]</div>";
              }
              else
                $items[] = $value[$i];
            }
            $value = implode($items);
          }
        }
        else
          $value = '-';

        print($value);
        echo "</td>";
      }
    }
    else {
      foreach ($verdictsKeys as $verdictKey) {
        $value = $result['Knowledge base info']['KB Verdict'][$verdictKey];
        if ($verdictKey == 'KB Unknown')
          $verdictKey = 'Unknown';
        echo "<td class='SSAlignRight'>";
        if ($value == 0)
          echo "-";
        else if (array_key_exists('Unsafe', $profilePages)) {
          printData("<a href='"
            . $this->url(
              array_merge(
                $globals,
                array(
                  'controller' => 'stats',
                  'action'     => 'index',
                  'page' => 'Unsafe',
                  'KB verdict' => $verdictKey),
                $statKeysValues),
              'default',
              true)
            . "'>"
            . $value
            . "</a>", $value);
        }
        else
          echo $value;
        echo "</td>";
      }
      foreach ($tagsKeys as $tagKey) {
        echo "<td class='SSAlignRight'>";
        if (array_key_exists($tagKey, $result['Knowledge base info']['KB Tags'])) {
          $value = $result['Knowledge base info']['KB Tags'][$tagKey];
          if (array_key_exists('Unsafe', $profilePages)) {
            printData("<a href='"
              . $this->url(
                array_merge(
                  $globals,
                  array(
                    'controller' => 'stats',
                    'action'     => 'index',
                    'page' => 'Unsafe',
                    'KB tag' => $tagKey),
                  $statKeysValues),
                'default',
                true)
              . "'>"
              . $value
              . "</a>", $value);
          }
          else
            echo $value;
        }
        else
          echo "-";
        echo "</td>";
      }
    }

    foreach ($tools as $toolName => $toolInfoTimeProblems) {
      foreach ($toolInfoTimeProblems['Info'] as $toolInfo) {
        $classAux = '';

        if ($toolInfo == 'Time' or $toolInfo == 'LOC') {
          $classAux = 'SSNoWrap';
        }
        else if ($toolInfo == 'Description') {
          $classAux = 'SSStatsTableDescriptionTd';
        }

        echo "<td class='SSAlignRight $classAux'>";

        // Place large text description inside a special block.
        if ($toolInfo == 'Description') {
          // Inspect whether there is some description at all.
          $value = $result['Tools info']["$toolName $toolInfo"];
          if (!$value) {
            echo "<div class='SSAlignLeft'>";
          }
          else {
            echo "<div class='SSStatsTableDescription'>";
          }
        }

        if ($toolInfo == 'Time' or $toolInfo == 'Time Ok' or $toolInfo == 'Time Fail') {
          if (array_key_exists("$toolName Time", $result['Tool time'])) {
            $time = $result['Tool time']["$toolName Time"][$toolInfo];
            printData(formatTime($time), $time);
          }
          else {
            printData('-', '');
          }
        }
        else {
          $value = $result['Tools info']["$toolName $toolInfo"];
          if (!$value and $toolInfo != 'LOC') {
            printData('-', '');
          }
          else if (array_key_exists("$toolName $toolInfo", $profilePages)) {
            echo "<a href='"
              . $this->url(
                array_merge(
                  $globals,
                  array(
                    'controller' => 'stats',
                    'action'     => 'index',
                    'page' => "$toolName $toolInfo",
                    'value' => $value),
                  $statKeysValues),
                'default',
                true)
              . "'>";

            if ($toolInfo == 'LOC') {
              printData(formatLoc($value), $value);
            }
            else {
              printData($value, $value);
            }

            echo "</a>";
          }
          else {
            if ($toolInfo == 'LOC') {
              printData(formatLoc($value), $value);
            }
            else {
              printData($value, $value);
            }
          }
        }

        if ($toolInfo == 'Description') {
          echo "</div>";
        }

        echo "</td>";
      }

      foreach (array_keys($toolInfoTimeProblems['Children time']) as $toolChild) {
        $isHasChild = false;

        // If a given tool has any child at all.
        if (array_key_exists("$toolName Time", $result['Tool children time'])) {
          foreach ($result['Tool children time']["$toolName Time"] as $pattern => $time) {
            // If a given tool has a particular child.
            if ($toolChild == $pattern) {
              $time = $time['Time'];
              printData("    <td class='SSAlignRight SSNoWrap'>" . formatTime($time) . "</td>", $time);
              $isHasChild = true;
              break;
            }
          }
        }

        // In any case generate cell to fill the whole table correctly.
        if (!$isHasChild) {
          printData("<td class='SSAlignRight'>-</td>", '');
        }
      }

      foreach (array_keys($toolInfoTimeProblems['Problems']) as $toolProblem) {
        $isHasProblem = false;
        // If a given tool has any problem at all.
        if (array_key_exists("$toolName Problems", $result['Tool problems'])) {
          foreach ($result['Tool problems']["$toolName Problems"] as $resultProblem) {
            // If a given tool has a particular problem.
            if ($toolProblem == $resultProblem['Problem name']) {
              echo "    <td class='SSAlignRight'>";
              $value = $resultProblem['Problem number'];
              if (array_key_exists("$toolName Problems", $profilePages)) {
                printData("<a href='"
                  . $this->url(
                    array_merge(
                      $globals,
                      array(
                        'controller' => 'stats',
                        'action'     => 'index',
                        'page' => "$toolName Problems",
                        'value' => $resultProblem['Problem name']),
                      $statKeysValues),
                    'default',
                    true)
                  . "' title='" . strip_tags($toolProblem) . "'>"
                  . $value
                  . "</a>", $value);

              }
              else {
                printData($value, $value);
              }
              echo "</td>";
              $isHasProblem = true;
            }
          }
        }

        // In any case generate cell to fill the whole table correctly.
        if (!$isHasProblem) {
          printData("<td class='SSAlignRight'>-</td>", '');
        }
      }
    }

    echo "  </tr>";
  }

  // After all print an additional row with statistics on KB just on 'Unsafe' page.
  if ($page == 'Unsafe' and !empty($knowledgeBaseKeys)) {
    echo "<tr id='SSKBSummaryRow'>";
    echo "<td id='SSKBSummaryTitle' colspan='$columnsUpToKBVerdictCount'>Knowledge base summary</td>";
    echo "<td>";
    // Use predefined order of verdicts for convinience.
    $verdicts = array('True positive', 'False positive', 'Unknown', 'Inconclusive');
    foreach ($verdicts as $verdict) {
      array_key_exists($verdict, $kbStats['verdict']) ? $count = $kbStats['verdict'][$verdict] : $count = 0;
      echo "<div><span class='SSKBSummaryName'>$verdict</span>: <span class='SSKBSummaryValue'>$count</span></div>";
    }
    echo "</td>";
    echo "<td>";
    // Order tags by name.
    ksort($kbStats['tag']);
    foreach ($kbStats['tag'] as $tag => $count) {
      echo "<div><span class='SSKBSummaryName'>$tag</span>: <span class='SSKBSummaryValue'>$count</span></div>";
    }
    echo "</td>";
    echo "</tr>";
  }

  echo "</table>";
}

printInfo($results);

// Print CSV if it's needed.
if (array_key_exists('Format', $results)) {
  if ($results['Format'] == 'CSV') {
    echo '<p>';
    printCSV($dataCSV);
    echo '</p>';
  }
}

?>
