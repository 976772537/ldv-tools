<?php

// Get all infomation to be displayed.
$results = $this->entries;

// Don't use comparison for git mode.
$profileOptions = $results['Profile'];
if (!($profileOptions['name'] == 'git')) {
  // Print form for the tasks comparison.
  $this->form->setAction($this->url());
  echo $this->form;
}

// Get information on all current profile page names. For them links will be
// generated inside the statistics table cells below.
$profilePages = $results['Profile pages'];

#print_r($profilePages);exit;

// Get information on all current global variables valuse to pass them for child
// pages.
$globals = $results['Globals'];

#print_r($globals);exit;

// Get the view name.
$page = $results['Page'];
// Use more meaningful name for results page.
if ($page == 'Result') {
  $page = 'Total';
}

$resultsNumb = count($results['Stats']['Row info']);
echo "<h3>Statistics for the page '$page' (" . $resultsNumb . " rows)</h3>";

// Print general statistics table if so.
if ($resultsNumb) {
  // Get the statistics information part.
  $stats = $results['Stats']['Row info'];

  $statKeys = array_keys($stats[0]['Stats key']);
  $verificationKeys = array_keys($stats[0]['Verification info']);
  $toolKeys = array_keys($stats[0]['Tools info']);
  $problemKeys = array_keys($results['Stats']['All tool problems']);
  $toolNames = array_keys($results['Stats']['All tool names']);
  $timeKeys = array_keys($results['Stats']['All tool time']);
  $childrenKeys = array_keys($results['Stats']['All tool children']);

#print_r($results['Stats']['All tool children']);
#print_r($statKeys);print_r($verificationKeys);
#print_r($problemKeys);
#exit;

  // Get the necessary tools information.
  $tools = array();

  foreach ($toolNames as $toolName) {
    $tools[$toolName]['Info'] = array();
    $tools[$toolName]['Children time'] = array();
    $tools[$toolName]['Problems'] = array();
  }

  foreach ($toolKeys as $toolKey) {
    $toolNameInfo = preg_split('/ /', $toolKey);
    $tools[$toolNameInfo[0]]['Info'][] = $toolNameInfo[1];
  }

  // Consider tool time as general info.
  foreach ($timeKeys as $timeKey) {
    $tools[$timeKey]['Info'][] = 'Time';
  }

  // Bind tool children time if so to the tool info.
  foreach ($childrenKeys as $childrenKey) {
    $toolNameChildren = preg_split('/ /', $childrenKey);
    $tools[$toolNameChildren[0]]['Children time'] = $results['Stats']['All tool children'][$childrenKey];
  }

  // Bind tool problems if so to the tool info.
  foreach ($problemKeys as $problemKey) {
    $toolNameProblems = preg_split('/ /', $problemKey);
    $tools[$toolNameProblems[0]]['Problems'] = $results['Stats']['All tool problems'][$problemKey];
  }

#print_r($tools);
#exit;

  $statVerificationKeyRowSpan = 1;
  $statToolsKeyRowSpan = 1;

  if (count($tools)) {
    $statVerificationKeyRowSpan++;
  }

  if (count($problemKeys) || count($childrenKeys)) {
    $statVerificationKeyRowSpan++;
    $statToolsKeyRowSpan++;
  }

  echo "<table border=1>
          <tr align='center' bgcolor='yellow'>";
  echo "    <td nowrap rowspan='$statVerificationKeyRowSpan'>#</td>";
  foreach ($statKeys as $statKey) {
    echo "    <td nowrap rowspan='$statVerificationKeyRowSpan'>$statKey</td>";
  }
  foreach ($verificationKeys as $verificationKey) {
    if ($verificationKey == 'Error trace presence') {
      continue;
    }
    if ($verificationKey == 'Result') {
      $verificationKey = 'Total';
    }
    echo "    <td nowrap rowspan='$statVerificationKeyRowSpan'>$verificationKey</td>";
  }
  foreach ($tools as $toolName => $toolInfoTimeProblems) {
    echo "    <td nowrap colspan='" . (count($toolInfoTimeProblems['Info'])+ count($toolInfoTimeProblems['Children time']) + count($toolInfoTimeProblems['Problems'])) . "'>$toolName</td>";
  }
  echo "  </tr>";
  echo "<tr align='center' bgcolor='gray'>";
  foreach ($tools as $toolName => $toolInfoTimeProblems) {
    foreach ($toolInfoTimeProblems['Info'] as $toolInfo) {
      echo "    <td nowrap rowspan='$statToolsKeyRowSpan'>$toolInfo</td>";
    }
    if ($childrenNumb = count($toolInfoTimeProblems['Children time'])) {
      echo "    <td nowrap colspan='$childrenNumb'>Children time</td>";
    }
    if ($problemsNumb = count($toolInfoTimeProblems['Problems'])) {
      echo "    <td nowrap colspan='$problemsNumb'>Problems</td>";
    }
  }
  echo "  </tr>";
  if (count($problemKeys) || count($childrenKeys)) {
    echo "<tr align='center'>";
    foreach ($tools as $toolName => $toolInfoTimeProblems) {
      foreach (array_keys($toolInfoTimeProblems['Children time']) as $toolChild) {
        echo "    <td nowrap bgcolor='green'>$toolChild</td>";
      }
      foreach (array_keys($toolInfoTimeProblems['Problems']) as $toolProblem) {
        echo "    <td nowrap bgcolor='red'>$toolProblem</td>";
      }
    }
    echo "  </tr>";
  }

  // To print every value of statistics key just one time in the corresponding
  // groups.
#  foreach ($statKeys as $statKey) {
#    $prevStatKey[$statKey] = '';
#  }

  // Iterate over all results.
  $i = 1;
  foreach ($stats as $result) {
    echo "  <tr align='center'>";
    echo "    <td>$i</td>";
    $i++;
    $statKeysValues = array();
    foreach ($statKeys as $statKey) {
      $value = $result['Stats key'][$statKey];
#      if ($value != $prevStatKey[$statKey]) {
        // For null rule name print auxiliary name instead of nothing.
        if (is_null($value)) {
          echo "<td>Fail before RI</td>";
        }
        // For git profile generate links to the rule description.
        else if ($profileOptions['name'] == 'git' and $statKey == 'Rule name') {
          $global = new Zend_Session_Namespace();
          echo "<td title='" . $global->models[$value]['long'] . "' nowrap><a href='http://linuxtesting.org/ldv/online?action=show_rule&rule_id=" . $global->models[$value]['rule id'] . "'>". $global->models[$value]['short'] . "</a></td>";
        }
        else if (array_key_exists($statKey, $profilePages)) {
          echo "<td><a href='"
            . $this->url(
              array_merge(
                $globals,
                array(
                  'controller' => 'stats',
                  'action'     => 'index',
                  'page' => $statKey,
                  'value' => $value)),
              'default',
              true)
            . "'>"
            . $value
            . "</a></td>";

        }
        else {
          echo "<td>$value</td>";
        }

        // Use special designatures for NULL and empty string values to send
        // them through address.
        if (is_null($value)) {
          $value = '__NULL';
        }
        else if ($value == '') {
          $value = '__EMPTY';
        }

        $statKeysValues[$statKey] = $value;
#       $prevStatKey[$statKey] = $value;
#      }
    }

    $isErrorTracePresent = false;
    foreach ($verificationKeys as $verificationKey) {
      if ($verificationKey == 'Error trace presence') {
        if ($result['Verification info'][$verificationKey]) {
          $isErrorTracePresent = true;
        }

        break;
      }
    }

    foreach ($verificationKeys as $verificationKey) {
      if ($verificationKey == 'Error trace presence') {
        continue;
      }

      echo "    <td>";
      $value = $result['Verification info'][$verificationKey];
      if ($verificationKey == 'Error trace') {
        if ($isErrorTracePresent) {
          echo "<a href='"
            . $this->url(
              array_merge(
                $globals,
                array(
                  'controller' => 'stats',
                  'action'     => 'errortrace',
                  'page' => $verificationKey,
                  'value' => $value),
                $statKeysValues),
              'default',
              true)
            . "'>error trace...</a>";
        }
        else {
          echo "-";
        }
      }
      else if (array_key_exists($verificationKey, $profilePages)) {
        echo "<a href='"
          . $this->url(
            array_merge(
              $globals,
              array(
                'controller' => 'stats',
                'action'     => 'index',
                'page' => $verificationKey,
                'value' => $value),
              $statKeysValues),
            'default',
            true)
          . "'>"
          . $value
          . "</a>";
      }
      else {
        echo "$value";
      }
      echo "</td>";
    }

    foreach ($tools as $toolName => $toolInfoTimeProblems) {
      foreach ($toolInfoTimeProblems['Info'] as $toolInfo) {
        echo "<td>";
        if ($toolInfo == 'Time') {
          if (array_key_exists("$toolName Time", $result['Tool time'])) {
            echo $result['Tool time']["$toolName Time"]['Time'];
          }
          else {
            echo '-';
          }
        }
        else {
          $value = $result['Tools info']["$toolName $toolInfo"];
          if (array_key_exists("$toolName $toolInfo", $profilePages)) {
            echo "<a href='"
              . $this->url(
                array_merge(
                  $globals,
                  array(
                    'controller' => 'stats',
                    'action'     => 'index',
                    'page' => "$toolName $toolInfo",
                    'value' => $value),
                  $statKeysValues),
                'default',
                true)
              . "'>"
              . $value
              . "</a>";

          }
          else {
            echo "$value";
          }
        }
        echo "</td>";
      }

      foreach (array_keys($toolInfoTimeProblems['Children time']) as $toolChild) {
        $isHasChild = false;

        // If a given tool has any child at all.
        if (array_key_exists("$toolName Time", $result['Tool children time'])) {
          foreach ($result['Tool children time']["$toolName Time"] as $pattern => $time) {
            // If a given tool has a particular child.
            if ($toolChild == $pattern) {
              echo "    <td>" . $time['Time'] . "</td>";
              $isHasChild = true;
              break;
            }
          }
        }

        // In any case generate cell to fill the whole table correctly.
        if (!$isHasChild) {
          echo "<td>-</td>";
        }
      }

      foreach (array_keys($toolInfoTimeProblems['Problems']) as $toolProblem) {
        $isHasProblem = false;
        // If a given tool has any problem at all.
        if (array_key_exists("$toolName Problems", $result['Tool problems'])) {
          foreach ($result['Tool problems']["$toolName Problems"] as $resultProblem) {
            // If a given tool has a particular problem.
            if ($toolProblem == $resultProblem['Problem name']) {
              echo "    <td>";
              $value = $resultProblem['Problem number'];
              if (array_key_exists("$toolName Problems", $profilePages)) {
                echo "<a href='"
                  . $this->url(
                    array_merge(
                      $globals,
                      array(
                        'controller' => 'stats',
                        'action'     => 'index',
                        'page' => "$toolName Problems",
                        'value' => $resultProblem['Problem name']),
                      $statKeysValues),
                    'default',
                    true)
                  . "'>"
                  . $value
                  . "</a>";

              }
              else {
                echo "$value";
              }
              echo "</td>";
              $isHasProblem = true;
            }
          }
        }

        // In any case generate cell to fill the whole table correctly.
        if (!$isHasProblem) {
          echo "<td>-</td>";
        }
      }
    }

    echo "  </tr>";
  }
  echo "</table>";
}

// Print restrictions for a given page if so.
if (count($results['Restrictions'])){
  echo "<h3>Current page restrictions</h3>";
  foreach ($results['Restrictions'] as $restriction => $value) {
    echo "$restriction = '$value'<br>";
  }
}

// Print information on the current profile.
echo "<h3>Current profile</h3>";
$profileOptions = $results['Profile'];
foreach ($profileOptions as $option => $value) {
  echo "$option = '$value'<br>";
}

// Print information on the current database connection.
echo "<h3>Current database connection options</h3>";
$dbConnectionOptions = $results['Database connection'];
foreach ($dbConnectionOptions as $option => $value) {
  if ($option != 'profiler') {
    echo "$option = '$value'<br>";
  }
}

// Obtain the time where page was created and find the page generation time.
$endtime = explode(' ', microtime());
$global = new Zend_Session_Namespace();
$totaltime = $endtime[0] +  $endtime[1] - $global->startTime;
printf('<h3>Page generated in %.1f seconds (the maximum execution time is %.1f seconds)</h3>',  $totaltime, ini_get('max_execution_time'));

// Obtain the session peak application memory usage and compare it with the
// memory limit.
function return_bytes($val) {
  $val = trim($val);
  $last = strtolower($val[strlen($val) - 1]);
  switch ($last) {
    case 'g':
      $val *= 1024;
    case 'm':
      $val *= 1024;
    case 'k':
      $val *= 1024;
  }

  return $val;
}
echo "<h3>Application peak memory usage through the given session is " . number_format(memory_get_peak_usage(), 0, ',', ' ') . " bytes (the memory limit is " . number_format(return_bytes(ini_get('memory_limit')), 0, ',', ' ') . " bytes)</h3>";

?>
