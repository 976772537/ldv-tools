#!/usr/bin/env ruby
#
# Watch for tasks to be completed in order
#

require 'fileutils'
require 'find'
require 'logger'

require 'rubygems'
$:.unshift File.dirname(__FILE__)
require 'local.rb'
require 'cluster.rb'

# Set up logging
$log = Logger.new(STDERR)
# NOTE: for compatibility we use different levels
levels = { 0 => Logger::FATAL, 4 => Logger::ERROR, 10 => Logger::WARN, 20 => Logger::INFO, 30 => Logger::DEBUG }
user_set_level = (ENV['LDV_DEBUG'] || '10').to_i;
$log.level = levels[levels.keys.select{|l| l <= user_set_level}.max]

# Process command arguments
#
# FIXME: for now this sample watcher only supports parallelization of RCV commands

command = ARGV.shift
arguments = ARGV
address = ENV['LDV_WATCHER_SRV'] or raise "Server address not found.  Please, specify LDV_WATCHER_SRV env var!"

def address_local? addr
	addr =~ /^\//
end

watcher = nil
if address_local? address
	watcher = WatcherLocal.new(address)
else
	watcher = WatcherRemote.new(address)
end

result = nil
unless arguments.empty?
	result = watcher.send command, arguments
else
	result = watcher.send command
end

puts result unless result.nil?

$log.close



