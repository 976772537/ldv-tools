#! /usr/bin/perl -w

################################################################################
# Copyright (C) 2013
# Institute for System Programming, Russian Academy of Sciences (ISPRAS).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

use English;
use Env qw(prefix LDV_CONTROL_GROUP_GID);
use strict;

# File with control groups configuration which is used by default by libcgroup.
my $libcg_cgconfig = '/etc/cgconfig.conf';
# File where configuration for LDV Tools control group will be put.
my $ldv_cgconfig = 'build/ldv_cgconfig.conf';
# Header and tail for LDV Tools control group configuration used to track
# previuos installation.
my $ldv_cgconfig_header = '### Control group for LDV Tools start ###';
my $ldv_cgconfig_tail = '### Control group for LDV Tools end ###';

# At build stage create file with configuration for LDV Tools control group
# since at installation stage we will have another user (most likely root).
if (!$ARGV[0])
{
  my @gids = split(/ /, $GID);
  # Use either value of LDV_CONTROL_GROUP_GID environment variable if so or
  # current user group id (by default). It is enouch to use control group to
  # be created.
  my $ldv_cgroup_gid = $ENV{'LDV_CONTROL_GROUP_GID'} || $gids[0];
  my $ldv_cgconfig_content = <<EOF;
$ldv_cgconfig_header
# Mount cpuacct and memory controllers.
mount {
  cpuacct = PREFIX/cgroup;
  memory = PREFIX/cgroup;
}
# Create control group for LDV Tools.
group ldv {
# User that builds LDV Tools will have permissions to both tasks file
# and to other files in control group as well.
  perm {
    task {
      gid = $ldv_cgroup_gid;
    }
    admin {
      gid = $ldv_cgroup_gid;
    }
  }
# Make available cpuacct and memory controllers for the user specified above.
# Do not specify any parameters for these controllers - this will be done
# later by LDV Resource Manager.
  cpuacct {
  }
  memory {
  }
}
$ldv_cgconfig_tail
EOF

  open(LDV_CGCONFIG, '>', $ldv_cgconfig)
    or die("Couldn't open file '$ldv_cgconfig' for write: $ERRNO");
  print(LDV_CGCONFIG $ldv_cgconfig_content); 
  close(LDV_CGCONFIG);
}
# At installation stage copy configuration for LDV Tools control group to file
# with control groups configuration which is used by default by libcgroup.
else
{
  my @libcg_cgconfig_content;
  my @libcg_cgconfig_content_new;

  # Remove previous installation of control group for LDV Tools if so.
  if (-e $libcg_cgconfig)
  {
    open(LIBCG_CGCONFIG, '<', $libcg_cgconfig)
      or die("Couldn't open file '$libcg_cgconfig' for read: $ERRNO");
    @libcg_cgconfig_content = <LIBCG_CGCONFIG>; 
    close(LIBCG_CGCONFIG);  

    my $stop_track = 0;
    foreach my $line (@libcg_cgconfig_content)
    {
      $stop_track = 1 if ($line eq "$ldv_cgconfig_header\n");
      push(@libcg_cgconfig_content_new, $line) unless ($stop_track);
      $stop_track = 0 if ($line eq "$ldv_cgconfig_tail\n");
    }
  }

  # Replace PREFIX specified at build stage in control group configuration file
  # with value of corresponding environment variable or with empty string. 
  my $prefix = $ENV{'prefix'} || '';
  
  # Concatenate configuration for LDV Tools control group to the end of file
  # used by libcgroup by default.
  push(@libcg_cgconfig_content_new, "\n") if (@libcg_cgconfig_content_new
    and $libcg_cgconfig_content_new[$#libcg_cgconfig_content_new] !~ /\n$/);
  open(LDV_CGCONFIG, '<', $ldv_cgconfig)
    or die("Couldn't open file '$ldv_cgconfig' for read: $ERRNO");
  foreach my $line (<LDV_CGCONFIG>)
  {
    $line =~ s/PREFIX/$prefix/;
    push(@libcg_cgconfig_content_new, $line);
  }
  close(LDV_CGCONFIG);

  open(LIBCG_CGCONFIG, '>', $libcg_cgconfig)
    or die("Couldn't open file '$libcg_cgconfig' for write: $ERRNO");
  foreach my $line (@libcg_cgconfig_content_new) {
    print(LIBCG_CGCONFIG $line);
  } 
  close(LIBCG_CGCONFIG);
}

