#!/usr/bin/perl

# RCV Frontend for CPAchecker tool.

#======================================================================
# PROCESS OPTIONS AND SET UP INITIAL VARIABLES
#======================================================================

BEGIN {
	# Add the lib directory to the @INC to be able to include local modules.
	push @INC,"$ENV{'DSCV_HOME'}/shared/perl";
}

use strict;
use Pod::Usage;
use Getopt::Long;

# Project modules
use LDV::Utils;
use DSCV::RCV::Utils;
use DSCV::Sanity;
use Utils;

# File modules
use File::Basename;
use File::Path qw(mkpath);

my $config={
	cmdfile=>'',
};

my %optionSpecs = ();
$config->{verbosity} = $ENV{'DSCV_DEBUG'} || $ENV{'LDV_DEBUG'} || 10;
LDV::Utils::set_verbosity($config->{verbosity});
LDV::Utils::push_instrument('rcv-cpachecker');

$optionSpecs{'cmdfile=s'} = \$config->{cmdfile};
$optionSpecs{'workdir=s'} = \$config->{workdir};
$optionSpecs{'sanity-dir=s'} = \$config->{sandir};

GetOptions(%optionSpecs) or die("Unrecognized options!");


# Prepare initial variables
my $shared_dir = "$ENV{'DSCV_HOME'}/dscv" or die;
my $backend_dir = "$shared_dir/rcv/backends/cpachecker";
my $cpachecker = "$backend_dir/scripts/cpa.sh";
my $configs_dir = "$backend_dir/etc";
my $workdir = $config->{workdir};

-f $config->{cmdfile} or die "RCV's command file $config->{cmdfile} is not found";
-d $backend_dir or die "RCV's directory $backend_dir is not a directory";
-x $cpachecker or die "RCV's toplevel executable $cpachecker is not an executable file";
-d $workdir or die "--workdir=$config->{workdir} is not a directory!";

# Resource limits processing
my $timelimit = $ENV{'RCV_TIMELIMIT'} || (15*60); # We always force time limit.  You shouldn't be able to run checker without one
my $memlimit = $ENV{'RCV_MEMLIMIT'} || (1_000_000);	# Default memory limit is 1Gb.  It may be overflowed, because it's set as -Xmx
vsay 40,"Time limit is set to: $timelimit; memory limit is set to $memlimit.\n";

# Check if we launch CIL before the verifier
my $cilly = 1;
if ($ENV{'NO_CIL'}){
	vsay(10,"CIL skipped because NO_CIL environment variable is set\n");
	$cilly='';
}

# Prepare sanity checks
my $sanity = DSCV::Sanity->new($config->{sandir});


# Set up CPAchecker project path
$ENV{'PATH_TO_CPACHECKER'} = $backend_dir;


#Check if cpachecker is available
cpachecker_quick_check();

#======================================================================
# PREPARE CMDFILE TRAVERSERS AND RUN THEM
#======================================================================
use XML::Twig;

# Base Dir of system being checked
my $base_dir = undef;
my $unbasedir = undef;

# Now all subroutines are initialized.  Let's start processing the cmdfile.
my $check_input_file = XML::Twig->new(
	twig_handlers => {
		basedir=>DSCV::RCV::Utils::get_base_dir_maker(\$base_dir,\$unbasedir),
		cc => DSCV::RCV::Utils::cc_maker(\$unbasedir,$workdir),
		ld=> DSCV::RCV::Utils::ld_maker(verifier=>\&verify_cpachecker, unbasedir_ref=>\$unbasedir, workdir=>$workdir, preprocess=>1, cilly=>$cilly, cil_path=>"$backend_dir/tools/cil", cil_temps=>"$workdir/cil_temps"),
	}
);
$check_input_file->parsefile($config->{cmdfile});

exit 0;
# NO CODE AFTER THIS POINT!


#======================================================================
# CPACHECKER-SPECIFIC ROUTINES
#======================================================================

sub verify_cpachecker
{
	my %args = @_;
	$args{report} or die;
	open my $CPACHECKER_REPORT, ">", $args{report} or die "Can't open file $args{report}: $!";
	my $repT = XML::Twig::Elt->new('reports');

	for my $main (@{$args{mains}}){
		if ($args{already_failed}){
			# Prepare a failure command
			my $cmdInstT = XML::Twig::Elt->new('ld',{'ref'=>$args{cmd_id}, main=>$main});
			XML::Twig::Elt->new('trace',{},"")->paste($cmdInstT);
			XML::Twig::Elt->new('verdict',{},'UNKNOWN')->paste($cmdInstT);

			my $rcvResultT = XML::Twig::Elt->new('rcv',{'verifier'=>'cpachecker'});
			XML::Twig::Elt->new('status',{},'FAILED')->paste($rcvResultT);
			XML::Twig::Elt->new('desc',{},$args{already_failed})->paste($rcvResultT);

			# Calculate and output time elapsed
			XML::Twig::Elt->new('time',{},0)->paste($rcvResultT);

			$rcvResultT->paste(last_child =>$cmdInstT);
			$cmdInstT->paste($repT);
		}else{
			# OK, need to call CPAchecker
			my $result = call_cpachecker(%args, main=>$main); 
	
			# Print verdict to console and to report 
			vsay (10,"$main: CPACHECKER status: $result->{'CPACHECKER'}\n");
			vsay (20,"$main: CPACHECKER verdict: $result->{'CPACHECKER-detailed'}\n");

			# Verdict
			my $bv = $result->{'CPACHECKER-detailed'};
			if ($bv =~ /\bsafe\b/) {
				$bv='SAFE';
			}elsif($bv =~ /\bunsafe\b/){
				$bv='UNSAFE';
			}else{
				$bv='UNKNOWN';
			}
			# Result is derived from verdict
			my $br = $result->{'CPACHECKER'};
			vsay (40, "CPACHECKER status is $br\n");
			if($br =~ /\bno\b/i){
				$br='FAILED';
			}elsif (($br =~ /\byes\b/i) && ($bv ne 'UNKNOWN') ) {
				$br='OK';
			}else{
				$br='FAILED';
			}

			my $cmdInstT = XML::Twig::Elt->new('ld',{'ref'=>$args{cmd_id}, main=>$main});
			XML::Twig::Elt->new('trace',{},$args{trace})->paste($cmdInstT);
			XML::Twig::Elt->new('verdict',{},$bv)->paste($cmdInstT);

			my $rcvResultT = XML::Twig::Elt->new('rcv',{'verifier'=>'cpachecker'});
			XML::Twig::Elt->new('status',{},$br)->paste($rcvResultT);
			XML::Twig::Elt->new('desc',{},$result->{'CPACHECKER-detailed'})->paste($rcvResultT);

			# Calculate and output time elapsed
			my $time_sec = $result->{'utime'}+$result->{'stime'};
			my $time_msec = int($time_sec * 1000);
			XML::Twig::Elt->new('time',{},$time_msec)->paste($rcvResultT);

			$rcvResultT->paste(last_child =>$cmdInstT);
			$cmdInstT->paste($repT);
		}
	}

CLOSE_REPORT:
	$repT->print($CPACHECKER_REPORT,'indented');
	close $CPACHECKER_REPORT;
}

# Call cpachecker
use IPC::Open3;
use StreamAutomaton;
use File::Copy;
sub call_cpachecker
{
	my %args = @_;
	# Options that will be passed to the cpachecker tool
	my @cpachecker_options = ($cpachecker,@{$args{files}});

	# Set default options
	# Create a temporary config file.  Config is based on sympredabsCPA
	my $CPA_CFG; my $cpa_cfg = "$args{workdir}/cpa.cfg"; open $CPA_CFG, ">", $cpa_cfg or die;
	my $LDV_errloc_autom = "$args{workdir}/errloc_automaton.txt";

	print $CPA_CFG <<EOF;
cfa.removeIrrelevantForErrorLocations = false
analysis.traversal = topsort
analysis.useRefinement = true
cegar.refiner = cpa.symbpredabsCPA.SymbPredAbsRefiner
cpa = cpa.art.ARTCPA
ARTCPA.cpa = cpa.composite.CompositeCPA
CompositeCPA.cpas = cpa.location.LocationCPA, cpa.automatonanalysis.ObserverAutomatonCPA ErrorLocationAutomaton, cpa.symbpredabsCPA.SymbPredAbsCPA
automatonAnalysis.inputFile = $LDV_errloc_autom
EOF
	close $CPA_CFG;

	# For now, only one error location is supported by CPACHECKER
	(scalar @{$args{errlocs}} > 1) and die;
	my $errloc = (@{$args{errlocs}})[0];

	my $ERRLOC_AUT;  open $ERRLOC_AUT, ">", $LDV_errloc_autom or die;
	print $ERRLOC_AUT <<EOF;
AUTOMATON ErrorLocationAutomaton
// This Automaton replaces the ErrorLocationCPA. It detects error locations that were defined in the sourcecode.

/* The ErrorLocationCPA had 3 triggers.
 * The Trigger "(CFAEdge.CFASuccessor instanceOf CFAErrorNode)" could not be implemented in this automaton.
  */

	INITIAL STATE Init;

	STATE Init :
	  // label of the next CFA state starts with "error"
		MATCH LABEL [$errloc]
		// call of assert_fail without arguments
		//|| MATCH {__assert_fail()}
		// call of assert_fail with any (>0) number of arguments
		//|| MATCH {__assert_fail(\$?)} 

  -> ERROR;

EOF
	close $LDV_errloc_autom;

	push @cpachecker_options,
		"-config","$cpa_cfg"
	;

	# Add mains and error locations
	push @cpachecker_options, "-entryfunction",$args{main} if $args{main};

	#write ErrorPath.txt and other files to outputpath
	my $outputpath = "$args{debug}-stuff";
	push @cpachecker_options, "-outputpath",$outputpath;

	# For now we do not interpret hints.  We will be generating/copying certain config files for that
	my $hintsT = $args{hints};

	# Additional options
	push @cpachecker_options,(split /\s+/,$ENV{'CPACHECKER_OPTIONS'});

	# Resources limit.  We don't set memlimit--see below
	@cpachecker_options = DSCV::RCV::Utils::set_up_timeout({
		timelimit => $timelimit,
		id_str => "DSCV_TIMEOUT ",
		},@cpachecker_options
	);

	# Set memory limit.
	# We set memory limit with Java native capabilities.  We use -Xmx and set it to the value supplied by user.  Thus, the memory limit can be overflew a bit, but in return the exception will be native.
	my $memlimit_kb = int($memlimit / 1024);
	$ENV{'JAVA_VM_ARGUMENTS'} .= " -Xmx${memlimit_kb}m";

	vsay ('NORMAL',"Running CPACHECKER for $args{dbg_target}, entry $args{main}...\n");
	vsay (20,@cpachecker_options,"\n");

	# Fork and run CPACHECKER in a child process.	Redirect its output (std and err) to a file
	# Open file to redirect
	my $CPACHECKER_DEBUG;
	open $CPACHECKER_DEBUG, ">", $args{debug} or die "Can't open file $args{debug}: $!";
	my ($CPACHECKER_IN,$CPACHECKER_OUT,$CPACHECKER_ERR);
	# Fork cpachecker
	local $"=" ";
	my $fpid = open3($CPACHECKER_IN,$CPACHECKER_OUT,$CPACHECKER_ERR,@cpachecker_options) or die "INTEGRATION ERROR.	Can't open3. PATH=".$ENV{'PATH'}." Cmdline: @cpachecker_options";

	vsay (20,"CPACHECKER debug trace is being written to $args{debug}\n");

	# Sanity check
	$sanity->blast_called();

	# In CPAchecker trace is in the separate file.  We'll just copy it to $args{trace} at the end
	my $trace_fname = "$outputpath/ErrorPath.txt";
	# Create verdict calculator
	my $verdictor = StreamAutomaton->new([StreamAutomaton::limits_check($ENV{'TIMEOUT_IDSTR'}),cpachecker_verdict(),java_oom()]);

	# Process output and redirect it to file
	local $_;
	while (<$CPACHECKER_OUT>) {
		print $CPACHECKER_DEBUG $_;
		$verdictor->chew_line($_);
	}
	while (<$CPACHECKER_ERR>) {
		print $CPACHECKER_DEBUG $_;
		$verdictor->chew_line($_);
	}
	# TODO: This should be replaced by select(2) call, but I'm too lazy to do it now.	We'll just print STDERR after STDOUT.

	my %child = Utils::hard_wait($fpid,0);
	close $CPACHECKER_DEBUG;

  vsay (40,"CPACHECKER open3 return value: $?\n");
	vsay (20,"CPACHECKER return value: $?\n");
	vsay (40,"CPACHECKER stats: utime $child{'utime'}, stime $child{'stime'}\n");
	my $cpachecker_rv = $? >> 8;
	my $cpachecker_rv_full = $?;
	if($? == 0){
		vsay (20,"CPACHECKER OK\n");
	}else{
		vsay ('WARNING',"CPACHECKER failed with exit code $cpachecker_rv.  We consider it fatal\n");
	}

	my $result = {%{$verdictor->result()}};
	# Don't set it up--it should be set by CPAchecker
	# $result->{'CPACHECKER'} = "yes";
	# Add limits
	$result->{'CPACHECKER-detailed'} .= $result->{'LIMITS'};
	# Add timing information into the result returned
	$result->{'utime'} = $child{'utime'};
	$result->{'stime'} = $child{'stime'};

	# Copy back trace if it exists
	if (-r $trace_fname) {
		copy($trace_fname,$args{trace}) or die;
	}

	# Add information about limits to result
	my $tl4rep = $timelimit ? "$timelimit sec" : "not set";
	my $ml4rep = $memlimit ? "$memlimit Kb" : "not set";
	# TODO: check of there is --version-like option to CPAchecker
	#my $ver4rep = `pbast.opt --version`;
	my $ver4rep = "";
	$result->{'CPACHECKER-detailed'} .= <<EOR ;

=========== Launch information ===========
Verifier: CPAchecker ($ver4rep)
Time Limit: $tl4rep
Memory Limit: $ml4rep (average)
Additional options: $ENV{'CPACHECKER_OPTIONS'}
=========== Launch inform ends ===========
EOR

	return $result;
}



# Perform CPACHECKER quick check before running any verifications
sub cpachecker_quick_check
{
	$" = ' ';      # For error reporting
	vsay ('INFO', "Trying to run CPAchecker without arguments to see it it works...");
	my @cpachecker_args = ($cpachecker,"-help");
	my $CHEW_CPACHECKER_OUT;
	my $fpid = open $CHEW_CPACHECKER_OUT,"-|";
	defined $fpid or die "Can't fork?  Wtf";
	if ($fpid == 0){
		# child
		# Run cpachecker
		exec @cpachecker_args or die "INTEGRATION ERROR. PATH=".$ENV{'PATH'}." Cmdline: @cpachecker_args";
		exit 1;
	}
	# Parent
	# Ignore cpachecker's output.
	my $wpres = Utils::hard_wait($fpid,0);
	$wpres > 0 or die;
	# \n to complement previous message
	$? == 0 or die "\nINTEGRATION ERROR.  CPACHECKER test exited with non-zero return code $?.";
	# Ok, now we can close the pipe
	close($CHEW_CPACHECKER_OUT);

	vsay ('INFO',"OK\n");
}

sub java_oom
{
	return[10_000,sub{
		my $l=shift or return undef;
		$l=~/^Exception.*OutOfMemory/i and return {'LIMITS'=>'Memory Limit Exceeded'};
		return undef;
	}];
}

sub cpachecker_verdict
{
	return[100_000,sub{
		my $l=shift or return undef;
		$l =~ /Error location\(s\) reached\? NO/ and return {'CPACHECKER-detailed' => 'The system is safe.', 'CPACHECKER'=>'yes'};
		$l =~ /Error location\(s\) reached\? YES/ and return {'CPACHECKER-detailed' => 'The system is unsafe.', 'CPACHECKER'=>'yes'};
		$l =~ /No error locations reachable from .*, analysis not necessary/ and return {'CPACHECKER-detailed' => "The system is safe.  Error location is not reachable.", 'CPACHECKER'=>'yes'};
		return undef;
	}];
}

# Trace dumper.  Usage:  my $dumper = dumptrace(filename);
use constant { TRACE_WAIT => 0, TRACE_READ => 1, TRACE_DONE =>2};
my $current_fh;
sub dumptrace
{
	my $fname = shift or die;
	# In CPAchecker, the whole file is the trace
	my $state = TRACE_READ;
	my $current_fh;
	return [1_000_000,sub {
		my ($line) = @_;
		if ($state == TRACE_READ){
			unless ($current_fh){
				open $current_fh, ">>", $fname or die;
			}
			print $current_fh $line;
		}
		return undef;
	}];
}

