#!/usr/bin/perl

################################################################################
# Copyright (C) 2010-2012
# Institute for System Programming, Russian Academy of Sciences (ISPRAS).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# RCV Frontend for CPAchecker tool.

use strict;
use DSCV::RCV::Coverage;
use File::Basename qw(dirname);
use DSCV::RCV::Library;

# Available options:
# CPACHECKER
#   Defaults to cpa.sh
# CPACHECKER_CONFIG
#   A config file for CPAchecker. It can include other config files as necessary.
#   The file specified will be patched to conform to the LDV error specification.
# CPACHECKER_OPTIONS
#   Additional option string to pass to the $CPACHECKER script.

# This frontend is documented so that you may base your own one on it.

# A tool LDV frontend is a "wrapper" script that accepts input files, entry
# points and error location to check, runs a certain verification engine
# (referred to as a "backend"), and reports results to the LDV in a generic
# manner. This wrapper should request a certain kind of preprocessing (CIL and
# CPP are built-in), or may opt for a tool-specific preprocessing. The wrapper
# may use the built-in LDV capabilities of invoking a backend in a controlled
# environment with time and memory limitig. The automatic interpretation of the
# results (whether the input program was SAFE or UNSAFE) is also included here.

# The input of the wrapper is a number of global variables the caller sets up for him:

# @errlocs - error labels that designate the error locations (currently, the
#   array contains only one)

# @mains - entry points to the program (currently, the array contains only one)

# $hints_tag - an XML tag from the rule database with some hints to the
#  verifiers on what functionality is required for an efficient verification of
#  the instrumented property (such as "alias analysis should be on"). Currently
#  contains no useful information. See the documentation to kernel rules on the
#  description of the options when they appear. The tag may be accessed with
#  XML::Twig::Elt functions.

# $tmpdir - writable temporary directory, unique for this verification task.
#  You may not have a write access outside of it.

# The wrapper has access to a number of tools and options the LDV backend
# provides, they will be described later, as they're used.

# To distinguish when the wrapper works in logs, set up a unique name for the
# verifier.
set_tool_name("CPAchecker");

my @cpachecker_options;
my $cpachecker_config;
my $cpachecker;
# The LDV distribution of CPAchecker contains some additional files that are
# installed alongside the whole toolset. The paths to these places are accessed
# via pre-set variables $installed_frontends_dir and $installed_backends_dir.
# Initialize the directory where the default config files reside.
my $configs_dir = "$installed_frontends_dir/etc/";

# This section check usage of verification cloud
if ($ENV{RCV_REMOTE_HOST}) {
	add_cpa_options('curl', '-s', '-H', '"Accept: text/plain"');

	# Futher check other settings
	if ($ENV{RCV_ACCESS}) {
		add_cpa_options('-u', $ENV{RCV_ACCESS});
	}
	else {
		die "Please provide '<user>:<password>' pair with environment variable 'RCV_ACCESS' to access verification cloud";
	}
}
else {
	# Get a path to the user-specified config, if any, via Perl's ENV hash for
	# environemnt variables.  If the user hasn't specified the environment
	# variable, the value of $cpachecker_config will be undef.
	$cpachecker_config = $ENV{'CPACHECKER_CONFIG'};

	# Load the path to the cpachecker script. Unless the user specified the
	# variable, the wrapper will use "cpa.sh" from the cpachecker backend installation dir.
	$cpachecker = $ENV{'CPACHECKER'} || "$installed_backends_dir/cpachecker/scripts/cpa.sh";

	# Set path to CPAchecker native libraries (like mathsat5)
	my $cpafullpath = `which $cpachecker`;
	die("CPAchecker not found. (command: which $cpachecker, return code: ".$?.")") if $? ne 0;

	my $arch=`uname -m`;

	my $arch_platform;
	if ($arch =~ "x86_64") {
	 $arch_platform="x86_64-linux";
	} else {
	 $arch_platform="x86-linux";
	}

	my $arch_platform_path = dirname($cpafullpath)."/../lib/native/$arch_platform";

	$ENV{'JAVA_VM_ARGUMENTS'} = "-Djava.library.path=$arch_platform_path";
}

# The interface to get files to analyze for this particular task is
# preprocess_all_files. This function gets a list of preprocessors to apply, and
# returns a list of preprocessed files to analyze. If you specify certain
# preprocessors, such a list will only have one file. If you specify no
# preprocessors, you'll get a list of original files. The available
# preprocessors include:

#  - 'cpp' - standard system C preprocessor

#  - 'cil' - preprocess each file separately with CIL preprocessor; the files
#      should already be preprocessed by CPP!  CIL is shipped with LDV by
#      default, but you may specify your own CIL executable.  See also
#      set_cil_options and set_cil.

#  - 'cil-merge' - preprocess all files with CIL preprocessor, and merge them
#      into one. The files should already be preprocessed by CPP!

# CPAchecker requires the files to be processed by CIL before passing.  We ship
# CIL by default with the toolset, and its path is already adjusted.  You may
# redefine it to your own executable before you invoke preprocess_all_files().
# Note that you should specify "cilly.asm.exe" instead of simple "cilly" script.

#set_cil("/my/path/cil/obj/x86_LINUX/cilly.asm.exe");

# The options that control input and output files are automatically prepared by
# LDV internals. You should just specify the rest here.
set_cil_options(
    "--printCilAsIs",
    "--decil",
    # "--noLowerConstants",
    "--noInsertImplicitCasts",
    "--useLogicalOperators",      # Now supported by CPAchecker frontend
    "--ignore-merge-conflicts",
    "--no-convert-direct-calls",  # Don't transform simple function calls to calls-by-pointers
    "--no-convert-field-offsets", # Don't transform s->f to pointer arithmetic
    "--no-split-structs",         # Don't transform structure fields into variables or arrays
    "--rmUnusedInlines"
);

my $no_cil = $ENV{'CPACHECKER_NO_CIL'} || ''; # Should CIL be used for CPAchecker or not. Default - yes.

# Now, as CIL script and options are prepared, let's invoke the preprocessing.
my @files;
if ($no_cil)
{
  @files = preprocess_all_files('cpp');
}
else
{
  @files = preprocess_all_files('cpp', 'cil-merge');
}

# If you need more preprocessing, just invoke your own preprocessor here.  As
# we've specified 'cil-merge', the @files array now contains one file.

# If an error has occured during preprocessing, the script will terminate, and
# the further commands won't be executed.  LDV tools will handle and report the
# preprocessing error, if any.

# Our error label automaton specification
my $LDV_errloc_autom = "LDVErrorLabel.spc";

# Since we now got the files (one file, to be exact), we may start to form a
# command line for CPAchecker.

my %limits = DSCV::RCV::Library::get_limits();
vsay 'TRACE', "LIMITS: RCV_MEMLIMIT=$limits{'memlimit'}, RCV_TIMELIMIT=$limits{'timelimit'}s";

# Set RCV_MEMLIMIT and RCV_TIMELIMIT environment variables according to the values
# provided by the library (and set by rcv_launcher). If the variables were set
# explicitely by the user, the values in the library should be the same as the 
# values in the variables.

check_limit("RCV_MEMLIMIT", 'memlimit');
check_limit("RCV_TIMELIMIT", 'timelimit');
$memlimit = convert_memory(specified_mem => $ENV{'RCV_MEMLIMIT'});
$timelimit = convert_time(specified_time => $ENV{'RCV_TIMELIMIT'});
# Adjust java heap size (with cpa.sh option) to be consistent with RCV_MEMLIMIT
# 1/4 (in MB) for static memory i.e. Java VM, stack, and native libraries e.g. MathSAT
my $heap_size = get_heap_size($memlimit);

my $cpa_cfg_new = "$tmpdir/wrapper.properties";
if ($ENV{RCV_REMOTE_HOST}) {
	foreach my $file (@files){
        add_cpa_cloud_options('programText@' . $file);
	}

	# Specify revision if it necessary
	if ($ENV{"SVN_REVISION"}) {
		add_cpa_cloud_options('revision=' . $ENV{"SVN_REVISION"});
	}

	# Choose config: Cloud accept any configuration from cpachecker trunk
	# We should provide relative path to it from repository root dir 
	$cpachecker_config = $ENV{'CPACHECKER_CLOUD_CONFIG'};
	if (!$cpachecker_config) {
		$cpachecker_config = 'ldv';
	}

	# Set options
	add_cpa_cloud_options(
		'memoryLimitation=' . $memlimit,
		'timeLimitation=' . $timelimit,
		'heap=' . $heap_size,
		'configuration=' . $cpachecker_config,
		'disableJavaAssertions=true'
	);
}
else{
	add_cpa_options($cpachecker, @files);

	# MANAGE CONFIGURATION FILES ADJUSTMENTS

	# The way LDV instruments properties requires the config files to be adjusted.
	# If the user has specified config via environment variable, we copy that config
	# adding .patched extension to it, and then patch it.  Otherwise, we use the
	# default CPAchecker config shipped with LDV.

	# If no config file is specified ($cpachecker_config, which was set up at the
	# beginning of the script), use the default one.
	my $cpa_cfg = $cpachecker_config || "$installed_backends_dir/cpachecker/config/ldv.properties";

	# Get the full path of the config file specified
	my $cpa_cfg_fullpath = File::Spec->rel2abs($cpa_cfg);

	# Create a temporary config file.  $tmpdir is a preset variable with temporary
	# dir for this verification task.
	my $CPA_CFG;
	open $CPA_CFG, ">", $cpa_cfg_new or die;

	say $CPA_CFG "# ------------------------------------------------------------------ ";
	say $CPA_CFG "# This is a stub configuration file for CPAchecker.";
	say $CPA_CFG "# Here we include the specified configuration and override";
	say $CPA_CFG "# error location specification automaton.";
	say $CPA_CFG "# ------------------------------------------------------------------ ";
	say $CPA_CFG "";
	say $CPA_CFG "#include $cpa_cfg_fullpath";
	say $CPA_CFG "";
	say $CPA_CFG "# this automaton defines which locations are the error locations";
	say $CPA_CFG "specification = $tmpdir/$LDV_errloc_autom";

	say $CPA_CFG "# Remove CPAchecker internal time limits";
	say $CPA_CFG "limits.time.cpu=-1ns";

	if ($no_cil)
	{
	  say $CPA_CFG "parser.readLineDirectives = true\n";
	}

	close $CPA_CFG;
}

# The array @errlocs contains a single error location. This may be changed in
# the future. NOTE that the error locations may vary from property to property.
# That's why we can't just carve it here.

(scalar @errlocs > 1) and die;
my $errloc = $errlocs[0];

# As we now know the error location, we form an error location automaton for
# CPAchecker. Copy the sample automaton shipped with LDV and replace label name
# with the one we need.
open ERRLOC_AUTOM_SRC, "$configs_dir/$LDV_errloc_autom" or die"$!";
my @errloc_lines = <ERRLOC_AUTOM_SRC>;
close ERRLOC_AUTOM_SRC;

my $ERRLOC_AUTOM_DST;
open $ERRLOC_AUTOM_DST, ">", "$tmpdir/$LDV_errloc_autom" or die;
my $state = 0;
foreach my $oeline (@errloc_lines) {
    if($oeline =~ /(.*)CPALABEL(.*)/) {
		$state = 1;
		$oeline = "$1$errloc$2";
	}
	vsay 'TRACE', "$oeline";
	print $ERRLOC_AUTOM_DST $oeline;
 }
close $ERRLOC_AUTOM_DST;

# Set the option for the entry point
my $main = $mains[0];
my $orig_trace_fname;
my $outputpath;
# We will need to adjust the trace for seamless integration with LDV, so we'll
# copy the trace here.
my $adjusted_trace_fname = "$tmpdir/error_trace.txt";
if ($ENV{RCV_REMOTE_HOST} && defined $main) {
	# Add specification and mains
	add_cpa_cloud_options(
		'specificationText@' . "$tmpdir/$LDV_errloc_autom",
		'option=analysis.entryFunction=' . $main
	);

	$outputpath = $tmpdir;
	# In CPAchecker, the trace is stored in the separate file in the output path,
	# and we know its name.
	$orig_trace_fname = "$outputpath/output/ErrorPath.txt";

	# Add additional options
	if( $ENV{'CPACHECKER_OPTIONS'} ){
		my @additional_opts = split q{ }, $ENV{'CPACHECKER_OPTIONS'};

		foreach my $opt ( @additional_opts ){
			add_cpa_cloud_options( 'option=' . $opt );
		}
	}
}
else {
	# Add config option to cpachecker call line
	add_cpa_options(
		"-config",
		"$cpa_cfg_new",
		"-entryfunction",
		$main
	);
	
	# We should specify the path for result and temporary files in cpachecker, since
	# the directory it is invoked is unknown, and may be not writeable at all.
	# Besides, we want to know the exact location of the error path. Write
	# ErrorPath.txt and other files to outputpath.
	$outputpath = "$tmpdir/cpa-tmp";
	add_cpa_options("-outputpath", $outputpath);

	# Disable java assertions in "release" mode
	add_cpa_options("-disable-java-assertions");

	# Set java heap size
	if ($ENV{'CPACHECKER_OPTIONS'} !~ m/-heap\s+[0-9]+m/) {
		add_cpa_options("-heap", $heap_size);
	}

	# Additional options a user may specify (watch for the spaces in options!)
	if( $ENV{'CPACHECKER_OPTIONS'} ){
		my @additional_opts = split q{ }, $ENV{'CPACHECKER_OPTIONS'};

		foreach my $opt ( @additional_opts ){
			add_cpa_options( '-setprop ' . $opt );
		}
	}

	# In CPAchecker, the trace is stored in the separate file in the output path,
	# and we know its name.
	$orig_trace_fname = "$outputpath/ErrorPath.txt";

	# We will need to adjust the trace for seamless integration with LDV, so we'll
	# copy the trace here.
	$adjusted_trace_fname = "$tmpdir/error_trace.txt";

	## RUNNING THE TOOL
	# The LDV tools run verifiers in a controlled environment via
	# a special run() library functions we provide. The tools may be limited in
	# time and memory they may expand to. Run function also captures and archivates
	# the tool's console output, and provides a way to access it via simple "event
	# machines" as the tool yields it.

	# CONTROLLING TIME AND MEMORY LIMITS
	# By default, limits are controlled via
	# RCV_TIMELIMIT (CPY+SYS time limit in seconds) and RCV_MEMLIMIT (virtual memory
	# limit in megabytes). The limits from these variables have already been preset.
	# However, you might want to adjust them.

	# CPAchecker itself sets up its own memory limit (as of today, the default is
	# 1200 Mbs of Java heap size.)  However, if it just doesn't work, we don't want
	# our machine to get stuck, so we set up a limit of ~2.2 Gb by default.... well,
	# just in case. The "cases" we observed (char/ipmi/ipmi_watchdog.ko)
	# demonstrate that this is a good estimate of 1.0 Gb of the actual resident
	# memory taken.
	set_limits(
		# memlimit => 2_200_000, #RCV_MEMLIMIT does not work if this limit is set up
		# Signal that CPAchecker should be killed with SIGKILL,
	        # instead of TERM-wait-KILL sequence.
	        # This is a bug in LDV tools, to be fixed.
		kill_at_once => 1,
	);

	# Time limiting script may breakdown the time the verifier was running into
	# buckets. If you use a separate solver, you might try to add a specific
	# bucket.

	# Each bucket is a regular expression that should match a process in a tool's
	# process tree. The bucket name sums the runtimes of all the processes that
	# matched the regular expression.

	# However, for processes that live for a very short time (if you use an external
	# verifiers), the toolset can't calculate this time precisely.  However, if such
	# processes are all children of a speific process (such as solvers are children
	# of java process, or of the smtlibServer in BLAST), you may specify
	# 'CHILD:.*parent.*' regexp as a pattern.  See BLAST's frontend for an example.
	add_time_watch(
		'JAVA' => '.*java.*',
	);
}

# Check that all files provided to the CPAchecker tool are not empty
if (-z "$tmpdir/$LDV_errloc_autom") {
	die "An empty file was provided as an automaton specification '$tmpdir/$LDV_errloc_autom'";
}
foreach my $file (@files){
	if (-z $file) {
		die "An empty file was provided for checking '$file'";
	}
}


# HANDLING THE OUTPUT
# As mentioned above, the access to the tool output is provided as a registry of several state machines.

# A state machine is a perl subroutine reference, maintaining its internal state
# via closure mechanism.  It takes a line printed by the tool as an input,
# changes its internal state, and returns either an undef, or a hash reference
# to several KEY=>VALUE pairs.

# For all machines in the registry, the hashes are merged into one, and you may
# access it after the run has accomplished.

# State machines are generated by subroutines that you may find at the end of the file.

# Create verdict calculator.  CPAchecker prints the verdict to the console, and
# we fill the VERDICT bucked with this result, if any.
add_automaton(cpachecker_verdict());

# Detect JAVA's native OOM errors, and fill LIMITS bucket (usual time and memory
# limit violations go there as well).
add_automaton(java_oom());

# Check if CPAchecker has detected any syntax errors, and fille the SYNTAX
# bucket.
add_automaton(cpachecker_syntax());

# Dump the last 50 lines from stderr output of the tool into the 'TAIL' bucket.
# tail_automaton is a library function; you may find the sources in
# shared/perl/modules/DSCV/RCV/Library.pm

# Note the 'stderr' after the automaton.  It means that it is only applied to
# the standard error stream.  You may specify 'stdout' here as well or instead.
# Here, we're more interested in any exceptions the verifier produces
add_automaton(tail_automaton(50), 'stderr');

# Now the limits are set and automatons are added.  We may run the tool
# (specified by the command line we have already prepared).  As an output, we'll
# get:
#   * the result of the run ('OK', 'SIGNAL', or 'LIMITS'), OK meaning that the
#     tool was not interrupted, but, possibly, returned a nonzero code
#   * the return code itself
#   * the merged hash of the automata added.
#   * the file where gzip-ped debug trace resides
my ($result, $errcode, $automata_results, $debug_trace);
my $total_sleeping = 0;
if ($ENV{RCV_REMOTE_HOST} && $main) {
	# Add host and execute request
	add_cpa_options($ENV{RCV_REMOTE_HOST} . '/runs');
	vsay('NORMAL', q{Perform request: '} . ( join ' ', @cpachecker_options ) . q{'});
	
	# Make request several times in case of problems with a network
	my $connection_limit = $ENV{RCV_SLEEPING_LIMIT} || 7200;
	vsay('NORMAL', "Ready for pending cloud for '$connection_limit' sec");
	my $msg = 1;
	while ($total_sleeping < $connection_limit && $msg) {
		$msg = request_to_server(@cpachecker_options);
		if ($msg) {
			if ($total_sleeping < 30) {
				sleep 5;
				$total_sleeping += 5;
			}
			else {
				sleep 30;
				# Add also internal subprogramm overhead on retries
				$total_sleeping += 30;
			}
		}
	}
	if ($msg) {
		die $msg;
	}

	# Check that stdout and stderr were created
	my $common_file = "$tmpdir/output.log";
	my $stdout = "$tmpdir/stdout";
	my $stderr = "$tmpdir/stderr";

	if (!(-f $stdout && -f $stderr) && !-f $common_file) {
		die "Cannot find both or one of neccessary files '$stdout' and '$stderr' or '$common_file'";
	}
	elsif (-f $common_file) {
		$stderr = $common_file;
		$stdout = $common_file;
	}

	# Extract data from report about resource consumption
	my %expected_results = ( 
		command => undef,
		exitcode => undef,
		returnvalue => undef,
		walltime => undef,
		cputime => undef,
		memory => undef,
		memoryLimit => undef,
		timeLimit => undef,
		signal => undef,
		kernel_dumped_flag => undef,
		termination_status => 'completed in limits',
	);

	# Read Web interface output file
	my $timeout_file = "$tmpdir/runInformation.txt";
	vsay('DEBUG', "Open file with run info: '$timeout_file'");
	open my $fd, '<', $timeout_file
		or die "Cannot open file '$timeout_file': $!";
	my @lines = <$fd>;
	close $fd 
		or die "Cannot save file '$timeout_file': $!";
	chomp @lines;
	
	# Parse Web interface output file
	foreach my $line (@lines) {
		if ($line =~ /^(\w+)=/) {
			my $key = $1;
			my $val = $';
			if (!defined $key) {
				die "Unknown output format of the file: '$tmpdir/runInformation.txt'";
			}
			$expected_results{$key} = $val;
		}
		else {
			die "Unknown output format of the file: '$tmpdir/runInformation.txt'";
		}
	}

	# Convert values
	$expected_results{timeLimit} = convert_cloud_time($expected_results{timeLimit});
	$expected_results{walltime} = convert_cloud_time($expected_results{walltime});
	$expected_results{cputime} = convert_cloud_time($expected_results{cputime});
	$expected_results{memory} = convert_memory('specified_mem', $expected_results{memory});
	$expected_results{memoryLimit} = convert_memory('specified_mem', $expected_results{memoryLimit});

	# TODO: This code is far from perfect, but CPAchecker team promised
	# that they will implement it on server side someday
	# Determine termination status

	# Extract exit code
	my $original_code = $expected_results{exitcode};
	if ($original_code > 255){
		$original_code = int($original_code / 256);
	}
	$expected_results{signal} = $original_code & 127;
	$expected_results{kernel_dumped_flag} = $original_code & 128;
	$expected_results{exitcode} = $original_code >> 8;

	# Extract signal
	vsay('TRACE', "Returned exit code, signal and dump flag: '$expected_results{exitcode}', '$expected_results{signal}', '$expected_results{kernel_dumped_flag}'");

	if ($expected_results{signal}) {
		$expected_results{termination_status} = "killed by signal: $expected_results{signal} (Killed)";
		
		if ($expected_results{memoryLimit} == 0 
			|| $expected_results{timeLimit} == 0
			|| $expected_results{walltime} == 0) {
			die "One of the resource limits was provided as 0";
		}
		else {
			my $mem_pr = int(($expected_results{memory} / $expected_results{memoryLimit}) * 100);
			my $wall_pr = int(($expected_results{walltime} / $expected_results{timeLimit}) * 100);
			my $cpu_pr = int(($expected_results{cputime} /$expected_results{timeLimit}) * 100);

			if (99 <= $mem_pr) {
				$expected_results{termination_status} = $expected_results{termination_status} . "\n\tmemory exhausted";
				vsay('TRACE', "$mem_pr% of memory exhausted");
			}
			elsif (99 <= $wall_pr) {
				$expected_results{termination_status} = $expected_results{termination_status} . "\n\twall time exhausted";
				vsay('TRACE', "$wall_pr% of wall time exhausted");
			}
			elsif (99 <= $cpu_pr) {
				$expected_results{termination_status} = $expected_results{termination_status} . "\n\ttime exhausted";
				vsay('TRACE', "$cpu_pr% of cpu time exhausted");
			}
		}
	}

	my @values = (
		$expected_results{memoryLimit},
		$expected_results{timeLimit},
		$expected_results{command},
		$expected_results{exitcode},
		$expected_results{termination_status},
		$expected_results{walltime},
		$expected_results{cputime},
		$expected_results{memory}
	);

	# Prepare artificial report from cloud one
	my $descr_err = sprintf (<<EOR , @values);
Resource Manager settings:
	memory limit: %s bytes
	time limit: %s ms
	command: %s
Resource Manager execution status:
	exit code (resource manager): 0
Command execution status:
	exit code: %s
	%s
Time usage statistics:
	wall time: %s ms
	cpu time: %s ms
Memory usage statistics:
	peak memory usage: %s bytes
EOR

	# Write it to the file which is expected by RCV
	$timeout_file = get_timeout_file();
	vsay('DEBUG', "Save run info in timout common ldv format: '$timeout_file'");
	open my $fd, '>', $timeout_file
		or die "Cannot open file '$timeout_file'";
	print {$fd} $descr_err
		or die "Cannot write to file '$timeout_file'";
	close $fd 
		or die "Cannot save file '$timeout_file'";

	# Check output and prepare report
	($result, $errcode, $automata_results, $debug_trace) = rcv_run([], { stdout => $stdout, stderr => $stderr });
}
else{
	# Start CPAchecker and then check its results and prepare report
	($result, $errcode, $automata_results, $debug_trace) = run(@cpachecker_options);
}


# NOTE that you should re-add automata with a fresh state if you plan to perform more runs.


# The result of the run is
#   * verdict (safe, unsafe, or unknown);
#   * error trace file;
#   * description with arbitrary text information.  It's a good idea to include
#     some scientific statistics here.
#   * more files you might want to collect from all verification tasks.


# Now calculate the description and verdict.  Verdict was calculated by our
# automaton (if it succeeded).  However, if CPAchecker has been terminated
# abnormally, the relevant bucket contains an undefined value; assume an unknown
# verdict
my $verdict = $automata_results->{VERDICT} || 'unknown';

# Let's prepare the description string step-by-step
my $description = '';

# If something has prevented CPAchecker from getting a verdict, we micht want to
# know if there was an exception.  Therefore, we'll add the exception to
# description.
if ($verdict eq 'unknown') {
	my @errbuf = @{$automata_results->{'TAIL'}};
	# Add error buffers on unknown.  But first, filter some useless things out of them
	# CPAchecker's trace is divided into blocks by empty lines.  Some blocks are not interesting to us, and we want the mremoved.
	local $_;
	my $cpaerrmsg = '';
	my $removing = '';	#if we're removingall stuf until the next empty line
	for my $ln (@errbuf){
		$removing=1 if $ln=~/Dead code detected/;
		$removing=1 if $ln=~/Ignoring inline assembler/;
		if ($ln =~ /^$/){
			$removing = '';
		}else{
			$cpaerrmsg.=$ln."\n" unless $removing;
		}
	}
	$description .= $cpaerrmsg."\n";
}

# This part should adjust the trace so that it resembles BLAST format.  For now,
# we have implemented a special converter for CPAchecker, but for any other
# tool, a converter should be implemented here.

# To convert CPAchecker error traces to the common format and visualize them
# together with related source code add a header and corresponding CIL source
# files.
local $_;
if ($verdict eq 'unsafe') {
	open(ORIG_TRACE_FILE, '<', $orig_trace_fname) or die "Can't open file with cpachecker trace: \"$orig_trace_fname\", $!";
	open(TRACE_FILE, '>', $adjusted_trace_fname) or die "Can't open file with adjsuted cpachecker trace: \"$adjusted_trace_fname\", $!";
	print TRACE_FILE "CPAchecker error trace v1.2\n"; # Using one format for error traces.
	print TRACE_FILE "-------NO_CIL-------\n" if ($no_cil);
	for my $src_file (@files) {
		print TRACE_FILE "-------$src_file-------\n" if ($no_cil);
		
		if (!$no_cil)
		{
			open(SRC_FILE, '<', $src_file) or die "Can't open the source file: \"$src_file\", $!";
		
			print TRACE_FILE "-------$src_file-------\n";
			while(<SRC_FILE>) {
				print TRACE_FILE  $_
			}
			print TRACE_FILE "\n--------------\n";
			close(SRC_FILE);
		}

	}
	print TRACE_FILE "\n--------------\n" if ($no_cil);
	while (<ORIG_TRACE_FILE>) {
		print TRACE_FILE $_;
	}
	close TRACE_FILE;
	close ORIG_TRACE_FILE;
}
#Coverage.
my $ifile =  $outputpath."/coverage.info";
my $ioutput = $tmpdir."/coverage/";
my $output_lcov;
#run script, if we've found .info file
if (-e $ifile) {
	$output_lcov = gen_coverage_report(
			output_dir => $ioutput,
			info_file => $ifile,
			skip => "^ldv_(.+)(\\d+)\$",
		);
}

#Lockstat
my $lockstat_results = $outputpath."/unsafe_rawdata";
if (-e $lockstat_results) {
	open(ORIG_TRACE_FILE, '<', $lockstat_results) or die "Can't open file with cpachecker trace: \"$lockstat_results\", $!";
	open(TRACE_FILE, '>', $adjusted_trace_fname) or die "Can't open file with adjsuted cpachecker trace: \"$adjusted_trace_fname\", $!";
	for (@files) {
		open(SRC_FILE, '<', $_) or die "Can't open the source file: \"$_\", $!";
		print TRACE_FILE "CPAchecker error trace v1.1\n";
		print TRACE_FILE "-------$_-------\n";
		while(<SRC_FILE>) {
			print TRACE_FILE  $_
		}
		print TRACE_FILE "\n--------------\n";
		close(SRC_FILE);
	}
	my $statistics = 1;
	my $real_unsafe = 0;
	while (<ORIG_TRACE_FILE>) {
		if ($_ =~ /^#/ && $statistics == 1) {
			# At first, there are common statistics - skip it
			$statistics = 0;
		}
		next if ($statistics == 1);
		if ($_ =~ /^#/) {
			$real_unsafe = 1;
			<ORIG_TRACE_FILE>;
			my $name = <ORIG_TRACE_FILE>;
			chomp($name);
			print TRACE_FILE "Line 0:     N0 -{/*$name*/}-> N0\n";
			next;
		}
		print TRACE_FILE $_;
	}
	close TRACE_FILE;
	close ORIG_TRACE_FILE;
	if ($real_unsafe == 1)
	{
		$verdict = 'unsafe';
	}
}

# Return results.  The "verdict", "description", and "error_trace" are
# obligatory.  You may add more hash entries, the values should contain files,
# and the keys will distinguish these files by meaning.  The files you've
# specified this way will be stored in the package with results and associated
# with the respective launches that generated them.
result(
	verdict => $verdict,
	description => $description,
	error_trace => $adjusted_trace_fname,
 	coverage => $output_lcov,
);


# CPAchecker wrapper ends
# DO NOT INVOKE "exit" FROM HERE!!!

#===================
#  AUTOMATA
#===================

sub get_heap_size
{
	my $heap_size = shift;
	$heap_size = $heap_size * 3 / 4;
	$heap_size = $heap_size / 1000000 . 'm';
	return $heap_size;
}

sub java_oom
{
	return sub{
		my $l=shift or return undef;
		# NOTE that this overrides the LIMITS bucket, which is used internally
		$l=~/^Exception.*OutOfMemory/i and return {'LIMITS' => 'Memory Limit Exceeded'};
		return undef;
	};
}

sub cpachecker_verdict
{
	return sub{
		my $l=shift or return undef;
		# Old versions of CPAchecker print somthing like this...
		$l =~ /Error location\(s\) reached\? NO/ and return {'VERDICT' => 'safe'};
		$l =~ /Error location\(s\) reached\? YES/ and return {'VERDICT' => 'unsafe'};
		# Newer versions choose more generic terms
		$l =~ /Given specification violated\? NO/ and return {'VERDICT' => 'safe'};
		$l =~ /Given specification violated\? YES/ and return {'VERDICT' => 'unsafe'};
		# Even more newer versions change the format again...
		$l =~ /Verification result: UNSAFE/ and return {'VERDICT' => 'unsafe'};
		$l =~ /Verification result: SAFE/ and return {'VERDICT' => 'safe'};
		# New format for CPAchecker-1.3 (as in SV-COMP'14)
		$l =~ /Verification result: FALSE/ and return {'VERDICT' => 'unsafe'};
		$l =~ /Verification result: TRUE/ and return {'VERDICT' => 'safe'};

		$l =~ /No error locations reachable from .*, analysis not necessary/ and return {'VERDICT' => "safe"};
		return undef;
	};
}

sub cpachecker_syntax
{
	my $found_syntax_error = '';
	my $parse_errormsg = '';
	return sub{
		my $l=shift;
		$l =~ /Syntax error in line / and do { $found_syntax_error = 1;};
		return undef unless $found_syntax_error;
		# Ok, we're inside the syntax error;
		if (defined $l) {
			$parse_errormsg .= "$l";
		} else {
			# Last line of a trace, return what we've accumulated
			return {'SYNTAX' => "CPAchecker couldn't parse file:\n$parse_errormsg\n", 'VERDICT'=>'unknown'};
		}
		return undef;
	};
}

sub convert_time
{
	my $info = {@_};
	my $time = $info->{specified_time};
	if ($time =~ /^(\d+[.]?\d*)(min|ms|s|)$/)
	{
		my $res = $1;
		if ($2 eq "min")
		{
			$res *= 60;
		}
		if ($2 eq "ms")
		{
			$res /= 1000;
		}
		return $res;
	}
	else
	{
		die "Wrong format for time limit option: <number><min|ms|s|> was expected";
	}
}

sub add_cpa_cloud_options
{
	my @opts = @_;

	while(@opts){
		my $opt = shift @opts;
		push @cpachecker_options, '--data-urlencode', $opt;
	}
}

sub add_cpa_options
{
	my @opts = @_;

	while(@opts){
		my $opt = shift @opts;
		push @cpachecker_options, $opt;
	}
}

sub convert_cloud_time
{
	my $in = shift;
	# Value can be in several parts
	my @values = split ' ', $in;
	my $out = 0;
	if (scalar @values > 0) {
		foreach my $val (@values) {
			$out += convert_time(specified_time => $val);			
		}
	}
	else{
		die 'unknown time format of CPAchecker cloud output';
	}

	# Convert to ms	
	$out = $out * 1000;
	$out =~ s/[.]\d+//;	
	return $out;
}

sub convert_memory
{
	my $info = {@_};
	my $mem = $info->{specified_mem};
	if ($mem =~ /^(\d+[.]?\d*)\s*(Kb|Mb|MB|GB|Gb|Kib|Mib|Gib|B|)$/)
	{
		my $res = $1;
		if ($2 eq "Kb")
		{
			$res *= 1000;
		}
		if ($2 eq "Mb")
		{
			$res *= 1000 * 1000;
		}
		if ($2 eq "Gb")
		{
			$res *= 1000 * 1000 * 1000;
		}
		if ($2 eq "Kib")
		{
			$res *= 1024;
		}
		if ($2 eq "Mib" || $2 eq "MB")
		{
			$res *= 1024 * 1024;
		}
		if ($2 eq "Gib" || $2 eq "GB")
		{
			$res *= 1024 * 1024 * 1024;
		}

		return $res;
	}
	else
	{
		die "Wrong format for memory limit option: <number><Kb|Mb|MB|GB|Gb|Kib|Mib|Gib> was expected";
	}
}

sub check_limit
{
	my $env_variable = $_[0];
	my $key = $_[1];
	if (!defined $ENV{$env_variable}) {
		$ENV{$env_variable} = $limits{$key};
	} else {
		$ENV{$env_variable} == $limits{$key} or	die
			"The value of $env_variable differs from the limit returned by get_limits ($ENV{$env_variable} != $limits{$key})"
	}
}

sub request_to_server
{
	my @cmd = @_;
	my $msg;

	my $id = `@cpachecker_options`;
	if (!defined $id || $id eq '' || $id =~ /\s/ || $? != 0) {
		$msg = "Cannot obtain run id from the cloud, got instead: '$id'";
		vsay('WARNING', $msg);
		return $msg;
	}
	vsay('NORMAL', "Got an ID from the server '$id'");

	# Wait for results
	my @opts = (
		'curl',
		'-s',
		'-H',
		'"Accept: text/plain"',
		'-u',
		$ENV{RCV_ACCESS},
		"$ENV{RCV_REMOTE_HOST}/runs/$id/state"
	);
	vsay('TRACE', q{Check request status: '} . ( join ' ', @opts ) . q{'});
	my $state;
	my $ret;
	my $last_state = '';
	while (!defined $state || $state eq 'WAITING' || $state eq 'PROCESSING' || $state eq 'PENDING') {
		$state = `@opts`;
		
		$ret = $?;
		if ($? != 0 || !defined $state) {
			$msg = "Cannot check status of results for the id '$id'";
			vsay('WARNING', $state);
			return $msg;
		}
		else {
			if ($last_state ne $state) {
				vsay('NORMAL', "Current state of the task: '$state'");
				$last_state = $state;
			}
		}

		if ($state eq 'UNKNOWN') {
			$msg = "Seems that server lost results for the id '$id'";
			vsay('WARNING', $msg);
			return $msg;
		}
		elsif ($state eq 'WAITING' || $state eq 'PROCESSING' || $state eq 'PENDING') {
			sleep 0.5;
			$total_sleeping = $total_sleeping + 0.5;
		}
		elsif ($state eq 'FINISHED') {
			last;
		}
		else {
			$msg = "Unsupported CPAchecker Web-interface response: '$state'";
			vsay('WARNING', $msg);
			return $msg;
		}
	}

	# Download results and install them to the working dir
	my $tries = 3;
	$msg = 1;
	while($tries > 0 && $msg){
		# Get package with results
		my $zip = "$tmpdir/results.zip";
		$msg  = fetch_results($zip, $id);
		if($msg){
			$msg = "Result download failed: '$msg'";
			vsay 'WARNING', $msg;
		}
		else{
			$msg = extract_results($zip);
			if($msg){
				$msg = "Result extraction failed: '$msg'";
				vsay 'WARNING', $msg;
			}
		}

		# Extract package
		$tries--;
		sleep 0.5;
		$total_sleeping = $total_sleeping + 0.5;
	}
	if($msg){
		return $msg;
	}	

	return 0;
}

sub fetch_results
{
	my ($zip, $id) = @_;
	my $msg;

	my @opts = (
		'curl',
		'-s',
		'-o',
		$zip,
		'-u',
		$ENV{RCV_ACCESS},
		"$ENV{RCV_REMOTE_HOST}/runs/$id/result"
	);
	vsay('DEBUG', q{Download results: '} . ( join ' ', @opts ) . q{'});

	my $code;
	my $tries = 5;
	while ((!defined $code || $code != 0) && $tries > 0) {
		my $code = system(@opts);

		if ($code != 0) {
			$msg = "Cannot fetch data, exit code '$code'";
			vsay('WARNING', $msg);
			sleep 0.5;
			$total_sleeping = $total_sleeping + 0.5;
			vsay('DEBUG', "Making another attempt...");
		}
		$tries--;
	}

	if ($code != 0) {
		$msg = "Cannot fetch data from server, exit code '$code': $!";
		vsay('WARNING', $msg);
		return $msg;
	}
	if (!-f $zip) {
		$msg = "Cannot fetch data from server, file doesn't exist '$zip'";
		vsay('WARNING', $msg);
		return $msg;
	}

	return 0;
}

# Extract results from the archive
sub extract_results
{
	my ($zip) = @_;

	# Extract it in working dir
	my @opts = (
		'unzip', 
		'-u',
		'-q',
		'-o',
		$zip,
		'-d',
		$tmpdir
	);
	vsay('DEBUG', q{Extract results: '} . ( join ' ', @opts ) . q{'});
	my $code = system(@opts);

	if ($code) {
		return $!;
	}

	return 0;
}
