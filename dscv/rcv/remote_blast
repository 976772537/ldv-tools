#!/usr/bin/perl -w

################################################################################
# Copyright (C) 2010-2012
# Institute for System Programming, Russian Academy of Sciences (ISPRAS).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# RCV frontend for BLAST tool.

# For elaborate description of writing the verifiers, please, refer to CPAchecker's wrapper located in dscv/rcv/cpachecker.

use Readonly;

Readonly my $BLAST_BIN => 'pblast.opt';


set_tool_name("REMOTE BLAST");

my @files = preprocess_all_files('cpp');

# Options that will be passed to the blast tool
my @blast_options = ($BLAST_BIN ,@files);

# Set default options
# These are: -predH 7 -lattice -include-lattice symb -include-lattice list -craig 2
push @blast_options,
	"-predH","7","-craig","2",	# Default heuristics on
	"-ignoredupfn", # Ignore duplicated functions when constructing CFA
	"-nosserr", # Ignore "combining structure and non-structure values" error.  LLVM emits such nasty code.
	"-enable-recursion",# Allow recursive call graphs, but cut out the actual recursive calls
	"-nolabelmeanssafe",# Treat absence of error label (syntactical inreachability) as SAFE instead of error.
;

# Check the number of entry points 
die "You can only specify one main for BLAST!" if (scalar @mains != 1);

# Set the option for the entry point
my $main = $mains[0];
push @blast_options, "-main",$main;

# Check the number of error locations
die "You can only specify one error label for BLAST!" if (scalar @errlocs != 1);
my $errloc = $errlocs[0];
push @blast_options, "-L",$errloc;

# Interpret hints
# Cldepth
if (my $cld = $hints_tag->first_child_text('cldepth')){
	push @blast_options,"-cldepth",$cld;
}else{
	# Temporarly set cldepth to zero
	push @blast_options,"-cldepth","0";
}
# Aliases may be explicitely required by the model
my $do_aliases = $hints_tag->first_child_text('alias');

# We may also activate the aliases via env var.
$do_aliases ||= $ENV{'BLAST_ALIASES'};
if ($do_aliases){
	vsay ('NORMAL',"Running BLAST with alias analysis (this may take longer).\n");
	push @blast_options,
		"-alias","bdd",	# Turn alias analysis on
		"-cref",	#"Complete REFinement", performs alias iterations, implies alias analysis
		"-nomusts","-const",	#Aliasing heuristics implemented in ISPRAS
	;
}else{
	vsay ('DEBUG',"Running BLAST without alias analysis.\n");
	push @blast_options, "-alias","";	# Turn alias analysis off
}

# Show a warning if an obsolete variable to trigger alias analysis is used
vsay('WARNING',"Use of BLAST_EXP_NOALIAS is obsolete!!\n") if $ENV{'BLAST_EXP_NOALIAS'};

# Filter also lattices if specified
unless ($ENV{'BLAST_EXP_NOLATTICE'}){
	push @blast_options,
		"-lattice","-include-lattice","symb", 	# Symbolic-store lattice
	;
}

# Filter stopsep
unless ($ENV{'BLAST_NOSTOPSEP'}){
	push @blast_options, "-stop-sep"; # Use stop-sep instead of stop-join
	unless ($ENV{'BLAST_MERGE'}){
		push @blast_options, "-merge","bdd"; 	# Merge at equiv bdds, default
	} else {
		push @blast_options, "-merge", $ENV{'BLAST_MERGE'};
	}
}

# Rerouting functionality enabling
my $rerouteT = $hints_tag->first_child('rerouter');
if ($rerouteT){
	my @reroute_map = $rerouteT->children_text('map');
	my @reroute_map2 = $rerouteT->children_text('map2');
	my @reroute_foreach = $rerouteT->children_text('foreach');
	my $placeholder = $rerouteT->first_child_text('placeholder');
	# Skip if there's not map and foreach handlers
	if (@reroute_map || @reroute_foreach){
		push @blast_options,"-reroute";
		if($rerouteT->first_child('first_only')) {
			push @blast_options,"-reroute-first";
		}
		local $_;
		push @blast_options,"-reroute-map",$_ for @reroute_map;
		push @blast_options,"-reroute-map2",$_ for @reroute_map2;
		push @blast_options,"-reroute-foreach",$_ for @reroute_foreach;
		push @blast_options,"-reroute-placeholder",$placeholder if $placeholder;
	}
}

# External settings
push @blast_options,(split /\s+/,$ENV{'BLAST_OPTIONS'});
# If an SMT solver is specified via environment, make sure that BLAST uses SMTlib solvers
push @blast_options,"-smt" if $ENV{'BLAST_SOLVER'};

# Use BLAST's ocamltune script to tune OCaml's performance
unless ($ENV{'BLAST_NOOCAMLTUNE'}){
	unshift @blast_options, "ocamltune";
	vsay ('DEBUG',sprintf("OCaml machine-specific tuning is performed!"));
}else{
	vsay ('NORMAL',sprintf("OCaml machine-specific tuning is not performed."));
}

# Add nececcery automatons
add_automaton(safe_unsafe());

my $error_trace = "$tmpdir/error_trace.txt";

# We will need to adjust the trace for seamless integration with LDV, so we'll copy the trace here
my $adjusted_trace = "$tmpdir/error_trace_m.txt";

# It's important to specify 'stdout' here, as the output to the stderr may clobber the trace and make the Error Trace Visualizer fail, yielding a "Script error" for this driver.
add_automaton(dumptrace($error_trace),'stdout');

add_automaton(ocaml_detect());

# Dump the last 50 lines from stderr output of the tool
add_automaton(tail_automaton(50),'stderr');

# TODO: Get data about remote host

# TODO: Prepare run command and control file

# TODO: Prepare dir with files

#===================
#  AUTOMATA
#===================

# Verdict check automaton
sub safe_unsafe
{
	return sub {
		my $l=shift or return undef;
		$l=~/The system is safe/ and return {VERDICT=>'safe'};
		$l=~/The system is unsafe/ and return {VERDICT=>'unsafe'};
		return undef;
	};
}

sub exception
{
	return sub {
		my $l=shift or return undef;
		$l=~/Ack! The gremlins again!: (.*)/ and return {'EXCEPTION' => "Exception: $1"};
		return undef;
	};
}


# Trace dumper.  Usage:  my $dumper = dumptrace(filename);
use constant { TRACE_WAIT => 0, TRACE_READ => 1, TRACE_DONE =>2};
sub dumptrace
{
	my $fname = shift or die;
	my $state = TRACE_WAIT;
	my $current_fh;
	return sub {
		my $line = shift;

		!defined $line && $state==TRACE_DONE and do{ close $current_fh; return undef;};
		return undef if $state == TRACE_DONE;

		$line =~ /Error trace: \(final\)/ and do {$state = TRACE_READ; return undef;};
		$line =~ /Error trace ends \(final\)/ and do {$state = TRACE_DONE; return undef;};

		if ($state == TRACE_READ){
			unless ($current_fh){
				# Do not open for appending, open for writing instead (see bug #1264)
				open $current_fh, ">", $fname or die;
			}
			print $current_fh $line;
		}
		return undef;
	};
}

# OCaml error detector
sub ocaml_detect
{
	return sub {
		my $line = shift;
		!defined $line and return undef;

		if ($line =~ /(Fatal error: out of memory.)/){
			return {'OCAML'=>"OCaml exception: $1"};
		}

		return undef;
	};
}

__END__