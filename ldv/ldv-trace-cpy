#!/usr/bin/perl -w
#

use XML::Twig;

# Xml nodes names.
my $xml_cmd_basedir = 'basedir';
my $xml_cmd_stream = 'cmdstream';
my $xml_cmd_attr_id = 'id';
my $xml_cmd_attr_check = 'check';
my $xml_cmd_entry_point = 'main';
my $xml_cmd_cc = 'cc';
my $xml_cmd_cwd = 'cwd';
my $xml_cmd_in = 'in';
my $xml_cmd_ld = 'ld';
my $xml_cmd_opt = 'opt';
my $xml_cmd_out = 'out';
my $xml_reports_cc = 'cc';
my $xml_reports_ld = 'ld';
my $xml_reports_attr_ref = 'ref';
my $xml_reports_att_env = 'kernel';
my $xml_reports_verdict = 'verdict';
my $xml_reports = 'reports';
my $xml_reports_build = 'build';

my $verdict_unknown = 'UNKNOWN';
my $verdict_ok = 'OK';

my $xml_instrument = 'ldv';
my $xml_instrument_status = 'status';
my $xml_instrument_time = 'time';
my $xml_instrument_desc = 'desc';

#####################################################
# log options
#####################################################
my $psuffix="ldv-trace-cpy";
my $log_level=10;

my $report_in = "";
my $dir = "";

# 0. get options.
get_ldv_opts();

# 0.2 get all reports files
my $twig_handlers = {"$xml_reports/$xml_cmd_ld" => \&hxml_cmdstream_ld };
my $twig_inreport = new XML::Twig(TwigHandlers => $twig_handlers);
$twig_inreport->parsefile($report_in);


#####################################################
# twig  handlers
#####################################################

sub hxml_cmdstream_ld {
	my $trace_path = $_[1]->first_child('trace');
	my $id_kernel;
	my $id_ref;
	my $id_main;
	if($_[1]->has_atts) {
		$id_kernel = $_[1]->att('kernel');
		$id_ref = $_[1]->att('ref');
		$id_main = $_[1]->att('main');
	}
	my $full_id= $id_kernel."_".$id_ref."_".$id_main;

	if($trace_path) {
		ldv_print("Copy sources from trace: \"".$trace_path->text."\".\n");
		# create dir with this driver (kernel+ref+main)
		# kernel + ref + main
#	ldv_dprint("Create dir: \"$dir/$full_id\".");
#	my $full_dir_name = $dir."/".$full_id;
#	mkdir($full_dir_name);
#	print("$full_dir_name\n");
#	ldv_print("$full_dir_name\n");
#	ldv_print($trace_path->text."\n");
		ldv_print 
		system("mkdir -p $dir.sources/$id_kernel") and die;
		open(FIL,$trace_path->text);
		my @lines = <FIL>;
		close(FIL);
		foreach $line (@lines) {
			if ($line =~ s/.*src=\"(.*)\".*/$1/) {
				chomp($line);
#				ldv_print("Copy source: \"$line\".");
			}
		}
	}
}	

######################################################
# option test
######################################################
sub get_ldv_opts
{
	$log_level = $ENV{'LDV_DEBUG'};

	# get all options
	foreach $opt(@ARGV)
	{
		if($opt =~ s/--dir=(.*)/$1/)
		{
			$dir = $opt;
		}
		elsif($opt =~ s/--report-in=(.*)/$1/)
		{
			$report_in = $opt;
		}
		else
		{
			ldv_eprint("Unknown option:\"$opt\".");
			exit 1;
		}
	}
	# test all options
	if(!$report_in) {
		ldv_eprint("You must setup file with state: \"--report-in\".");
		print_usage();
		exit 1;
	} elsif(! -f $report_in) {
		ldv_eprint("Can not find report file: \"$report_in\".");
		print_usage();
		exit 1;
	}
	if(!$dir) {
		ldv_eprint("You must setup output dir for copy drivers src in option: \"--dir\".");
		print_usage();
		exit 1;
	} elsif(! -d $dir) {
		ldv_eprint("Directory with reports not exists: \"$dir\".");
		print_usage();
		exit 1;
	} 
}

sub print_usage
{
	ldv_print("USAGE: $psuffix --dir=reportsdir --report-in=reportfile");
}

#######################################################
# ldv print functions
#######################################################
sub ldv_print
{
	print "$psuffix: $_[0]\n";
}

sub ldv_eprint
{
	ldv_print "ERROR: $_[0]";
}

sub ldv_sprint
{
	if($log_level>=10) {
		ldv_print("$_[0]");
	}
}

sub ldv_iprint
{
	if($log_level>=20) {
		ldv_print("INFO: $_[0]");
	}
}

sub ldv_dprint
{
	if($log_level>=30) {
		ldv_print("DEBUG: $_[0]");
	}
}

sub ldv_tprint
{
	if($log_level>=40) {
		ldv_print("TRACE: $_[0]");
	}
}

sub ldv_aprint
{
	if($log_level==100) {
		ldv_print("$_[0]");
	}
}
