#!/bin/bash

#
#
# ldv-task --driver= --workdir=workdir --env=kernel_id=rule,rule:kernel_id=rule,rule,... ...
#
#

LDV_HOME=`readlink -f \`dirname $0\`/../`;
LOG_PREFIX="ldv-task: ";
USAGE_STRING="LDV_DEBUG=level WORK_DIR=workdir ldv-task --driver=driverpath --env=...";
source $LDV_HOME/shared/sh/log.sh;

LDV_REPORT_FILENAME="report_after_ldv.xml";
LDV_CORE_REPORT_FILENAME="report_after_ldv_core.xml";
LDV_STATE_FILENAME="ldv.state";
LDV_HOME=`readlink -f \`dirname $0\`/../`;
LDV_DIR=$LDV_HOME/ldv;
LDV_KMANAGER=$LDV_DIR/ldv-kmanager;
LDV_CORE_DIR=$LDV_HOME/ldv-core;
LDV_CORE_EXEC=$LDV_CORE_DIR/ldv-core;
LDV_REPORTER=$LDV_DIR/ldv-task-reporter;

ARTIFICIAL_LDV_WORK_DIRNAME=artificial_env;

KERNEL_LEVEL=0;
#
# scan and test command line parameters
#
for arg in $@; do
        case $arg in
                --workdir=*)
                	rworkdir=`echo $arg | sed 's/--workdir=//g'`
			if [ ! -n "$rworkdir" ]; then
				ldv_print "ERROR: Parameter \"--workdir\" - is null. Setup it.";
			        exit 1;
			fi;
			workdir=`echo "readlink -f $rworkdir" | sh`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for working dir: \"$rworkdir\"."
			        exit 1;
			fi;
			if [ ! -d "$workdir" ]; then
			        ldv_print "ERROR: Environment dir not exists: \"$workdir\".";
			        exit 1;
			fi;
		;;
                --env=*)
                	env=`echo $arg | sed 's/--env=//g'`
                ;;
 		--report-out=*)
                	rreportout=`echo $arg | sed 's/--report-out=//g'`
			if [ ! -n "$rreportout" ]; then
				ldv_print "ERROR: Parameter \"--report-out\" - is null. Setup it.";
			        exit 1;
			fi;
			reportout=`echo "readlink -f $rreportout" | sh`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for out report file: \"$rreportout\"."
			        exit 1;
			fi;
			if [ -d "$reportout" ]; then
			        ldv_print "ERROR: Report file already exists as dir: \"$reportout\".";
			        exit 1;
			fi;
			if [ -f "$reportout" ]; then
			        ldv_print "ERROR: Out report file already exists: \"$reportout\".";
			        exit 1;
			fi;
               	;;
  		--cmdstream=*)
                	rcmdstream=`echo $arg | sed 's/--cmdstream=//g'`
			if [ ! -n "$rcmdstream" ]; then
				ldv_print "ERROR: Parameter \"--cmdstream\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
 		--driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
		--jobs=*)
			jobs=`echo $arg | sed 's/--jobs=//g'`
			if [ -z "$jobs" ]; then
				jobs=1;
			fi;
		;;
 		--kernel-driver)
                	KERNEL_LEVEL=1;
                ;;
                *)
                        ldv_print "ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done

if [ -n "$rcmdstream" ]; then
	cmdstream=`echo "readlink -f $rcmdstream" | sh`;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed to read abs-path for cmdstream file: \"$cmdstream\"."
		exit 1;
	fi;
	if [ ! -f "$cmdstream" ]; then
	        ldv_print "ERROR: Cmdstream file not exists: \"$cmdstream\".";
	        exit 1;
	fi;
	KERNEL_LEVEL=1;
else
	if [ ! -n "$rdriver" ]; then
		ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
       		exit 1;
	fi;
	if [ $KERNEL_LEVEL -eq 0 ]; then
		driver=`echo "readlink -f $rdriver" | sh`;
		if [ $? -ne 0 ]; then
			ldv_print "ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
			exit 1;
		fi;
		if [ ! -f "$driver" ]; then
		        ldv_print "ERROR: Driver unpacked sources not exists: \"$driver\".";
		        exit 1;
		fi;
	else
		driver=$rdriver;
	fi;
fi;

if [ ! -n "$env" ]; then
	ldv_print "ERROR: Parameter \"--env\" - is null. Setup it.";
	exit 1;
fi;

if [ ! -n "$workdir" ]; then
	ldv_print "ERROR: Parameter \"--workdir\" - is null. Setup it.";
        exit 1;
fi;

# Instead of cleaning the work dir, we will cherry-pick important files and remove them
# rm -fr $workdir/*;

LDV_STATE=$workdir/$LDV_STATE_FILENAME;
# Remove state file (we will append information to it)
rm -f $LDV_STATE;
touch $LDV_STATE;
if [ $? -ne 0 ]; then
	ldv_print "ERROR: Can't create ldv state file:\"$LDV_STATE\".";
	exit 1;
fi;

k=1;
ART_NAMES="";
for i in `echo $env | sed 's/--env=//' | tr ':' ' '`; do
	ENV_ID=`echo $i | sed 's/@.*//'`;
	RULES=`echo $i | sed 's/.*@//'`;
	ldv_print "NORMAL: Start process for environment \"$ENV_ID\".";

	#
	# Add artificial environment for kmanager
	#
	if [ -n "$cmdstream" ]; then
		#
		# Get an abs path for external kernel
		#
		if [ ! -n "$ENV_ID" ]; then
			ldv_print "ERROR: Parameter \"ENV_ID\" - is null. Setup it.";
			exit 1;
		fi;
		env=`readlink -f $ENV_ID`;
		if [ $? -ne 0 ]; then
			ldv_print "ERROR: Failed to read abs-path for environment dir: \"$ENV_ID\"."
			exit 1;
		fi;
		if [ ! -d "$env" ]; then
			ldv_print "ERROR: Environment dir not exists: \"$env\".";
			exit 1;
		fi;
		ENV_ID=$ARTIFICIAL_LDV_WORK_DIRNAME"_"$k;
		ART_NAMES=$ART_NAMES" "$ENV_ID;
		ldv_print "INFO: Create artificial env id: \"$ENV_ID\" for path to kernel: \"$env\".";
		ldv_print "INFO: Add \"$ENV_ID\" to kmanager.";
		ldv_print "TRACE: LDV_DEBUG=$LDV_DEBUG $LDV_KMANAGER --action=add --src=$env --extractor=vanilla-gsoc --name=$ENV_ID";
		LDV_DEBUG=$LDV_DEBUG $LDV_KMANAGER --action=add --src=$env --extractor=vanilla-gsoc --name=$ENV_ID;
		if [ $? -ne 0 ]; then
			ldv_print "ERROR: Can't add artificial kernel.";
			exit 1;
		fi;
	fi;	

	ldv_print "DEBUG: $LDV_KMANAGER --action=getpath --name=$ENV_ID;";
	KERNEL_PATH=`$LDV_KMANAGER --action=getpath --name=$ENV_ID`;
	if [ $? -ne 0 ]; then
		echo $KERNEL_PATH;
		ldv_print "ERROR: ldv-kmanager return error for this environment: \"$ENV_ID\".";
		exit 1;
	fi;
	WORK_DIR_LOCAL=$workdir/$ENV_ID;
	mkdir -p $WORK_DIR_LOCAL;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can not create environment-dir from task: \"$WORK_DIR_LOCAL\".";
		exit 1;
	fi;
	ldv_print "NORMAL: Calling LDV-core.";
	LDV_CORE_REPORT=$WORK_DIR_LOCAL/$LDV_CORE_REPORT_FILENAME;
	if [ $KERNEL_LEVEL -eq 1 ]; then koption=--kernel-driver=1; fi;
	if [ -n "$cmdstream" ]; then stream_option="--cmdstream=$cmdstream"; else stream_option="--driver=$driver"; fi;
	ldv_print "DEBUG: WORK_DIR=$WORK_DIR_LOCAL $LDV_CORE_EXEC --jobs=$jobs --env=$KERNEL_PATH $stream_option --rule-models=$RULES --report-out=$LDV_CORE_REPORT $koption;";
	WORK_DIR=$WORK_DIR_LOCAL $LDV_CORE_EXEC --jobs=$jobs --env=$KERNEL_PATH $stream_option --rule-models=$RULES $koption --report-out=$LDV_CORE_REPORT $koption;

	if [ $? -ne 0 ]; then
		ldv_print "ERROR: ldv-core failed.";
		exit 1;
	fi;
	echo "$ENV_ID:$WORK_DIR_LOCAL" >> $LDV_STATE;
	let k=$k+1;
done;

#
# add ldv-core reports
#
if [ -n "$reportout" ]; then
	LDV_REPORT=$reportout;
else
	LDV_REPORT=$workdir/$LDV_REPORT_FILENAME;
fi;
ldv_print "NORMAL: Calling LDV reporter.";
ldv_print "DEBUG: LDV_ENVS_TARGET=$LDV_ENVS_TARGET $LDV_REPORTER --report-name=$LDV_CORE_REPORT_FILENAME --report-out=$LDV_REPORT --state-file=$LDV_STATE --reports-dir=$workdir;";
LDV_ENVS_TARGET=$LDV_ENVS_TARGET $LDV_REPORTER --report-name=$LDV_CORE_REPORT_FILENAME --report-out=$LDV_REPORT --state-file=$LDV_STATE --reports-dir=$workdir;
if [ $? -ne 0 ]; then
        ldv_print "ERROR: LDV reporter failed."
        exit 1;
fi;

#
# Remove artififcial environment from kmanager
#
if [ -n "$cmdstream" ]; then
        ldv_print "IFNO: Remove all artificial environments."
	for i in $ART_NAMES; do 
		ldv_print "INFO: Remove artificial environment \"$i\" from kmanager desc.";
		ldv_print "TRACE: LDV_DEBUG=$LDV_DEBUG $LDV_KMANAGER --action=remove --name=$i";	
		LDV_DEBUG=$LDV_DEBUG $LDV_KMANAGER --action=remove --name=$i;
		if [ $? -ne 0 ]; then
			ldv_print "WARNING: Can't remove artifficial environment \"$i\" from kmanager.";
			continue;
		fi;	
	done;
fi;

exit;
