#!/bin/sh

#
#
# ldv-task --driver= --workdir=workdir --env=kernel_id=rule,rule:kernel_id=rule,rule,... ...
#
#
LOG_PREFIX="ldv-task: ";
ldv_print() {
	if [ $LDV_DEBUG -le 0 ]; then if [ -n "`echo $1 | grep WARNING`" -o -n "`echo $1 | grep NORMAL`" -o -n "`echo $1 | grep INFO`" -o -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 10 ]; then if [ -n "`echo $1 | grep INFO`" -o -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 20 ]; then if [ -n "`echo $1 | grep DEBUG`" -o -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 30 ]; then if [ -n "`echo $1 | grep TRACE`" -o -n "`echo $1 | grep ALL`" ]; then return; fi;
	elif [ $LDV_DEBUG -le 40 ]; then if [ -n "`echo $1 | grep ALL`" ]; then return; fi; fi;
	if [ $LDV_DEBUG -eq 40 ]; then 
		echo $LOG_PREFIX"TRACE: Trace mode on. Press any key to continue...";
		read;
	fi;
	echo "$LOG_PREFIX$1";
}
if [ ! -n "$LDV_DEBUG" ]; then LDV_DEBUG=10; fi;


LDV_HOME=`readlink -f \`dirname $0\`/../`;
LDV_DIR=$LDV_HOME/ldv;
LDV_KMANAGER=$LDV_DIR/ldv-kmanager;
LDV_CORE_DIR=$LDV_HOME/ldv-core;
LDV_CORE_EXEC=$LDV_CORE_DIR/ldv-core;

KERNEL_LEVEL=0;

#
# scan and test command line parameters
#
print_usage_and_exit() {
		ldv_print "NORMAL: USAGE: LDV_DEBUG=level WORK_DIR=workdir ldv-task --driver=driverpath --env=...";
		exit 1;
}
for arg in $@; do
        case $arg in
                --workdir=*)
                	rworkdir=`echo $arg | sed 's/--workdir=//g'`
			if [ ! -n "$rworkdir" ]; then
				ldv_print "ERROR: Parameter \"--workdir\" - is null. Setup it.";
			        exit 1;
			fi;
			workdir=`readlink -f $rworkdir`;
			if [ $? -ne 0 ]; then
				ldv_print "ERROR: Failed to read abs-path for working dir: \"$rworkdir\"."
			        exit 1;
			fi;
			if [ ! -d "$workdir" ]; then
			        ldv_print "ERROR: Environment dir not exists: \"$workdir\".";
			        exit 1;
			fi;
		;;
                --env=*)
                	env=`echo $arg | sed 's/--env=//g'`
                ;;
                --driver=*)
                	rdriver=`echo $arg | sed 's/--driver=//g'`
			if [ ! -n "$rdriver" ]; then
				ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
			        exit 1;
			fi;
		;;
 		--kernel-driver)
                	KERNEL_LEVEL=1;
                ;;
                *)
                        ldv_print "ERROR: Unknown options: '$arg'.";
			print_usage_and_exit;
                ;;
        esac
done

if [ ! -n "$env" ]; then
	ldv_print "ERROR: Parameter \"--env\" - is null. Setup it.";
        exit 1;
fi;
if [ ! -n "$rdriver" ]; then
	ldv_print "ERROR: Parameter \"--driver\" - is null. Setup it.";
        exit 1;
fi;
if [ $KERNEL_LEVEL -eq 0 ]; then
	driver=`readlink -f $rdriver`;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Failed to read abs-path for driver source: \"$rdriver\"."
		exit 1;
	fi;
	if [ ! -f "$driver" ]; then
	        ldv_print "ERROR: Driver unpacked sources not exists: \"$driver\".";
	        exit 1;
	fi;
else
	driver=$rdriver;
fi;

if [ ! -n "$workdir" ]; then
	ldv_print "ERROR: Parameter \"--workdir\" - is null. Setup it.";
        exit 1;
fi;

for i in `echo $env | sed 's/--env=//' | tr ':' ' '`; do
	ENV_ID=`echo $i | sed 's/x.*//'`;
	RULES=`echo $i | sed 's/.*x//'`;
	KERNEL_PATH=`$LDV_KMANAGER getpath $ENV_ID`;
	ldv_print "NORMAL: Start process for environment $ENV_ID.";
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: ldv-kmanager return error for this environment: \"$KERNEL_PATH\".";
		exit 1;
	fi;
	WORK_DIR_LOCAL=$workdir/$ENV_ID;
	mkdir $WORK_DIR_LOCAL;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: Can not create environment-dir from task: \"$WORK_DIR_LOCAL\".";
		exit 1;
	fi;
	ldv_print "NORMAL: Calling LDV-core.";
	if [ $KERNEL_LEVEL -eq 1 ]; then koption=--kernel-driver; fi;
	ldv_print "DEBUG: WORK_DIR=$WORK_DIR_LOCAL $LDV_CORE_EXEC --env=$KERNEL_PATH --driver=$driver --rule-models=$RULES $koption;";
	WORK_DIR=$WORK_DIR_LOCAL $LDV_CORE_EXEC --env=$KERNEL_PATH --driver=$driver --rule-models=$RULES $koption;
	if [ $? -ne 0 ]; then
		ldv_print "ERROR: ldv-core failed.";
		exit 1;
	fi;
done;
exit;
